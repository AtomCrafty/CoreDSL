/**
 * generated by Xtext 2.22.0
 */
package com.minres.coredsl.coreDsl.impl;

import com.minres.coredsl.coreDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CoreDslFactoryImpl extends EFactoryImpl implements CoreDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CoreDslFactory init()
  {
    try
    {
      CoreDslFactory theCoreDslFactory = (CoreDslFactory)EPackage.Registry.INSTANCE.getEFactory(CoreDslPackage.eNS_URI);
      if (theCoreDslFactory != null)
      {
        return theCoreDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CoreDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CoreDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CoreDslPackage.DESCRIPTION_CONTENT: return createDescriptionContent();
      case CoreDslPackage.IMPORT: return createImport();
      case CoreDslPackage.ISA: return createISA();
      case CoreDslPackage.INSTRUCTION_SET: return createInstructionSet();
      case CoreDslPackage.CORE_DEF: return createCoreDef();
      case CoreDslPackage.RANGE_SPEC: return createRangeSpec();
      case CoreDslPackage.INSTRUCTION: return createInstruction();
      case CoreDslPackage.ENCODING: return createEncoding();
      case CoreDslPackage.FIELD: return createField();
      case CoreDslPackage.BIT_VALUE: return createBitValue();
      case CoreDslPackage.BIT_FIELD: return createBitField();
      case CoreDslPackage.OPERATION: return createOperation();
      case CoreDslPackage.STATEMENT: return createStatement();
      case CoreDslPackage.ASSIGNMENT: return createAssignment();
      case CoreDslPackage.CONDITIONAL_STMT: return createConditionalStmt();
      case CoreDslPackage.DIRECT_CODE: return createDirectCode();
      case CoreDslPackage.PROCEDURE: return createProcedure();
      case CoreDslPackage.CONSTANT: return createConstant();
      case CoreDslPackage.CONSTANT_DEF: return createConstantDef();
      case CoreDslPackage.CONSTANT_DEFAULT: return createConstantDefault();
      case CoreDslPackage.VARIABLE: return createVariable();
      case CoreDslPackage.INDEXED_VARIABLE: return createIndexedVariable();
      case CoreDslPackage.SCALAR_VARIABLE: return createScalarVariable();
      case CoreDslPackage.REGISTER_VARIABLE: return createRegisterVariable();
      case CoreDslPackage.ADDRESS_SPACE: return createAddressSpace();
      case CoreDslPackage.REGISTER_FILE: return createRegisterFile();
      case CoreDslPackage.REGISTER: return createRegister();
      case CoreDslPackage.REGISTER_ALIAS: return createRegisterAlias();
      case CoreDslPackage.SCALAR: return createScalar();
      case CoreDslPackage.NUMBER_LITERAL: return createNumberLiteral();
      case CoreDslPackage.EXPRESSION: return createExpression();
      case CoreDslPackage.RVALUE: return createRValue();
      case CoreDslPackage.VALUE_REF: return createValueRef();
      case CoreDslPackage.BIT_SIZE_SPEC: return createBitSizeSpec();
      case CoreDslPackage.INDEXED_ASSIGNMENT: return createIndexedAssignment();
      case CoreDslPackage.REGISTER_ASSIGNMENT: return createRegisterAssignment();
      case CoreDslPackage.SCALAR_ASSIGNMENT: return createScalarAssignment();
      case CoreDslPackage.BOOLEAN_EXPR: return createBooleanExpr();
      case CoreDslPackage.BIT_EXPR: return createBitExpr();
      case CoreDslPackage.COMPARISON_EXPR: return createComparisonExpr();
      case CoreDslPackage.SHIFT_EXPR: return createShiftExpr();
      case CoreDslPackage.ADDITION_EXPR: return createAdditionExpr();
      case CoreDslPackage.MULTIPLICATION_EXPR: return createMultiplicationExpr();
      case CoreDslPackage.UNITARY_EXPR: return createUnitaryExpr();
      case CoreDslPackage.TYPE_CONV: return createTypeConv();
      case CoreDslPackage.FUNCTION: return createFunction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CoreDslPackage.DATA_TYPE:
        return createDataTypeFromString(eDataType, initialValue);
      case CoreDslPackage.REG_ATTRIBUTE:
        return createRegAttributeFromString(eDataType, initialValue);
      case CoreDslPackage.CONST_ATTRIBUTE:
        return createConstAttributeFromString(eDataType, initialValue);
      case CoreDslPackage.INSTR_ATTRIBUTE:
        return createInstrAttributeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CoreDslPackage.DATA_TYPE:
        return convertDataTypeToString(eDataType, instanceValue);
      case CoreDslPackage.REG_ATTRIBUTE:
        return convertRegAttributeToString(eDataType, instanceValue);
      case CoreDslPackage.CONST_ATTRIBUTE:
        return convertConstAttributeToString(eDataType, instanceValue);
      case CoreDslPackage.INSTR_ATTRIBUTE:
        return convertInstrAttributeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DescriptionContent createDescriptionContent()
  {
    DescriptionContentImpl descriptionContent = new DescriptionContentImpl();
    return descriptionContent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ISA createISA()
  {
    ISAImpl isa = new ISAImpl();
    return isa;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InstructionSet createInstructionSet()
  {
    InstructionSetImpl instructionSet = new InstructionSetImpl();
    return instructionSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CoreDef createCoreDef()
  {
    CoreDefImpl coreDef = new CoreDefImpl();
    return coreDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RangeSpec createRangeSpec()
  {
    RangeSpecImpl rangeSpec = new RangeSpecImpl();
    return rangeSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Encoding createEncoding()
  {
    EncodingImpl encoding = new EncodingImpl();
    return encoding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BitValue createBitValue()
  {
    BitValueImpl bitValue = new BitValueImpl();
    return bitValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BitField createBitField()
  {
    BitFieldImpl bitField = new BitFieldImpl();
    return bitField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalStmt createConditionalStmt()
  {
    ConditionalStmtImpl conditionalStmt = new ConditionalStmtImpl();
    return conditionalStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DirectCode createDirectCode()
  {
    DirectCodeImpl directCode = new DirectCodeImpl();
    return directCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Procedure createProcedure()
  {
    ProcedureImpl procedure = new ProcedureImpl();
    return procedure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constant createConstant()
  {
    ConstantImpl constant = new ConstantImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantDef createConstantDef()
  {
    ConstantDefImpl constantDef = new ConstantDefImpl();
    return constantDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantDefault createConstantDefault()
  {
    ConstantDefaultImpl constantDefault = new ConstantDefaultImpl();
    return constantDefault;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexedVariable createIndexedVariable()
  {
    IndexedVariableImpl indexedVariable = new IndexedVariableImpl();
    return indexedVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScalarVariable createScalarVariable()
  {
    ScalarVariableImpl scalarVariable = new ScalarVariableImpl();
    return scalarVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegisterVariable createRegisterVariable()
  {
    RegisterVariableImpl registerVariable = new RegisterVariableImpl();
    return registerVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddressSpace createAddressSpace()
  {
    AddressSpaceImpl addressSpace = new AddressSpaceImpl();
    return addressSpace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegisterFile createRegisterFile()
  {
    RegisterFileImpl registerFile = new RegisterFileImpl();
    return registerFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Register createRegister()
  {
    RegisterImpl register = new RegisterImpl();
    return register;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegisterAlias createRegisterAlias()
  {
    RegisterAliasImpl registerAlias = new RegisterAliasImpl();
    return registerAlias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scalar createScalar()
  {
    ScalarImpl scalar = new ScalarImpl();
    return scalar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RValue createRValue()
  {
    RValueImpl rValue = new RValueImpl();
    return rValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueRef createValueRef()
  {
    ValueRefImpl valueRef = new ValueRefImpl();
    return valueRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BitSizeSpec createBitSizeSpec()
  {
    BitSizeSpecImpl bitSizeSpec = new BitSizeSpecImpl();
    return bitSizeSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexedAssignment createIndexedAssignment()
  {
    IndexedAssignmentImpl indexedAssignment = new IndexedAssignmentImpl();
    return indexedAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegisterAssignment createRegisterAssignment()
  {
    RegisterAssignmentImpl registerAssignment = new RegisterAssignmentImpl();
    return registerAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScalarAssignment createScalarAssignment()
  {
    ScalarAssignmentImpl scalarAssignment = new ScalarAssignmentImpl();
    return scalarAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanExpr createBooleanExpr()
  {
    BooleanExprImpl booleanExpr = new BooleanExprImpl();
    return booleanExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BitExpr createBitExpr()
  {
    BitExprImpl bitExpr = new BitExprImpl();
    return bitExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExpr createComparisonExpr()
  {
    ComparisonExprImpl comparisonExpr = new ComparisonExprImpl();
    return comparisonExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ShiftExpr createShiftExpr()
  {
    ShiftExprImpl shiftExpr = new ShiftExprImpl();
    return shiftExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdditionExpr createAdditionExpr()
  {
    AdditionExprImpl additionExpr = new AdditionExprImpl();
    return additionExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplicationExpr createMultiplicationExpr()
  {
    MultiplicationExprImpl multiplicationExpr = new MultiplicationExprImpl();
    return multiplicationExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitaryExpr createUnitaryExpr()
  {
    UnitaryExprImpl unitaryExpr = new UnitaryExprImpl();
    return unitaryExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeConv createTypeConv()
  {
    TypeConvImpl typeConv = new TypeConvImpl();
    return typeConv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType createDataTypeFromString(EDataType eDataType, String initialValue)
  {
    DataType result = DataType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegAttribute createRegAttributeFromString(EDataType eDataType, String initialValue)
  {
    RegAttribute result = RegAttribute.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRegAttributeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstAttribute createConstAttributeFromString(EDataType eDataType, String initialValue)
  {
    ConstAttribute result = ConstAttribute.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertConstAttributeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InstrAttribute createInstrAttributeFromString(EDataType eDataType, String initialValue)
  {
    InstrAttribute result = InstrAttribute.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertInstrAttributeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CoreDslPackage getCoreDslPackage()
  {
    return (CoreDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CoreDslPackage getPackage()
  {
    return CoreDslPackage.eINSTANCE;
  }

} //CoreDslFactoryImpl
