/**
 * generated by Xtext 2.22.0
 */
package com.minres.coredsl.coreDsl.impl;

import com.minres.coredsl.coreDsl.CoreDslPackage;
import com.minres.coredsl.coreDsl.Declaration;
import com.minres.coredsl.coreDsl.Expression;
import com.minres.coredsl.coreDsl.ForCondition;
import com.minres.coredsl.coreDsl.IterationStatement;
import com.minres.coredsl.coreDsl.Statement;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Iteration Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.IterationStatementImpl#getStartDecl <em>Start Decl</em>}</li>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.IterationStatementImpl#getStartExpr <em>Start Expr</em>}</li>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.IterationStatementImpl#getEndExpr <em>End Expr</em>}</li>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.IterationStatementImpl#getLoopExprs <em>Loop Exprs</em>}</li>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.IterationStatementImpl#getType <em>Type</em>}</li>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.IterationStatementImpl#getCond <em>Cond</em>}</li>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.IterationStatementImpl#getStmt <em>Stmt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IterationStatementImpl extends StatementImpl implements IterationStatement
{
  /**
   * The cached value of the '{@link #getStartDecl() <em>Start Decl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartDecl()
   * @generated
   * @ordered
   */
  protected Declaration startDecl;

  /**
   * The cached value of the '{@link #getStartExpr() <em>Start Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartExpr()
   * @generated
   * @ordered
   */
  protected Expression startExpr;

  /**
   * The cached value of the '{@link #getEndExpr() <em>End Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndExpr()
   * @generated
   * @ordered
   */
  protected Expression endExpr;

  /**
   * The cached value of the '{@link #getLoopExprs() <em>Loop Exprs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoopExprs()
   * @generated
   * @ordered
   */
  protected EList<Expression> loopExprs;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getCond() <em>Cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCond()
   * @generated
   * @ordered
   */
  protected Expression cond;

  /**
   * The cached value of the '{@link #getStmt() <em>Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStmt()
   * @generated
   * @ordered
   */
  protected Statement stmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IterationStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CoreDslPackage.Literals.ITERATION_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declaration getStartDecl()
  {
    return startDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartDecl(Declaration newStartDecl, NotificationChain msgs)
  {
    Declaration oldStartDecl = startDecl;
    startDecl = newStartDecl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__START_DECL, oldStartDecl, newStartDecl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartDecl(Declaration newStartDecl)
  {
    if (newStartDecl != startDecl)
    {
      NotificationChain msgs = null;
      if (startDecl != null)
        msgs = ((InternalEObject)startDecl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CoreDslPackage.ITERATION_STATEMENT__START_DECL, null, msgs);
      if (newStartDecl != null)
        msgs = ((InternalEObject)newStartDecl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CoreDslPackage.ITERATION_STATEMENT__START_DECL, null, msgs);
      msgs = basicSetStartDecl(newStartDecl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__START_DECL, newStartDecl, newStartDecl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getStartExpr()
  {
    return startExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartExpr(Expression newStartExpr, NotificationChain msgs)
  {
    Expression oldStartExpr = startExpr;
    startExpr = newStartExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__START_EXPR, oldStartExpr, newStartExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartExpr(Expression newStartExpr)
  {
    if (newStartExpr != startExpr)
    {
      NotificationChain msgs = null;
      if (startExpr != null)
        msgs = ((InternalEObject)startExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CoreDslPackage.ITERATION_STATEMENT__START_EXPR, null, msgs);
      if (newStartExpr != null)
        msgs = ((InternalEObject)newStartExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CoreDslPackage.ITERATION_STATEMENT__START_EXPR, null, msgs);
      msgs = basicSetStartExpr(newStartExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__START_EXPR, newStartExpr, newStartExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getEndExpr()
  {
    return endExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEndExpr(Expression newEndExpr, NotificationChain msgs)
  {
    Expression oldEndExpr = endExpr;
    endExpr = newEndExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__END_EXPR, oldEndExpr, newEndExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndExpr(Expression newEndExpr)
  {
    if (newEndExpr != endExpr)
    {
      NotificationChain msgs = null;
      if (endExpr != null)
        msgs = ((InternalEObject)endExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CoreDslPackage.ITERATION_STATEMENT__END_EXPR, null, msgs);
      if (newEndExpr != null)
        msgs = ((InternalEObject)newEndExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CoreDslPackage.ITERATION_STATEMENT__END_EXPR, null, msgs);
      msgs = basicSetEndExpr(newEndExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__END_EXPR, newEndExpr, newEndExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getLoopExprs()
  {
    if (loopExprs == null)
    {
      loopExprs = new EObjectContainmentEList<Expression>(Expression.class, this, CoreDslPackage.ITERATION_STATEMENT__LOOP_EXPRS);
    }
    return loopExprs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getCond()
  {
    return cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCond(Expression newCond, NotificationChain msgs)
  {
    Expression oldCond = cond;
    cond = newCond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__COND, oldCond, newCond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCond(Expression newCond)
  {
    if (newCond != cond)
    {
      NotificationChain msgs = null;
      if (cond != null)
        msgs = ((InternalEObject)cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CoreDslPackage.ITERATION_STATEMENT__COND, null, msgs);
      if (newCond != null)
        msgs = ((InternalEObject)newCond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CoreDslPackage.ITERATION_STATEMENT__COND, null, msgs);
      msgs = basicSetCond(newCond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__COND, newCond, newCond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement getStmt()
  {
    return stmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStmt(Statement newStmt, NotificationChain msgs)
  {
    Statement oldStmt = stmt;
    stmt = newStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__STMT, oldStmt, newStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStmt(Statement newStmt)
  {
    if (newStmt != stmt)
    {
      NotificationChain msgs = null;
      if (stmt != null)
        msgs = ((InternalEObject)stmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CoreDslPackage.ITERATION_STATEMENT__STMT, null, msgs);
      if (newStmt != null)
        msgs = ((InternalEObject)newStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CoreDslPackage.ITERATION_STATEMENT__STMT, null, msgs);
      msgs = basicSetStmt(newStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoreDslPackage.ITERATION_STATEMENT__STMT, newStmt, newStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CoreDslPackage.ITERATION_STATEMENT__START_DECL:
        return basicSetStartDecl(null, msgs);
      case CoreDslPackage.ITERATION_STATEMENT__START_EXPR:
        return basicSetStartExpr(null, msgs);
      case CoreDslPackage.ITERATION_STATEMENT__END_EXPR:
        return basicSetEndExpr(null, msgs);
      case CoreDslPackage.ITERATION_STATEMENT__LOOP_EXPRS:
        return ((InternalEList<?>)getLoopExprs()).basicRemove(otherEnd, msgs);
      case CoreDslPackage.ITERATION_STATEMENT__COND:
        return basicSetCond(null, msgs);
      case CoreDslPackage.ITERATION_STATEMENT__STMT:
        return basicSetStmt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CoreDslPackage.ITERATION_STATEMENT__START_DECL:
        return getStartDecl();
      case CoreDslPackage.ITERATION_STATEMENT__START_EXPR:
        return getStartExpr();
      case CoreDslPackage.ITERATION_STATEMENT__END_EXPR:
        return getEndExpr();
      case CoreDslPackage.ITERATION_STATEMENT__LOOP_EXPRS:
        return getLoopExprs();
      case CoreDslPackage.ITERATION_STATEMENT__TYPE:
        return getType();
      case CoreDslPackage.ITERATION_STATEMENT__COND:
        return getCond();
      case CoreDslPackage.ITERATION_STATEMENT__STMT:
        return getStmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CoreDslPackage.ITERATION_STATEMENT__START_DECL:
        setStartDecl((Declaration)newValue);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__START_EXPR:
        setStartExpr((Expression)newValue);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__END_EXPR:
        setEndExpr((Expression)newValue);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__LOOP_EXPRS:
        getLoopExprs().clear();
        getLoopExprs().addAll((Collection<? extends Expression>)newValue);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__TYPE:
        setType((String)newValue);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__COND:
        setCond((Expression)newValue);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__STMT:
        setStmt((Statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CoreDslPackage.ITERATION_STATEMENT__START_DECL:
        setStartDecl((Declaration)null);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__START_EXPR:
        setStartExpr((Expression)null);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__END_EXPR:
        setEndExpr((Expression)null);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__LOOP_EXPRS:
        getLoopExprs().clear();
        return;
      case CoreDslPackage.ITERATION_STATEMENT__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__COND:
        setCond((Expression)null);
        return;
      case CoreDslPackage.ITERATION_STATEMENT__STMT:
        setStmt((Statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CoreDslPackage.ITERATION_STATEMENT__START_DECL:
        return startDecl != null;
      case CoreDslPackage.ITERATION_STATEMENT__START_EXPR:
        return startExpr != null;
      case CoreDslPackage.ITERATION_STATEMENT__END_EXPR:
        return endExpr != null;
      case CoreDslPackage.ITERATION_STATEMENT__LOOP_EXPRS:
        return loopExprs != null && !loopExprs.isEmpty();
      case CoreDslPackage.ITERATION_STATEMENT__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case CoreDslPackage.ITERATION_STATEMENT__COND:
        return cond != null;
      case CoreDslPackage.ITERATION_STATEMENT__STMT:
        return stmt != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == ForCondition.class)
    {
      switch (derivedFeatureID)
      {
        case CoreDslPackage.ITERATION_STATEMENT__START_DECL: return CoreDslPackage.FOR_CONDITION__START_DECL;
        case CoreDslPackage.ITERATION_STATEMENT__START_EXPR: return CoreDslPackage.FOR_CONDITION__START_EXPR;
        case CoreDslPackage.ITERATION_STATEMENT__END_EXPR: return CoreDslPackage.FOR_CONDITION__END_EXPR;
        case CoreDslPackage.ITERATION_STATEMENT__LOOP_EXPRS: return CoreDslPackage.FOR_CONDITION__LOOP_EXPRS;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == ForCondition.class)
    {
      switch (baseFeatureID)
      {
        case CoreDslPackage.FOR_CONDITION__START_DECL: return CoreDslPackage.ITERATION_STATEMENT__START_DECL;
        case CoreDslPackage.FOR_CONDITION__START_EXPR: return CoreDslPackage.ITERATION_STATEMENT__START_EXPR;
        case CoreDslPackage.FOR_CONDITION__END_EXPR: return CoreDslPackage.ITERATION_STATEMENT__END_EXPR;
        case CoreDslPackage.FOR_CONDITION__LOOP_EXPRS: return CoreDslPackage.ITERATION_STATEMENT__LOOP_EXPRS;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //IterationStatementImpl
