/**
 * generated by Xtext 2.22.0
 */
package com.minres.coredsl.coreDsl.impl;

import com.minres.coredsl.coreDsl.AddressSpace;
import com.minres.coredsl.coreDsl.CoreDslPackage;
import com.minres.coredsl.coreDsl.ISA;
import com.minres.coredsl.coreDsl.Instruction;
import com.minres.coredsl.coreDsl.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ISA</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.ISAImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.ISAImpl#getSpaces <em>Spaces</em>}</li>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.ISAImpl#getRegs <em>Regs</em>}</li>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.ISAImpl#getInstr <em>Instr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ISAImpl extends MinimalEObjectImpl.Container implements ISA
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSpaces() <em>Spaces</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpaces()
   * @generated
   * @ordered
   */
  protected EList<AddressSpace> spaces;

  /**
   * The cached value of the '{@link #getRegs() <em>Regs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegs()
   * @generated
   * @ordered
   */
  protected EList<Variable> regs;

  /**
   * The cached value of the '{@link #getInstr() <em>Instr</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstr()
   * @generated
   * @ordered
   */
  protected EList<Instruction> instr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ISAImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CoreDslPackage.Literals.ISA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoreDslPackage.ISA__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AddressSpace> getSpaces()
  {
    if (spaces == null)
    {
      spaces = new EObjectContainmentEList<AddressSpace>(AddressSpace.class, this, CoreDslPackage.ISA__SPACES);
    }
    return spaces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Variable> getRegs()
  {
    if (regs == null)
    {
      regs = new EObjectContainmentEList<Variable>(Variable.class, this, CoreDslPackage.ISA__REGS);
    }
    return regs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Instruction> getInstr()
  {
    if (instr == null)
    {
      instr = new EObjectContainmentEList<Instruction>(Instruction.class, this, CoreDslPackage.ISA__INSTR);
    }
    return instr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CoreDslPackage.ISA__SPACES:
        return ((InternalEList<?>)getSpaces()).basicRemove(otherEnd, msgs);
      case CoreDslPackage.ISA__REGS:
        return ((InternalEList<?>)getRegs()).basicRemove(otherEnd, msgs);
      case CoreDslPackage.ISA__INSTR:
        return ((InternalEList<?>)getInstr()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CoreDslPackage.ISA__NAME:
        return getName();
      case CoreDslPackage.ISA__SPACES:
        return getSpaces();
      case CoreDslPackage.ISA__REGS:
        return getRegs();
      case CoreDslPackage.ISA__INSTR:
        return getInstr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CoreDslPackage.ISA__NAME:
        setName((String)newValue);
        return;
      case CoreDslPackage.ISA__SPACES:
        getSpaces().clear();
        getSpaces().addAll((Collection<? extends AddressSpace>)newValue);
        return;
      case CoreDslPackage.ISA__REGS:
        getRegs().clear();
        getRegs().addAll((Collection<? extends Variable>)newValue);
        return;
      case CoreDslPackage.ISA__INSTR:
        getInstr().clear();
        getInstr().addAll((Collection<? extends Instruction>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CoreDslPackage.ISA__NAME:
        setName(NAME_EDEFAULT);
        return;
      case CoreDslPackage.ISA__SPACES:
        getSpaces().clear();
        return;
      case CoreDslPackage.ISA__REGS:
        getRegs().clear();
        return;
      case CoreDslPackage.ISA__INSTR:
        getInstr().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CoreDslPackage.ISA__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case CoreDslPackage.ISA__SPACES:
        return spaces != null && !spaces.isEmpty();
      case CoreDslPackage.ISA__REGS:
        return regs != null && !regs.isEmpty();
      case CoreDslPackage.ISA__INSTR:
        return instr != null && !instr.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ISAImpl
