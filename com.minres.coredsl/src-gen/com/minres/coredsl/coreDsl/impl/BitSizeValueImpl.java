/**
 * generated by Xtext 2.22.0
 */
package com.minres.coredsl.coreDsl.impl;

import com.minres.coredsl.coreDsl.BitSizeValue;
import com.minres.coredsl.coreDsl.Constant;
import com.minres.coredsl.coreDsl.CoreDslPackage;

import java.math.BigInteger;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Bit Size Value</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.BitSizeValueImpl#getVal <em>Val</em>}</li>
 *   <li>{@link com.minres.coredsl.coreDsl.impl.BitSizeValueImpl#getConstant <em>Constant</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BitSizeValueImpl extends MinimalEObjectImpl.Container implements BitSizeValue
{
  /**
   * The cached value of the '{@link #getVal() <em>Val</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVal()
   * @generated
   * @ordered
   */
  protected EList<BigInteger> val;

  /**
   * The cached value of the '{@link #getConstant() <em>Constant</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected EList<Constant> constant;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BitSizeValueImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CoreDslPackage.Literals.BIT_SIZE_VALUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BigInteger> getVal()
  {
    if (val == null)
    {
      val = new EDataTypeEList<BigInteger>(BigInteger.class, this, CoreDslPackage.BIT_SIZE_VALUE__VAL);
    }
    return val;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Constant> getConstant()
  {
    if (constant == null)
    {
      constant = new EObjectResolvingEList<Constant>(Constant.class, this, CoreDslPackage.BIT_SIZE_VALUE__CONSTANT);
    }
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CoreDslPackage.BIT_SIZE_VALUE__VAL:
        return getVal();
      case CoreDslPackage.BIT_SIZE_VALUE__CONSTANT:
        return getConstant();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CoreDslPackage.BIT_SIZE_VALUE__VAL:
        getVal().clear();
        getVal().addAll((Collection<? extends BigInteger>)newValue);
        return;
      case CoreDslPackage.BIT_SIZE_VALUE__CONSTANT:
        getConstant().clear();
        getConstant().addAll((Collection<? extends Constant>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CoreDslPackage.BIT_SIZE_VALUE__VAL:
        getVal().clear();
        return;
      case CoreDslPackage.BIT_SIZE_VALUE__CONSTANT:
        getConstant().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CoreDslPackage.BIT_SIZE_VALUE__VAL:
        return val != null && !val.isEmpty();
      case CoreDslPackage.BIT_SIZE_VALUE__CONSTANT:
        return constant != null && !constant.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (val: ");
    result.append(val);
    result.append(')');
    return result.toString();
  }

} //BitSizeValueImpl
