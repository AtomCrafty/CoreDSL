/**
 * generated by Xtext 2.22.0
 */
package com.minres.coredsl.coreDsl.util;

import com.minres.coredsl.coreDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.minres.coredsl.coreDsl.CoreDslPackage
 * @generated
 */
public class CoreDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CoreDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CoreDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = CoreDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CoreDslSwitch<Adapter> modelSwitch =
    new CoreDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseDescriptionContent(DescriptionContent object)
      {
        return createDescriptionContentAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseISA(ISA object)
      {
        return createISAAdapter();
      }
      @Override
      public Adapter caseInstructionSet(InstructionSet object)
      {
        return createInstructionSetAdapter();
      }
      @Override
      public Adapter caseCoreDef(CoreDef object)
      {
        return createCoreDefAdapter();
      }
      @Override
      public Adapter caseRangeSpec(RangeSpec object)
      {
        return createRangeSpecAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter caseEncoding(Encoding object)
      {
        return createEncodingAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseBitValue(BitValue object)
      {
        return createBitValueAdapter();
      }
      @Override
      public Adapter caseBitField(BitField object)
      {
        return createBitFieldAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseConditionalStmt(ConditionalStmt object)
      {
        return createConditionalStmtAdapter();
      }
      @Override
      public Adapter caseDirectCode(DirectCode object)
      {
        return createDirectCodeAdapter();
      }
      @Override
      public Adapter caseProcedure(Procedure object)
      {
        return createProcedureAdapter();
      }
      @Override
      public Adapter caseConstant(Constant object)
      {
        return createConstantAdapter();
      }
      @Override
      public Adapter caseConstantDef(ConstantDef object)
      {
        return createConstantDefAdapter();
      }
      @Override
      public Adapter caseConstantDefault(ConstantDefault object)
      {
        return createConstantDefaultAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseIndexedVariable(IndexedVariable object)
      {
        return createIndexedVariableAdapter();
      }
      @Override
      public Adapter caseScalarVariable(ScalarVariable object)
      {
        return createScalarVariableAdapter();
      }
      @Override
      public Adapter caseRegisterVariable(RegisterVariable object)
      {
        return createRegisterVariableAdapter();
      }
      @Override
      public Adapter caseAddressSpace(AddressSpace object)
      {
        return createAddressSpaceAdapter();
      }
      @Override
      public Adapter caseRegisterFile(RegisterFile object)
      {
        return createRegisterFileAdapter();
      }
      @Override
      public Adapter caseRegister(Register object)
      {
        return createRegisterAdapter();
      }
      @Override
      public Adapter caseRegisterAlias(RegisterAlias object)
      {
        return createRegisterAliasAdapter();
      }
      @Override
      public Adapter caseScalar(Scalar object)
      {
        return createScalarAdapter();
      }
      @Override
      public Adapter caseNumberLiteral(NumberLiteral object)
      {
        return createNumberLiteralAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseRValue(RValue object)
      {
        return createRValueAdapter();
      }
      @Override
      public Adapter caseValueRef(ValueRef object)
      {
        return createValueRefAdapter();
      }
      @Override
      public Adapter caseBitSizeSpec(BitSizeSpec object)
      {
        return createBitSizeSpecAdapter();
      }
      @Override
      public Adapter caseIndexedAssignment(IndexedAssignment object)
      {
        return createIndexedAssignmentAdapter();
      }
      @Override
      public Adapter caseRegisterAssignment(RegisterAssignment object)
      {
        return createRegisterAssignmentAdapter();
      }
      @Override
      public Adapter caseScalarAssignment(ScalarAssignment object)
      {
        return createScalarAssignmentAdapter();
      }
      @Override
      public Adapter caseBooleanExpr(BooleanExpr object)
      {
        return createBooleanExprAdapter();
      }
      @Override
      public Adapter caseBitExpr(BitExpr object)
      {
        return createBitExprAdapter();
      }
      @Override
      public Adapter caseComparisonExpr(ComparisonExpr object)
      {
        return createComparisonExprAdapter();
      }
      @Override
      public Adapter caseShiftExpr(ShiftExpr object)
      {
        return createShiftExprAdapter();
      }
      @Override
      public Adapter caseAdditionExpr(AdditionExpr object)
      {
        return createAdditionExprAdapter();
      }
      @Override
      public Adapter caseMultiplicationExpr(MultiplicationExpr object)
      {
        return createMultiplicationExprAdapter();
      }
      @Override
      public Adapter caseUnitaryExpr(UnitaryExpr object)
      {
        return createUnitaryExprAdapter();
      }
      @Override
      public Adapter caseTypeConv(TypeConv object)
      {
        return createTypeConvAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.DescriptionContent <em>Description Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.DescriptionContent
   * @generated
   */
  public Adapter createDescriptionContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ISA <em>ISA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ISA
   * @generated
   */
  public Adapter createISAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.InstructionSet <em>Instruction Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.InstructionSet
   * @generated
   */
  public Adapter createInstructionSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.CoreDef <em>Core Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.CoreDef
   * @generated
   */
  public Adapter createCoreDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.RangeSpec <em>Range Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.RangeSpec
   * @generated
   */
  public Adapter createRangeSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Encoding <em>Encoding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Encoding
   * @generated
   */
  public Adapter createEncodingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BitValue <em>Bit Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BitValue
   * @generated
   */
  public Adapter createBitValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BitField <em>Bit Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BitField
   * @generated
   */
  public Adapter createBitFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ConditionalStmt <em>Conditional Stmt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ConditionalStmt
   * @generated
   */
  public Adapter createConditionalStmtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.DirectCode <em>Direct Code</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.DirectCode
   * @generated
   */
  public Adapter createDirectCodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Procedure <em>Procedure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Procedure
   * @generated
   */
  public Adapter createProcedureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Constant <em>Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Constant
   * @generated
   */
  public Adapter createConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ConstantDef <em>Constant Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ConstantDef
   * @generated
   */
  public Adapter createConstantDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ConstantDefault <em>Constant Default</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ConstantDefault
   * @generated
   */
  public Adapter createConstantDefaultAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.IndexedVariable <em>Indexed Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.IndexedVariable
   * @generated
   */
  public Adapter createIndexedVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ScalarVariable <em>Scalar Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ScalarVariable
   * @generated
   */
  public Adapter createScalarVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.RegisterVariable <em>Register Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.RegisterVariable
   * @generated
   */
  public Adapter createRegisterVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.AddressSpace <em>Address Space</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.AddressSpace
   * @generated
   */
  public Adapter createAddressSpaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.RegisterFile <em>Register File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.RegisterFile
   * @generated
   */
  public Adapter createRegisterFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Register <em>Register</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Register
   * @generated
   */
  public Adapter createRegisterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.RegisterAlias <em>Register Alias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.RegisterAlias
   * @generated
   */
  public Adapter createRegisterAliasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Scalar <em>Scalar</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Scalar
   * @generated
   */
  public Adapter createScalarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.NumberLiteral <em>Number Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.NumberLiteral
   * @generated
   */
  public Adapter createNumberLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.RValue <em>RValue</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.RValue
   * @generated
   */
  public Adapter createRValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ValueRef <em>Value Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ValueRef
   * @generated
   */
  public Adapter createValueRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BitSizeSpec <em>Bit Size Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BitSizeSpec
   * @generated
   */
  public Adapter createBitSizeSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.IndexedAssignment <em>Indexed Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.IndexedAssignment
   * @generated
   */
  public Adapter createIndexedAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.RegisterAssignment <em>Register Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.RegisterAssignment
   * @generated
   */
  public Adapter createRegisterAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ScalarAssignment <em>Scalar Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ScalarAssignment
   * @generated
   */
  public Adapter createScalarAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BooleanExpr <em>Boolean Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BooleanExpr
   * @generated
   */
  public Adapter createBooleanExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BitExpr <em>Bit Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BitExpr
   * @generated
   */
  public Adapter createBitExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ComparisonExpr <em>Comparison Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ComparisonExpr
   * @generated
   */
  public Adapter createComparisonExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ShiftExpr <em>Shift Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ShiftExpr
   * @generated
   */
  public Adapter createShiftExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.AdditionExpr <em>Addition Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.AdditionExpr
   * @generated
   */
  public Adapter createAdditionExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.MultiplicationExpr <em>Multiplication Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.MultiplicationExpr
   * @generated
   */
  public Adapter createMultiplicationExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.UnitaryExpr <em>Unitary Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.UnitaryExpr
   * @generated
   */
  public Adapter createUnitaryExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.TypeConv <em>Type Conv</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.TypeConv
   * @generated
   */
  public Adapter createTypeConvAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //CoreDslAdapterFactory
