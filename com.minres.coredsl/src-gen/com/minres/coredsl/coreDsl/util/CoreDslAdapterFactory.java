/**
 * generated by Xtext 2.22.0
 */
package com.minres.coredsl.coreDsl.util;

import com.minres.coredsl.coreDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.minres.coredsl.coreDsl.CoreDslPackage
 * @generated
 */
public class CoreDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CoreDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CoreDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = CoreDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CoreDslSwitch<Adapter> modelSwitch =
    new CoreDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseDescriptionContent(DescriptionContent object)
      {
        return createDescriptionContentAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseISA(ISA object)
      {
        return createISAAdapter();
      }
      @Override
      public Adapter caseInstructionSet(InstructionSet object)
      {
        return createInstructionSetAdapter();
      }
      @Override
      public Adapter caseCoreDef(CoreDef object)
      {
        return createCoreDefAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter caseEncoding(Encoding object)
      {
        return createEncodingAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseBitValue(BitValue object)
      {
        return createBitValueAdapter();
      }
      @Override
      public Adapter caseBitField(BitField object)
      {
        return createBitFieldAdapter();
      }
      @Override
      public Adapter caseRangeSpec(RangeSpec object)
      {
        return createRangeSpecAdapter();
      }
      @Override
      public Adapter caseFunctionDefinition(FunctionDefinition object)
      {
        return createFunctionDefinitionAdapter();
      }
      @Override
      public Adapter caseParameterList(ParameterList object)
      {
        return createParameterListAdapter();
      }
      @Override
      public Adapter caseParameterDeclaration(ParameterDeclaration object)
      {
        return createParameterDeclarationAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseLabeledStatement(LabeledStatement object)
      {
        return createLabeledStatementAdapter();
      }
      @Override
      public Adapter caseCompoundStatement(CompoundStatement object)
      {
        return createCompoundStatementAdapter();
      }
      @Override
      public Adapter caseBlockItem(BlockItem object)
      {
        return createBlockItemAdapter();
      }
      @Override
      public Adapter caseExpressionStatement(ExpressionStatement object)
      {
        return createExpressionStatementAdapter();
      }
      @Override
      public Adapter caseSelectionStatement(SelectionStatement object)
      {
        return createSelectionStatementAdapter();
      }
      @Override
      public Adapter caseIfStatement(IfStatement object)
      {
        return createIfStatementAdapter();
      }
      @Override
      public Adapter caseSwitchStatement(SwitchStatement object)
      {
        return createSwitchStatementAdapter();
      }
      @Override
      public Adapter caseIterationStatement(IterationStatement object)
      {
        return createIterationStatementAdapter();
      }
      @Override
      public Adapter caseForCondition(ForCondition object)
      {
        return createForConditionAdapter();
      }
      @Override
      public Adapter caseJumpStatement(JumpStatement object)
      {
        return createJumpStatementAdapter();
      }
      @Override
      public Adapter caseDeclaration(Declaration object)
      {
        return createDeclarationAdapter();
      }
      @Override
      public Adapter caseTypeOrVarDeclaration(TypeOrVarDeclaration object)
      {
        return createTypeOrVarDeclarationAdapter();
      }
      @Override
      public Adapter caseTypedefDeclaration(TypedefDeclaration object)
      {
        return createTypedefDeclarationAdapter();
      }
      @Override
      public Adapter caseDeclarationSpecifier(DeclarationSpecifier object)
      {
        return createDeclarationSpecifierAdapter();
      }
      @Override
      public Adapter caseAttributeList(AttributeList object)
      {
        return createAttributeListAdapter();
      }
      @Override
      public Adapter caseTypeSpecifier(TypeSpecifier object)
      {
        return createTypeSpecifierAdapter();
      }
      @Override
      public Adapter caseDataTypeSpecifier(DataTypeSpecifier object)
      {
        return createDataTypeSpecifierAdapter();
      }
      @Override
      public Adapter caseTypedefRef(TypedefRef object)
      {
        return createTypedefRefAdapter();
      }
      @Override
      public Adapter casePodSpecifier(PodSpecifier object)
      {
        return createPodSpecifierAdapter();
      }
      @Override
      public Adapter caseBitSizeSpecifier(BitSizeSpecifier object)
      {
        return createBitSizeSpecifierAdapter();
      }
      @Override
      public Adapter caseBitSizeValue(BitSizeValue object)
      {
        return createBitSizeValueAdapter();
      }
      @Override
      public Adapter caseEnumSpecifier(EnumSpecifier object)
      {
        return createEnumSpecifierAdapter();
      }
      @Override
      public Adapter caseEnumeratorList(EnumeratorList object)
      {
        return createEnumeratorListAdapter();
      }
      @Override
      public Adapter caseEnumerator(Enumerator object)
      {
        return createEnumeratorAdapter();
      }
      @Override
      public Adapter caseStructOrUnionSpecifier(StructOrUnionSpecifier object)
      {
        return createStructOrUnionSpecifierAdapter();
      }
      @Override
      public Adapter caseStructDeclaration(StructDeclaration object)
      {
        return createStructDeclarationAdapter();
      }
      @Override
      public Adapter caseStructDeclarationSpecifier(StructDeclarationSpecifier object)
      {
        return createStructDeclarationSpecifierAdapter();
      }
      @Override
      public Adapter caseInitDeclarator(InitDeclarator object)
      {
        return createInitDeclaratorAdapter();
      }
      @Override
      public Adapter caseDirectDeclarator(DirectDeclarator object)
      {
        return createDirectDeclaratorAdapter();
      }
      @Override
      public Adapter caseInitializerList(InitializerList object)
      {
        return createInitializerListAdapter();
      }
      @Override
      public Adapter caseInitializer(Initializer object)
      {
        return createInitializerAdapter();
      }
      @Override
      public Adapter caseDesignatedInitializer(DesignatedInitializer object)
      {
        return createDesignatedInitializerAdapter();
      }
      @Override
      public Adapter caseDesignator(Designator object)
      {
        return createDesignatorAdapter();
      }
      @Override
      public Adapter caseAbstractDeclarator(AbstractDeclarator object)
      {
        return createAbstractDeclaratorAdapter();
      }
      @Override
      public Adapter caseDirectAbstractDeclarator(DirectAbstractDeclarator object)
      {
        return createDirectAbstractDeclaratorAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseCastExpression(CastExpression object)
      {
        return createCastExpressionAdapter();
      }
      @Override
      public Adapter casePrefixExpression(PrefixExpression object)
      {
        return createPrefixExpressionAdapter();
      }
      @Override
      public Adapter caseUnaryOperator(UnaryOperator object)
      {
        return createUnaryOperatorAdapter();
      }
      @Override
      public Adapter casePostfixExpression(PostfixExpression object)
      {
        return createPostfixExpressionAdapter();
      }
      @Override
      public Adapter casePostfixOperator(PostfixOperator object)
      {
        return createPostfixOperatorAdapter();
      }
      @Override
      public Adapter casePrimaryExpression(PrimaryExpression object)
      {
        return createPrimaryExpressionAdapter();
      }
      @Override
      public Adapter caseVariableRef(VariableRef object)
      {
        return createVariableRefAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseEncodingPrefix(EncodingPrefix object)
      {
        return createEncodingPrefixAdapter();
      }
      @Override
      public Adapter caseConstant(Constant object)
      {
        return createConstantAdapter();
      }
      @Override
      public Adapter caseIntegerConstant(IntegerConstant object)
      {
        return createIntegerConstantAdapter();
      }
      @Override
      public Adapter caseFloatingConstant(FloatingConstant object)
      {
        return createFloatingConstantAdapter();
      }
      @Override
      public Adapter caseBoolConstant(BoolConstant object)
      {
        return createBoolConstantAdapter();
      }
      @Override
      public Adapter caseIntegerSuffix(IntegerSuffix object)
      {
        return createIntegerSuffixAdapter();
      }
      @Override
      public Adapter caseUnsignedSuffix(UnsignedSuffix object)
      {
        return createUnsignedSuffixAdapter();
      }
      @Override
      public Adapter caseLongSuffix(LongSuffix object)
      {
        return createLongSuffixAdapter();
      }
      @Override
      public Adapter caseLongLongSuffix(LongLongSuffix object)
      {
        return createLongLongSuffixAdapter();
      }
      @Override
      public Adapter caseFloatingSuffix(FloatingSuffix object)
      {
        return createFloatingSuffixAdapter();
      }
      @Override
      public Adapter caseCharacterConstant(CharacterConstant object)
      {
        return createCharacterConstantAdapter();
      }
      @Override
      public Adapter caseAssignmentExpression(AssignmentExpression object)
      {
        return createAssignmentExpressionAdapter();
      }
      @Override
      public Adapter caseConditionalExpression(ConditionalExpression object)
      {
        return createConditionalExpressionAdapter();
      }
      @Override
      public Adapter caseInfixExpression(InfixExpression object)
      {
        return createInfixExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.DescriptionContent <em>Description Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.DescriptionContent
   * @generated
   */
  public Adapter createDescriptionContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ISA <em>ISA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ISA
   * @generated
   */
  public Adapter createISAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.InstructionSet <em>Instruction Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.InstructionSet
   * @generated
   */
  public Adapter createInstructionSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.CoreDef <em>Core Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.CoreDef
   * @generated
   */
  public Adapter createCoreDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Encoding <em>Encoding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Encoding
   * @generated
   */
  public Adapter createEncodingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BitValue <em>Bit Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BitValue
   * @generated
   */
  public Adapter createBitValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BitField <em>Bit Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BitField
   * @generated
   */
  public Adapter createBitFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.RangeSpec <em>Range Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.RangeSpec
   * @generated
   */
  public Adapter createRangeSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.FunctionDefinition <em>Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.FunctionDefinition
   * @generated
   */
  public Adapter createFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ParameterList <em>Parameter List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ParameterList
   * @generated
   */
  public Adapter createParameterListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ParameterDeclaration <em>Parameter Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ParameterDeclaration
   * @generated
   */
  public Adapter createParameterDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.LabeledStatement <em>Labeled Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.LabeledStatement
   * @generated
   */
  public Adapter createLabeledStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.CompoundStatement <em>Compound Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.CompoundStatement
   * @generated
   */
  public Adapter createCompoundStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BlockItem <em>Block Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BlockItem
   * @generated
   */
  public Adapter createBlockItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ExpressionStatement <em>Expression Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ExpressionStatement
   * @generated
   */
  public Adapter createExpressionStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.SelectionStatement <em>Selection Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.SelectionStatement
   * @generated
   */
  public Adapter createSelectionStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.IfStatement <em>If Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.IfStatement
   * @generated
   */
  public Adapter createIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.SwitchStatement <em>Switch Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.SwitchStatement
   * @generated
   */
  public Adapter createSwitchStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.IterationStatement <em>Iteration Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.IterationStatement
   * @generated
   */
  public Adapter createIterationStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ForCondition <em>For Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ForCondition
   * @generated
   */
  public Adapter createForConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.JumpStatement <em>Jump Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.JumpStatement
   * @generated
   */
  public Adapter createJumpStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Declaration <em>Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Declaration
   * @generated
   */
  public Adapter createDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.TypeOrVarDeclaration <em>Type Or Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.TypeOrVarDeclaration
   * @generated
   */
  public Adapter createTypeOrVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.TypedefDeclaration <em>Typedef Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.TypedefDeclaration
   * @generated
   */
  public Adapter createTypedefDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.DeclarationSpecifier <em>Declaration Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.DeclarationSpecifier
   * @generated
   */
  public Adapter createDeclarationSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.AttributeList <em>Attribute List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.AttributeList
   * @generated
   */
  public Adapter createAttributeListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.TypeSpecifier <em>Type Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.TypeSpecifier
   * @generated
   */
  public Adapter createTypeSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.DataTypeSpecifier <em>Data Type Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.DataTypeSpecifier
   * @generated
   */
  public Adapter createDataTypeSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.TypedefRef <em>Typedef Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.TypedefRef
   * @generated
   */
  public Adapter createTypedefRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.PodSpecifier <em>Pod Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.PodSpecifier
   * @generated
   */
  public Adapter createPodSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BitSizeSpecifier <em>Bit Size Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BitSizeSpecifier
   * @generated
   */
  public Adapter createBitSizeSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BitSizeValue <em>Bit Size Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BitSizeValue
   * @generated
   */
  public Adapter createBitSizeValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.EnumSpecifier <em>Enum Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.EnumSpecifier
   * @generated
   */
  public Adapter createEnumSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.EnumeratorList <em>Enumerator List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.EnumeratorList
   * @generated
   */
  public Adapter createEnumeratorListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Enumerator <em>Enumerator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Enumerator
   * @generated
   */
  public Adapter createEnumeratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.StructOrUnionSpecifier <em>Struct Or Union Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.StructOrUnionSpecifier
   * @generated
   */
  public Adapter createStructOrUnionSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.StructDeclaration <em>Struct Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.StructDeclaration
   * @generated
   */
  public Adapter createStructDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.StructDeclarationSpecifier <em>Struct Declaration Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.StructDeclarationSpecifier
   * @generated
   */
  public Adapter createStructDeclarationSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.InitDeclarator <em>Init Declarator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.InitDeclarator
   * @generated
   */
  public Adapter createInitDeclaratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.DirectDeclarator <em>Direct Declarator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.DirectDeclarator
   * @generated
   */
  public Adapter createDirectDeclaratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.InitializerList <em>Initializer List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.InitializerList
   * @generated
   */
  public Adapter createInitializerListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Initializer <em>Initializer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Initializer
   * @generated
   */
  public Adapter createInitializerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.DesignatedInitializer <em>Designated Initializer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.DesignatedInitializer
   * @generated
   */
  public Adapter createDesignatedInitializerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Designator <em>Designator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Designator
   * @generated
   */
  public Adapter createDesignatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.AbstractDeclarator <em>Abstract Declarator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.AbstractDeclarator
   * @generated
   */
  public Adapter createAbstractDeclaratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.DirectAbstractDeclarator <em>Direct Abstract Declarator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.DirectAbstractDeclarator
   * @generated
   */
  public Adapter createDirectAbstractDeclaratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.CastExpression <em>Cast Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.CastExpression
   * @generated
   */
  public Adapter createCastExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.PrefixExpression <em>Prefix Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.PrefixExpression
   * @generated
   */
  public Adapter createPrefixExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.UnaryOperator <em>Unary Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.UnaryOperator
   * @generated
   */
  public Adapter createUnaryOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.PostfixExpression <em>Postfix Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.PostfixExpression
   * @generated
   */
  public Adapter createPostfixExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.PostfixOperator <em>Postfix Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.PostfixOperator
   * @generated
   */
  public Adapter createPostfixOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.PrimaryExpression <em>Primary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.PrimaryExpression
   * @generated
   */
  public Adapter createPrimaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.VariableRef <em>Variable Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.VariableRef
   * @generated
   */
  public Adapter createVariableRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.EncodingPrefix <em>Encoding Prefix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.EncodingPrefix
   * @generated
   */
  public Adapter createEncodingPrefixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.Constant <em>Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.Constant
   * @generated
   */
  public Adapter createConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.IntegerConstant <em>Integer Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.IntegerConstant
   * @generated
   */
  public Adapter createIntegerConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.FloatingConstant <em>Floating Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.FloatingConstant
   * @generated
   */
  public Adapter createFloatingConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.BoolConstant <em>Bool Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.BoolConstant
   * @generated
   */
  public Adapter createBoolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.IntegerSuffix <em>Integer Suffix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.IntegerSuffix
   * @generated
   */
  public Adapter createIntegerSuffixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.UnsignedSuffix <em>Unsigned Suffix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.UnsignedSuffix
   * @generated
   */
  public Adapter createUnsignedSuffixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.LongSuffix <em>Long Suffix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.LongSuffix
   * @generated
   */
  public Adapter createLongSuffixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.LongLongSuffix <em>Long Long Suffix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.LongLongSuffix
   * @generated
   */
  public Adapter createLongLongSuffixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.FloatingSuffix <em>Floating Suffix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.FloatingSuffix
   * @generated
   */
  public Adapter createFloatingSuffixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.CharacterConstant <em>Character Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.CharacterConstant
   * @generated
   */
  public Adapter createCharacterConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.AssignmentExpression <em>Assignment Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.AssignmentExpression
   * @generated
   */
  public Adapter createAssignmentExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.ConditionalExpression <em>Conditional Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.ConditionalExpression
   * @generated
   */
  public Adapter createConditionalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.minres.coredsl.coreDsl.InfixExpression <em>Infix Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.minres.coredsl.coreDsl.InfixExpression
   * @generated
   */
  public Adapter createInfixExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //CoreDslAdapterFactory
