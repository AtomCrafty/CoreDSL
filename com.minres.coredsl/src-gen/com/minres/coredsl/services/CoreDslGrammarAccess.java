/*
 * generated by Xtext 2.22.0
 */
package com.minres.coredsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CoreDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DescriptionContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DescriptionContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsISAParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		
		//DescriptionContent:
		//	imports+=Import*
		//	definitions+=ISA+;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import* definitions+=ISA+
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//definitions+=ISA+
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }
		
		//ISA
		public RuleCall getDefinitionsISAParserRuleCall_1_0() { return cDefinitionsISAParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class ISAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ISA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCoreDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ISA:
		//	InstructionSet | CoreDef;
		@Override public ParserRule getRule() { return rule; }
		
		//InstructionSet | CoreDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InstructionSet
		public RuleCall getInstructionSetParserRuleCall_0() { return cInstructionSetParserRuleCall_0; }
		
		//CoreDef
		public RuleCall getCoreDefParserRuleCall_1() { return cCoreDefParserRuleCall_1; }
	}
	public class InstructionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.InstructionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsructionSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeInstructionSetCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeInstructionSetIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeInstructionSetCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstantsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConstantsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConstantsConstantDeclParserRuleCall_4_2_0 = (RuleCall)cConstantsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cConstantsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cConstantsConstantDeclParserRuleCall_4_3_1_0 = (RuleCall)cConstantsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAddress_spacesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cSpacesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSpacesAddressSpaceParserRuleCall_5_2_0 = (RuleCall)cSpacesAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cSpacesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cSpacesAddressSpaceParserRuleCall_5_3_1_0 = (RuleCall)cSpacesAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRegistersKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRegsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final Alternatives cRegsAlternatives_6_2_0 = (Alternatives)cRegsAssignment_6_2.eContents().get(0);
		private final RuleCall cRegsRegisterParserRuleCall_6_2_0_0 = (RuleCall)cRegsAlternatives_6_2_0.eContents().get(0);
		private final RuleCall cRegsRegisterFileParserRuleCall_6_2_0_1 = (RuleCall)cRegsAlternatives_6_2_0.eContents().get(1);
		private final RuleCall cRegsRegisterAliasParserRuleCall_6_2_0_2 = (RuleCall)cRegsAlternatives_6_2_0.eContents().get(2);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cRegsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final Alternatives cRegsAlternatives_6_3_1_0 = (Alternatives)cRegsAssignment_6_3_1.eContents().get(0);
		private final RuleCall cRegsRegisterParserRuleCall_6_3_1_0_0 = (RuleCall)cRegsAlternatives_6_3_1_0.eContents().get(0);
		private final RuleCall cRegsRegisterFileParserRuleCall_6_3_1_0_1 = (RuleCall)cRegsAlternatives_6_3_1_0.eContents().get(1);
		private final RuleCall cRegsRegisterAliasParserRuleCall_6_3_1_0_2 = (RuleCall)cRegsAlternatives_6_3_1_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInstructionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cInstrAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cInstrInstructionParserRuleCall_7_2_0 = (RuleCall)cInstrAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//InstructionSet:
		//	'InsructionSet' name=ID ('extends' superType=[InstructionSet])? '{' ('constants' '{' constants+=ConstantDecl (','
		//	constants+=ConstantDecl)* '}')? ('address_spaces' '{' spaces+=AddressSpace (',' spaces+=AddressSpace)* '}')?
		//	('registers' '{' regs+=(Register | RegisterFile | RegisterAlias) (',' regs+=(Register | RegisterFile |
		//	RegisterAlias))* '}')? ('instructions' '{' instr+=Instruction+ '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'InsructionSet' name=ID ('extends' superType=[InstructionSet])? '{' ('constants' '{' constants+=ConstantDecl (','
		//constants+=ConstantDecl)* '}')? ('address_spaces' '{' spaces+=AddressSpace (',' spaces+=AddressSpace)* '}')?
		//('registers' '{' regs+=(Register | RegisterFile | RegisterAlias) (',' regs+=(Register | RegisterFile | RegisterAlias))*
		//'}')? ('instructions' '{' instr+=Instruction+ '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'InsructionSet'
		public Keyword getInsructionSetKeyword_0() { return cInsructionSetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[InstructionSet])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[InstructionSet]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[InstructionSet]
		public CrossReference getSuperTypeInstructionSetCrossReference_2_1_0() { return cSuperTypeInstructionSetCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeInstructionSetIDTerminalRuleCall_2_1_0_1() { return cSuperTypeInstructionSetIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('constants' '{' constants+=ConstantDecl (',' constants+=ConstantDecl)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'constants'
		public Keyword getConstantsKeyword_4_0() { return cConstantsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//constants+=ConstantDecl
		public Assignment getConstantsAssignment_4_2() { return cConstantsAssignment_4_2; }
		
		//ConstantDecl
		public RuleCall getConstantsConstantDeclParserRuleCall_4_2_0() { return cConstantsConstantDeclParserRuleCall_4_2_0; }
		
		//(',' constants+=ConstantDecl)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//','
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//constants+=ConstantDecl
		public Assignment getConstantsAssignment_4_3_1() { return cConstantsAssignment_4_3_1; }
		
		//ConstantDecl
		public RuleCall getConstantsConstantDeclParserRuleCall_4_3_1_0() { return cConstantsConstantDeclParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('address_spaces' '{' spaces+=AddressSpace (',' spaces+=AddressSpace)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'address_spaces'
		public Keyword getAddress_spacesKeyword_5_0() { return cAddress_spacesKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//spaces+=AddressSpace
		public Assignment getSpacesAssignment_5_2() { return cSpacesAssignment_5_2; }
		
		//AddressSpace
		public RuleCall getSpacesAddressSpaceParserRuleCall_5_2_0() { return cSpacesAddressSpaceParserRuleCall_5_2_0; }
		
		//(',' spaces+=AddressSpace)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//spaces+=AddressSpace
		public Assignment getSpacesAssignment_5_3_1() { return cSpacesAssignment_5_3_1; }
		
		//AddressSpace
		public RuleCall getSpacesAddressSpaceParserRuleCall_5_3_1_0() { return cSpacesAddressSpaceParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('registers' '{' regs+=(Register | RegisterFile | RegisterAlias) (',' regs+=(Register | RegisterFile | RegisterAlias))*
		//'}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'registers'
		public Keyword getRegistersKeyword_6_0() { return cRegistersKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//regs+=(Register | RegisterFile | RegisterAlias)
		public Assignment getRegsAssignment_6_2() { return cRegsAssignment_6_2; }
		
		//(Register | RegisterFile | RegisterAlias)
		public Alternatives getRegsAlternatives_6_2_0() { return cRegsAlternatives_6_2_0; }
		
		//Register
		public RuleCall getRegsRegisterParserRuleCall_6_2_0_0() { return cRegsRegisterParserRuleCall_6_2_0_0; }
		
		//RegisterFile
		public RuleCall getRegsRegisterFileParserRuleCall_6_2_0_1() { return cRegsRegisterFileParserRuleCall_6_2_0_1; }
		
		//RegisterAlias
		public RuleCall getRegsRegisterAliasParserRuleCall_6_2_0_2() { return cRegsRegisterAliasParserRuleCall_6_2_0_2; }
		
		//(',' regs+=(Register | RegisterFile | RegisterAlias))*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//','
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//regs+=(Register | RegisterFile | RegisterAlias)
		public Assignment getRegsAssignment_6_3_1() { return cRegsAssignment_6_3_1; }
		
		//(Register | RegisterFile | RegisterAlias)
		public Alternatives getRegsAlternatives_6_3_1_0() { return cRegsAlternatives_6_3_1_0; }
		
		//Register
		public RuleCall getRegsRegisterParserRuleCall_6_3_1_0_0() { return cRegsRegisterParserRuleCall_6_3_1_0_0; }
		
		//RegisterFile
		public RuleCall getRegsRegisterFileParserRuleCall_6_3_1_0_1() { return cRegsRegisterFileParserRuleCall_6_3_1_0_1; }
		
		//RegisterAlias
		public RuleCall getRegsRegisterAliasParserRuleCall_6_3_1_0_2() { return cRegsRegisterAliasParserRuleCall_6_3_1_0_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('instructions' '{' instr+=Instruction+ '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'instructions'
		public Keyword getInstructionsKeyword_7_0() { return cInstructionsKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//instr+=Instruction+
		public Assignment getInstrAssignment_7_2() { return cInstrAssignment_7_2; }
		
		//Instruction
		public RuleCall getInstrInstructionParserRuleCall_7_2_0() { return cInstrInstructionParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class CoreDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.CoreDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cProvidesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContributingTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cContributingTypeInstructionSetCrossReference_2_1_0 = (CrossReference)cContributingTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cContributingTypeInstructionSetIDTerminalRuleCall_2_1_0_1 = (RuleCall)cContributingTypeInstructionSetCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cContributingTypeAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cContributingTypeInstructionSetCrossReference_2_2_1_0 = (CrossReference)cContributingTypeAssignment_2_2_1.eContents().get(0);
		private final RuleCall cContributingTypeInstructionSetIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cContributingTypeInstructionSetCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTemplateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTemplateNameAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTemplateNameSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cTemplateNameAssignment_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConstantsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConstantsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cConstantsConstantDefParserRuleCall_5_2_0 = (RuleCall)cConstantsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAddress_spacesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cSpacesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cSpacesAddressSpaceParserRuleCall_6_2_0 = (RuleCall)cSpacesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cSpacesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cSpacesAddressSpaceParserRuleCall_6_3_1_0 = (RuleCall)cSpacesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRegistersKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cRegsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final Alternatives cRegsAlternatives_7_2_0 = (Alternatives)cRegsAssignment_7_2.eContents().get(0);
		private final RuleCall cRegsRegisterParserRuleCall_7_2_0_0 = (RuleCall)cRegsAlternatives_7_2_0.eContents().get(0);
		private final RuleCall cRegsRegisterFileParserRuleCall_7_2_0_1 = (RuleCall)cRegsAlternatives_7_2_0.eContents().get(1);
		private final RuleCall cRegsRegisterAliasParserRuleCall_7_2_0_2 = (RuleCall)cRegsAlternatives_7_2_0.eContents().get(2);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cRegsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final Alternatives cRegsAlternatives_7_3_1_0 = (Alternatives)cRegsAssignment_7_3_1.eContents().get(0);
		private final RuleCall cRegsRegisterParserRuleCall_7_3_1_0_0 = (RuleCall)cRegsAlternatives_7_3_1_0.eContents().get(0);
		private final RuleCall cRegsRegisterFileParserRuleCall_7_3_1_0_1 = (RuleCall)cRegsAlternatives_7_3_1_0.eContents().get(1);
		private final RuleCall cRegsRegisterAliasParserRuleCall_7_3_1_0_2 = (RuleCall)cRegsAlternatives_7_3_1_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cInstructionsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cInstrAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cInstrInstructionParserRuleCall_8_2_0 = (RuleCall)cInstrAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//CoreDef:
		//	'Core' name=ID ('provides' contributingType+=[InstructionSet] (',' contributingType+=[InstructionSet])*)? '{'
		//	('template' ':' templateName=STRING ';')? ('constants' '{' constants+=ConstantDef+ '}')? ('address_spaces' '{'
		//	spaces+=AddressSpace (',' spaces+=AddressSpace)* '}')? ('registers' '{' regs+=(Register | RegisterFile |
		//	RegisterAlias) (',' regs+=(Register | RegisterFile | RegisterAlias))* '}')? ('instructions' '{' instr+=Instruction+
		//	'}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Core' name=ID ('provides' contributingType+=[InstructionSet] (',' contributingType+=[InstructionSet])*)? '{'
		//('template' ':' templateName=STRING ';')? ('constants' '{' constants+=ConstantDef+ '}')? ('address_spaces' '{'
		//spaces+=AddressSpace (',' spaces+=AddressSpace)* '}')? ('registers' '{' regs+=(Register | RegisterFile | RegisterAlias)
		//(',' regs+=(Register | RegisterFile | RegisterAlias))* '}')? ('instructions' '{' instr+=Instruction+ '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'Core'
		public Keyword getCoreKeyword_0() { return cCoreKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('provides' contributingType+=[InstructionSet] (',' contributingType+=[InstructionSet])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'provides'
		public Keyword getProvidesKeyword_2_0() { return cProvidesKeyword_2_0; }
		
		//contributingType+=[InstructionSet]
		public Assignment getContributingTypeAssignment_2_1() { return cContributingTypeAssignment_2_1; }
		
		//[InstructionSet]
		public CrossReference getContributingTypeInstructionSetCrossReference_2_1_0() { return cContributingTypeInstructionSetCrossReference_2_1_0; }
		
		//ID
		public RuleCall getContributingTypeInstructionSetIDTerminalRuleCall_2_1_0_1() { return cContributingTypeInstructionSetIDTerminalRuleCall_2_1_0_1; }
		
		//(',' contributingType+=[InstructionSet])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//contributingType+=[InstructionSet]
		public Assignment getContributingTypeAssignment_2_2_1() { return cContributingTypeAssignment_2_2_1; }
		
		//[InstructionSet]
		public CrossReference getContributingTypeInstructionSetCrossReference_2_2_1_0() { return cContributingTypeInstructionSetCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getContributingTypeInstructionSetIDTerminalRuleCall_2_2_1_0_1() { return cContributingTypeInstructionSetIDTerminalRuleCall_2_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('template' ':' templateName=STRING ';')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'template'
		public Keyword getTemplateKeyword_4_0() { return cTemplateKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//templateName=STRING
		public Assignment getTemplateNameAssignment_4_2() { return cTemplateNameAssignment_4_2; }
		
		//STRING
		public RuleCall getTemplateNameSTRINGTerminalRuleCall_4_2_0() { return cTemplateNameSTRINGTerminalRuleCall_4_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }
		
		//('constants' '{' constants+=ConstantDef+ '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'constants'
		public Keyword getConstantsKeyword_5_0() { return cConstantsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//constants+=ConstantDef+
		public Assignment getConstantsAssignment_5_2() { return cConstantsAssignment_5_2; }
		
		//ConstantDef
		public RuleCall getConstantsConstantDefParserRuleCall_5_2_0() { return cConstantsConstantDefParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//('address_spaces' '{' spaces+=AddressSpace (',' spaces+=AddressSpace)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'address_spaces'
		public Keyword getAddress_spacesKeyword_6_0() { return cAddress_spacesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//spaces+=AddressSpace
		public Assignment getSpacesAssignment_6_2() { return cSpacesAssignment_6_2; }
		
		//AddressSpace
		public RuleCall getSpacesAddressSpaceParserRuleCall_6_2_0() { return cSpacesAddressSpaceParserRuleCall_6_2_0; }
		
		//(',' spaces+=AddressSpace)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//','
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//spaces+=AddressSpace
		public Assignment getSpacesAssignment_6_3_1() { return cSpacesAssignment_6_3_1; }
		
		//AddressSpace
		public RuleCall getSpacesAddressSpaceParserRuleCall_6_3_1_0() { return cSpacesAddressSpaceParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('registers' '{' regs+=(Register | RegisterFile | RegisterAlias) (',' regs+=(Register | RegisterFile | RegisterAlias))*
		//'}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'registers'
		public Keyword getRegistersKeyword_7_0() { return cRegistersKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//regs+=(Register | RegisterFile | RegisterAlias)
		public Assignment getRegsAssignment_7_2() { return cRegsAssignment_7_2; }
		
		//(Register | RegisterFile | RegisterAlias)
		public Alternatives getRegsAlternatives_7_2_0() { return cRegsAlternatives_7_2_0; }
		
		//Register
		public RuleCall getRegsRegisterParserRuleCall_7_2_0_0() { return cRegsRegisterParserRuleCall_7_2_0_0; }
		
		//RegisterFile
		public RuleCall getRegsRegisterFileParserRuleCall_7_2_0_1() { return cRegsRegisterFileParserRuleCall_7_2_0_1; }
		
		//RegisterAlias
		public RuleCall getRegsRegisterAliasParserRuleCall_7_2_0_2() { return cRegsRegisterAliasParserRuleCall_7_2_0_2; }
		
		//(',' regs+=(Register | RegisterFile | RegisterAlias))*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//','
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//regs+=(Register | RegisterFile | RegisterAlias)
		public Assignment getRegsAssignment_7_3_1() { return cRegsAssignment_7_3_1; }
		
		//(Register | RegisterFile | RegisterAlias)
		public Alternatives getRegsAlternatives_7_3_1_0() { return cRegsAlternatives_7_3_1_0; }
		
		//Register
		public RuleCall getRegsRegisterParserRuleCall_7_3_1_0_0() { return cRegsRegisterParserRuleCall_7_3_1_0_0; }
		
		//RegisterFile
		public RuleCall getRegsRegisterFileParserRuleCall_7_3_1_0_1() { return cRegsRegisterFileParserRuleCall_7_3_1_0_1; }
		
		//RegisterAlias
		public RuleCall getRegsRegisterAliasParserRuleCall_7_3_1_0_2() { return cRegsRegisterAliasParserRuleCall_7_3_1_0_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//('instructions' '{' instr+=Instruction+ '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'instructions'
		public Keyword getInstructionsKeyword_8_0() { return cInstructionsKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//instr+=Instruction+
		public Assignment getInstrAssignment_8_2() { return cInstrAssignment_8_2; }
		
		//Instruction
		public RuleCall getInstrInstructionParserRuleCall_8_2_0() { return cInstrInstructionParserRuleCall_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class RangeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.RangeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftNATURALTerminalRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightNATURALTerminalRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RangeSpec:
		//	'[' left=NATURAL ':' right=NATURAL ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' left=NATURAL ':' right=NATURAL ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//left=NATURAL
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//NATURAL
		public RuleCall getLeftNATURALTerminalRuleCall_1_0() { return cLeftNATURALTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//right=NATURAL
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//NATURAL
		public RuleCall getRightNATURALTerminalRuleCall_3_0() { return cRightNATURALTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Instruction");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cAttributesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cAttributesInstrAttributeEnumRuleCall_0_1_1_0 = (RuleCall)cAttributesAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cAttributesAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cAttributesInstrAttributeEnumRuleCall_0_1_2_1_0 = (RuleCall)cAttributesAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cEncodingKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cColonKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cEncodingAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final RuleCall cEncodingEncodingParserRuleCall_0_3_2_0 = (RuleCall)cEncodingAssignment_0_3_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3_3 = (Keyword)cGroup_0_3.eContents().get(3);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cArgs_disassKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cDisassAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDisassSTRINGTerminalRuleCall_1_0_2_0 = (RuleCall)cDisassAssignment_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperationOperationParserRuleCall_1_1_0 = (RuleCall)cOperationAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Instruction:
		//	name=ID ('(' attributes+=InstrAttribute (',' attributes+=InstrAttribute)* ')')? '{' ('encoding' ':' encoding=Encoding
		//	';') & ('args_disass' ':' disass=STRING ';')?
		//	operation=Operation? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' attributes+=InstrAttribute (',' attributes+=InstrAttribute)* ')')? '{' ('encoding' ':' encoding=Encoding
		//';') & ('args_disass' ':' disass=STRING ';')? operation=Operation? '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//name=ID ('(' attributes+=InstrAttribute (',' attributes+=InstrAttribute)* ')')? '{' ('encoding' ':' encoding=Encoding
		//';')
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//('(' attributes+=InstrAttribute (',' attributes+=InstrAttribute)* ')')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }
		
		//attributes+=InstrAttribute
		public Assignment getAttributesAssignment_0_1_1() { return cAttributesAssignment_0_1_1; }
		
		//InstrAttribute
		public RuleCall getAttributesInstrAttributeEnumRuleCall_0_1_1_0() { return cAttributesInstrAttributeEnumRuleCall_0_1_1_0; }
		
		//(',' attributes+=InstrAttribute)*
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//','
		public Keyword getCommaKeyword_0_1_2_0() { return cCommaKeyword_0_1_2_0; }
		
		//attributes+=InstrAttribute
		public Assignment getAttributesAssignment_0_1_2_1() { return cAttributesAssignment_0_1_2_1; }
		
		//InstrAttribute
		public RuleCall getAttributesInstrAttributeEnumRuleCall_0_1_2_1_0() { return cAttributesInstrAttributeEnumRuleCall_0_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_3() { return cRightParenthesisKeyword_0_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//('encoding' ':' encoding=Encoding ';')
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'encoding'
		public Keyword getEncodingKeyword_0_3_0() { return cEncodingKeyword_0_3_0; }
		
		//':'
		public Keyword getColonKeyword_0_3_1() { return cColonKeyword_0_3_1; }
		
		//encoding=Encoding
		public Assignment getEncodingAssignment_0_3_2() { return cEncodingAssignment_0_3_2; }
		
		//Encoding
		public RuleCall getEncodingEncodingParserRuleCall_0_3_2_0() { return cEncodingEncodingParserRuleCall_0_3_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_3_3() { return cSemicolonKeyword_0_3_3; }
		
		//('args_disass' ':' disass=STRING ';')? operation=Operation? '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//('args_disass' ':' disass=STRING ';')?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'args_disass'
		public Keyword getArgs_disassKeyword_1_0_0() { return cArgs_disassKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//disass=STRING
		public Assignment getDisassAssignment_1_0_2() { return cDisassAssignment_1_0_2; }
		
		//STRING
		public RuleCall getDisassSTRINGTerminalRuleCall_1_0_2_0() { return cDisassSTRINGTerminalRuleCall_1_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0_3() { return cSemicolonKeyword_1_0_3; }
		
		//operation=Operation?
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_1_1_0() { return cOperationOperationParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class EncodingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Encoding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_0_0 = (RuleCall)cFieldsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_1_1_0 = (RuleCall)cFieldsAssignment_1_1.eContents().get(0);
		
		//Encoding:
		//	fields+=Field ('|' fields+=Field)*;
		@Override public ParserRule getRule() { return rule; }
		
		//fields+=Field ('|' fields+=Field)*
		public Group getGroup() { return cGroup; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_0() { return cFieldsAssignment_0; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_0_0() { return cFieldsFieldParserRuleCall_0_0; }
		
		//('|' fields+=Field)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_1_1() { return cFieldsAssignment_1_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_1_1_0() { return cFieldsFieldParserRuleCall_1_1_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Field");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBitValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBitFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Field:
		//	BitValue | BitField;
		@Override public ParserRule getRule() { return rule; }
		
		//BitValue | BitField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BitValue
		public RuleCall getBitValueParserRuleCall_0() { return cBitValueParserRuleCall_0; }
		
		//BitField
		public RuleCall getBitFieldParserRuleCall_1() { return cBitFieldParserRuleCall_1; }
	}
	public class BitValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BitValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameBVALTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//BitValue:
		//	name=BVAL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=BVAL
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//BVAL
		public RuleCall getNameBVALTerminalRuleCall_0() { return cNameBVALTerminalRuleCall_0; }
	}
	public class BitFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BitField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cBitRangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBitRangeRangeSpecParserRuleCall_1_0 = (RuleCall)cBitRangeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cApostropheKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//BitField:
		//	name=ID bitRange=RangeSpec ("'"? type=DataType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID bitRange=RangeSpec ("'"? type=DataType)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//bitRange=RangeSpec
		public Assignment getBitRangeAssignment_1() { return cBitRangeAssignment_1; }
		
		//RangeSpec
		public RuleCall getBitRangeRangeSpecParserRuleCall_1_0() { return cBitRangeRangeSpecParserRuleCall_1_0; }
		
		//("'"? type=DataType)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"'"?
		public Keyword getApostropheKeyword_2_0() { return cApostropheKeyword_2_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_1_0() { return cTypeDataTypeEnumRuleCall_2_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Operation");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Operation:
		//	statements+=Statement+;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDirectCodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProcedureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//	Assignment | ConditionalStmt | DirectCode | Procedure;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment | ConditionalStmt | DirectCode | Procedure
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//ConditionalStmt
		public RuleCall getConditionalStmtParserRuleCall_1() { return cConditionalStmtParserRuleCall_1; }
		
		//DirectCode
		public RuleCall getDirectCodeParserRuleCall_2() { return cDirectCodeParserRuleCall_2; }
		
		//Procedure
		public RuleCall getProcedureParserRuleCall_3() { return cProcedureParserRuleCall_3; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cIndexedAssignmentAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cToAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final CrossReference cToIndexedVariableCrossReference_0_0_1_0 = (CrossReference)cToAssignment_0_0_1.eContents().get(0);
		private final RuleCall cToIndexedVariableIDTerminalRuleCall_0_0_1_0_1 = (RuleCall)cToIndexedVariableCrossReference_0_0_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cIndexAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cIndexExpressionParserRuleCall_0_0_3_0 = (RuleCall)cIndexAssignment_0_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_0_4 = (Keyword)cGroup_0_0.eContents().get(4);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cRegisterAssignmentAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cToAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cToRegisterVariableCrossReference_0_1_1_0 = (CrossReference)cToAssignment_0_1_1.eContents().get(0);
		private final RuleCall cToRegisterVariableIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cToRegisterVariableCrossReference_0_1_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Action cScalarAssignmentAction_0_2_0 = (Action)cGroup_0_2.eContents().get(0);
		private final Assignment cToAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cToScalarParserRuleCall_0_2_1_0 = (RuleCall)cToAssignment_0_2_1.eContents().get(0);
		private final Assignment cBitWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBitWidthBitSizeSpecParserRuleCall_1_0 = (RuleCall)cBitWidthAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Assignment:
		//	({IndexedAssignment} to=[IndexedVariable] '[' index=Expression ']' | {RegisterAssignment} to=[RegisterVariable] |
		//	{ScalarAssignment} to=Scalar) bitWidth=BitSizeSpec? '<=' expression=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//({IndexedAssignment} to=[IndexedVariable] '[' index=Expression ']' | {RegisterAssignment} to=[RegisterVariable] |
		//{ScalarAssignment} to=Scalar) bitWidth=BitSizeSpec? '<=' expression=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//({IndexedAssignment} to=[IndexedVariable] '[' index=Expression ']' | {RegisterAssignment} to=[RegisterVariable] |
		//{ScalarAssignment} to=Scalar)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//{IndexedAssignment} to=[IndexedVariable] '[' index=Expression ']'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{IndexedAssignment}
		public Action getIndexedAssignmentAction_0_0_0() { return cIndexedAssignmentAction_0_0_0; }
		
		//to=[IndexedVariable]
		public Assignment getToAssignment_0_0_1() { return cToAssignment_0_0_1; }
		
		//[IndexedVariable]
		public CrossReference getToIndexedVariableCrossReference_0_0_1_0() { return cToIndexedVariableCrossReference_0_0_1_0; }
		
		//ID
		public RuleCall getToIndexedVariableIDTerminalRuleCall_0_0_1_0_1() { return cToIndexedVariableIDTerminalRuleCall_0_0_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0_2() { return cLeftSquareBracketKeyword_0_0_2; }
		
		//index=Expression
		public Assignment getIndexAssignment_0_0_3() { return cIndexAssignment_0_0_3; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_0_0_3_0() { return cIndexExpressionParserRuleCall_0_0_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_0_4() { return cRightSquareBracketKeyword_0_0_4; }
		
		//{RegisterAssignment} to=[RegisterVariable]
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{RegisterAssignment}
		public Action getRegisterAssignmentAction_0_1_0() { return cRegisterAssignmentAction_0_1_0; }
		
		//to=[RegisterVariable]
		public Assignment getToAssignment_0_1_1() { return cToAssignment_0_1_1; }
		
		//[RegisterVariable]
		public CrossReference getToRegisterVariableCrossReference_0_1_1_0() { return cToRegisterVariableCrossReference_0_1_1_0; }
		
		//ID
		public RuleCall getToRegisterVariableIDTerminalRuleCall_0_1_1_0_1() { return cToRegisterVariableIDTerminalRuleCall_0_1_1_0_1; }
		
		//{ScalarAssignment} to=Scalar
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//{ScalarAssignment}
		public Action getScalarAssignmentAction_0_2_0() { return cScalarAssignmentAction_0_2_0; }
		
		//to=Scalar
		public Assignment getToAssignment_0_2_1() { return cToAssignment_0_2_1; }
		
		//Scalar
		public RuleCall getToScalarParserRuleCall_0_2_1_0() { return cToScalarParserRuleCall_0_2_1_0; }
		
		//bitWidth=BitSizeSpec?
		public Assignment getBitWidthAssignment_1() { return cBitWidthAssignment_1; }
		
		//BitSizeSpec
		public RuleCall getBitWidthBitSizeSpecParserRuleCall_1_0() { return cBitWidthBitSizeSpecParserRuleCall_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConditionalStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ConditionalStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondBooleanOrExprParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cThenStmtsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cThenStmtsStatementParserRuleCall_4_0_0 = (RuleCall)cThenStmtsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cThenStmtsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cThenStmtsStatementParserRuleCall_4_1_1_0 = (RuleCall)cThenStmtsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cElseStmtsAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cElseStmtsStatementParserRuleCall_5_1_0_0 = (RuleCall)cElseStmtsAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cAlternatives_5_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cElseStmtsAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cElseStmtsStatementParserRuleCall_5_1_1_1_0 = (RuleCall)cElseStmtsAssignment_5_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_1_2 = (Keyword)cGroup_5_1_1.eContents().get(2);
		
		//ConditionalStmt:
		//	'if' '(' cond=BooleanOrExpr ')' (thenStmts+=Statement | '{' thenStmts+=Statement+ '}') (=> 'else'
		//	(elseStmts+=Statement | '{' elseStmts+=Statement+ '}'))?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' cond=BooleanOrExpr ')' (thenStmts+=Statement | '{' thenStmts+=Statement+ '}') (=> 'else' (elseStmts+=Statement
		//| '{' elseStmts+=Statement+ '}'))?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=BooleanOrExpr
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//BooleanOrExpr
		public RuleCall getCondBooleanOrExprParserRuleCall_2_0() { return cCondBooleanOrExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//(thenStmts+=Statement | '{' thenStmts+=Statement+ '}')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//thenStmts+=Statement
		public Assignment getThenStmtsAssignment_4_0() { return cThenStmtsAssignment_4_0; }
		
		//Statement
		public RuleCall getThenStmtsStatementParserRuleCall_4_0_0() { return cThenStmtsStatementParserRuleCall_4_0_0; }
		
		//'{' thenStmts+=Statement+ '}'
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_0() { return cLeftCurlyBracketKeyword_4_1_0; }
		
		//thenStmts+=Statement+
		public Assignment getThenStmtsAssignment_4_1_1() { return cThenStmtsAssignment_4_1_1; }
		
		//Statement
		public RuleCall getThenStmtsStatementParserRuleCall_4_1_1_0() { return cThenStmtsStatementParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_2() { return cRightCurlyBracketKeyword_4_1_2; }
		
		//(=> 'else' (elseStmts+=Statement | '{' elseStmts+=Statement+ '}'))?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//(elseStmts+=Statement | '{' elseStmts+=Statement+ '}')
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//elseStmts+=Statement
		public Assignment getElseStmtsAssignment_5_1_0() { return cElseStmtsAssignment_5_1_0; }
		
		//Statement
		public RuleCall getElseStmtsStatementParserRuleCall_5_1_0_0() { return cElseStmtsStatementParserRuleCall_5_1_0_0; }
		
		//'{' elseStmts+=Statement+ '}'
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1_1_0() { return cLeftCurlyBracketKeyword_5_1_1_0; }
		
		//elseStmts+=Statement+
		public Assignment getElseStmtsAssignment_5_1_1_1() { return cElseStmtsAssignment_5_1_1_1; }
		
		//Statement
		public RuleCall getElseStmtsStatementParserRuleCall_5_1_1_1_0() { return cElseStmtsStatementParserRuleCall_5_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_1_1_2() { return cRightCurlyBracketKeyword_5_1_1_2; }
	}
	public class DirectCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DirectCode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeSTRINGTerminalRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		private final Assignment cCodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCodeSTRINGTerminalRuleCall_3_0 = (RuleCall)cCodeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DirectCode:
		//	'C++' '{' code+=STRING code+=STRING* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'C++' '{' code+=STRING code+=STRING* '}'
		public Group getGroup() { return cGroup; }
		
		//'C++'
		public Keyword getCKeyword_0() { return cCKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//code+=STRING
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_2_0() { return cCodeSTRINGTerminalRuleCall_2_0; }
		
		//code+=STRING*
		public Assignment getCodeAssignment_3() { return cCodeAssignment_3; }
		
		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_3_0() { return cCodeSTRINGTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePROCEDURENAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsExpressionParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Procedure:
		//	name=PROCEDURENAME '(' args+=Expression (',' args+=Expression)* ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=PROCEDURENAME '(' args+=Expression (',' args+=Expression)* ')' ';'
		public Group getGroup() { return cGroup; }
		
		//name=PROCEDURENAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//PROCEDURENAME
		public RuleCall getNamePROCEDURENAMETerminalRuleCall_0_0() { return cNamePROCEDURENAMETerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0() { return cArgsExpressionParserRuleCall_2_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_0() { return cArgsExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Constant:
		//	ConstantDef | ConstantDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstantDef | ConstantDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstantDef
		public RuleCall getConstantDefParserRuleCall_0() { return cConstantDefParserRuleCall_0; }
		
		//ConstantDecl
		public RuleCall getConstantDeclParserRuleCall_1() { return cConstantDeclParserRuleCall_1; }
	}
	public class ConstantDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ConstantDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueNATURALTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesConstAttributeEnumRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cAttributesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cAttributesConstAttributeEnumRuleCall_3_2_1_0 = (RuleCall)cAttributesAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConstantDef:
		//	name=ID ':=' value=NATURAL ('(' attributes+=ConstAttribute (',' attributes+=ConstAttribute)* ')')? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':=' value=NATURAL ('(' attributes+=ConstAttribute (',' attributes+=ConstAttribute)* ')')? ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//value=NATURAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//NATURAL
		public RuleCall getValueNATURALTerminalRuleCall_2_0() { return cValueNATURALTerminalRuleCall_2_0; }
		
		//('(' attributes+=ConstAttribute (',' attributes+=ConstAttribute)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//attributes+=ConstAttribute
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//ConstAttribute
		public RuleCall getAttributesConstAttributeEnumRuleCall_3_1_0() { return cAttributesConstAttributeEnumRuleCall_3_1_0; }
		
		//(',' attributes+=ConstAttribute)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//attributes+=ConstAttribute
		public Assignment getAttributesAssignment_3_2_1() { return cAttributesAssignment_3_2_1; }
		
		//ConstAttribute
		public RuleCall getAttributesConstAttributeEnumRuleCall_3_2_1_0() { return cAttributesConstAttributeEnumRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConstantDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ConstantDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cConstantDefaultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstantDefaultConstantDefaultParserRuleCall_1_0 = (RuleCall)cConstantDefaultAssignment_1.eContents().get(0);
		
		//ConstantDecl Constant:
		//	name=ID constantDefault=ConstantDefault?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID constantDefault=ConstantDefault?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//constantDefault=ConstantDefault?
		public Assignment getConstantDefaultAssignment_1() { return cConstantDefaultAssignment_1; }
		
		//ConstantDefault
		public RuleCall getConstantDefaultConstantDefaultParserRuleCall_1_0() { return cConstantDefaultConstantDefaultParserRuleCall_1_0; }
	}
	public class ConstantDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ConstantDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefaultValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefaultValueNATURALTerminalRuleCall_1_0 = (RuleCall)cDefaultValueAssignment_1.eContents().get(0);
		
		//ConstantDefault:
		//	':=' defaultValue=NATURAL;
		@Override public ParserRule getRule() { return rule; }
		
		//':=' defaultValue=NATURAL
		public Group getGroup() { return cGroup; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0() { return cColonEqualsSignKeyword_0; }
		
		//defaultValue=NATURAL
		public Assignment getDefaultValueAssignment_1() { return cDefaultValueAssignment_1; }
		
		//NATURAL
		public RuleCall getDefaultValueNATURALTerminalRuleCall_1_0() { return cDefaultValueNATURALTerminalRuleCall_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndexedVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScalarVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	IndexedVariable | ScalarVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//IndexedVariable | ScalarVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IndexedVariable
		public RuleCall getIndexedVariableParserRuleCall_0() { return cIndexedVariableParserRuleCall_0; }
		
		//ScalarVariable
		public RuleCall getScalarVariableParserRuleCall_1() { return cScalarVariableParserRuleCall_1; }
	}
	public class IndexedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.IndexedVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddressSpaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegisterFileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IndexedVariable:
		//	AddressSpace | RegisterFile;
		@Override public ParserRule getRule() { return rule; }
		
		//AddressSpace | RegisterFile
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddressSpace
		public RuleCall getAddressSpaceParserRuleCall_0() { return cAddressSpaceParserRuleCall_0; }
		
		//RegisterFile
		public RuleCall getRegisterFileParserRuleCall_1() { return cRegisterFileParserRuleCall_1; }
	}
	public class ScalarVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ScalarVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegisterVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScalarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ScalarVariable:
		//	RegisterVariable | Scalar;
		@Override public ParserRule getRule() { return rule; }
		
		//RegisterVariable | Scalar
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RegisterVariable
		public RuleCall getRegisterVariableParserRuleCall_0() { return cRegisterVariableParserRuleCall_0; }
		
		//Scalar
		public RuleCall getScalarParserRuleCall_1() { return cScalarParserRuleCall_1; }
	}
	public class RegisterVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.RegisterVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegisterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegisterAliasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RegisterVariable:
		//	Register | RegisterAlias;
		@Override public ParserRule getRule() { return rule; }
		
		//Register | RegisterAlias
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Register
		public RuleCall getRegisterParserRuleCall_0() { return cRegisterParserRuleCall_0; }
		
		//RegisterAlias
		public RuleCall getRegisterAliasParserRuleCall_1() { return cRegisterAliasParserRuleCall_1; }
	}
	public class AddressSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.AddressSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBitSizeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBitSizeNATURALTerminalRuleCall_2_0_0 = (RuleCall)cBitSizeAssignment_2_0.eContents().get(0);
		private final Assignment cBitSizeConstAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cBitSizeConstConstantCrossReference_2_1_0 = (CrossReference)cBitSizeConstAssignment_2_1.eContents().get(0);
		private final RuleCall cBitSizeConstConstantIDTerminalRuleCall_2_1_0_1 = (RuleCall)cBitSizeConstConstantCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AddressSpace:
		//	name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(bitSize=NATURAL | bitSizeConst=[Constant])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//bitSize=NATURAL
		public Assignment getBitSizeAssignment_2_0() { return cBitSizeAssignment_2_0; }
		
		//NATURAL
		public RuleCall getBitSizeNATURALTerminalRuleCall_2_0_0() { return cBitSizeNATURALTerminalRuleCall_2_0_0; }
		
		//bitSizeConst=[Constant]
		public Assignment getBitSizeConstAssignment_2_1() { return cBitSizeConstAssignment_2_1; }
		
		//[Constant]
		public CrossReference getBitSizeConstConstantCrossReference_2_1_0() { return cBitSizeConstConstantCrossReference_2_1_0; }
		
		//ID
		public RuleCall getBitSizeConstConstantIDTerminalRuleCall_2_1_0_1() { return cBitSizeConstConstantIDTerminalRuleCall_2_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class RegisterFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.RegisterFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cRangeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRangeRangeSpecParserRuleCall_0_0_0 = (RuleCall)cRangeAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBitSizeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBitSizeNATURALTerminalRuleCall_2_0_0 = (RuleCall)cBitSizeAssignment_2_0.eContents().get(0);
		private final Assignment cBitSizeConstAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cBitSizeConstConstantCrossReference_2_1_0 = (CrossReference)cBitSizeConstAssignment_2_1.eContents().get(0);
		private final RuleCall cBitSizeConstConstantIDTerminalRuleCall_2_1_0_1 = (RuleCall)cBitSizeConstConstantCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttributesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttributesRegAttributeEnumRuleCall_4_1_0 = (RuleCall)cAttributesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cAttributesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAttributesRegAttributeEnumRuleCall_4_2_1_0 = (RuleCall)cAttributesAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//RegisterFile:
		//	(-> range=RangeSpec name=ID) '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']' ('(' attributes+=RegAttribute (','
		//	attributes+=RegAttribute)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(-> range=RangeSpec name=ID) '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']' ('(' attributes+=RegAttribute (','
		//attributes+=RegAttribute)* ')')?
		public Group getGroup() { return cGroup; }
		
		//(-> range=RangeSpec name=ID)
		public Group getGroup_0() { return cGroup_0; }
		
		//-> range=RangeSpec
		public Assignment getRangeAssignment_0_0() { return cRangeAssignment_0_0; }
		
		//RangeSpec
		public RuleCall getRangeRangeSpecParserRuleCall_0_0_0() { return cRangeRangeSpecParserRuleCall_0_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(bitSize=NATURAL | bitSizeConst=[Constant])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//bitSize=NATURAL
		public Assignment getBitSizeAssignment_2_0() { return cBitSizeAssignment_2_0; }
		
		//NATURAL
		public RuleCall getBitSizeNATURALTerminalRuleCall_2_0_0() { return cBitSizeNATURALTerminalRuleCall_2_0_0; }
		
		//bitSizeConst=[Constant]
		public Assignment getBitSizeConstAssignment_2_1() { return cBitSizeConstAssignment_2_1; }
		
		//[Constant]
		public CrossReference getBitSizeConstConstantCrossReference_2_1_0() { return cBitSizeConstConstantCrossReference_2_1_0; }
		
		//ID
		public RuleCall getBitSizeConstConstantIDTerminalRuleCall_2_1_0_1() { return cBitSizeConstConstantIDTerminalRuleCall_2_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//('(' attributes+=RegAttribute (',' attributes+=RegAttribute)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//attributes+=RegAttribute
		public Assignment getAttributesAssignment_4_1() { return cAttributesAssignment_4_1; }
		
		//RegAttribute
		public RuleCall getAttributesRegAttributeEnumRuleCall_4_1_0() { return cAttributesRegAttributeEnumRuleCall_4_1_0; }
		
		//(',' attributes+=RegAttribute)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//attributes+=RegAttribute
		public Assignment getAttributesAssignment_4_2_1() { return cAttributesAssignment_4_2_1; }
		
		//RegAttribute
		public RuleCall getAttributesRegAttributeEnumRuleCall_4_2_1_0() { return cAttributesRegAttributeEnumRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class RegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Register");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBitSizeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBitSizeNATURALTerminalRuleCall_2_0_0 = (RuleCall)cBitSizeAssignment_2_0.eContents().get(0);
		private final Assignment cBitSizeConstAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cBitSizeConstConstantCrossReference_2_1_0 = (CrossReference)cBitSizeConstAssignment_2_1.eContents().get(0);
		private final RuleCall cBitSizeConstConstantIDTerminalRuleCall_2_1_0_1 = (RuleCall)cBitSizeConstConstantCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttributesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttributesRegAttributeEnumRuleCall_4_1_0 = (RuleCall)cAttributesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cAttributesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAttributesRegAttributeEnumRuleCall_4_2_1_0 = (RuleCall)cAttributesAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//Register:
		//	name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']' ('(' attributes+=RegAttribute (','
		//	attributes+=RegAttribute)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']' ('(' attributes+=RegAttribute (','
		//attributes+=RegAttribute)* ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(bitSize=NATURAL | bitSizeConst=[Constant])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//bitSize=NATURAL
		public Assignment getBitSizeAssignment_2_0() { return cBitSizeAssignment_2_0; }
		
		//NATURAL
		public RuleCall getBitSizeNATURALTerminalRuleCall_2_0_0() { return cBitSizeNATURALTerminalRuleCall_2_0_0; }
		
		//bitSizeConst=[Constant]
		public Assignment getBitSizeConstAssignment_2_1() { return cBitSizeConstAssignment_2_1; }
		
		//[Constant]
		public CrossReference getBitSizeConstConstantCrossReference_2_1_0() { return cBitSizeConstConstantCrossReference_2_1_0; }
		
		//ID
		public RuleCall getBitSizeConstConstantIDTerminalRuleCall_2_1_0_1() { return cBitSizeConstConstantIDTerminalRuleCall_2_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//('(' attributes+=RegAttribute (',' attributes+=RegAttribute)* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//attributes+=RegAttribute
		public Assignment getAttributesAssignment_4_1() { return cAttributesAssignment_4_1; }
		
		//RegAttribute
		public RuleCall getAttributesRegAttributeEnumRuleCall_4_1_0() { return cAttributesRegAttributeEnumRuleCall_4_1_0; }
		
		//(',' attributes+=RegAttribute)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//attributes+=RegAttribute
		public Assignment getAttributesAssignment_4_2_1() { return cAttributesAssignment_4_2_1; }
		
		//RegAttribute
		public RuleCall getAttributesRegAttributeEnumRuleCall_4_2_1_0() { return cAttributesRegAttributeEnumRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class RegisterAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.RegisterAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAliasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBitSizeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBitSizeNATURALTerminalRuleCall_3_0_0 = (RuleCall)cBitSizeAssignment_3_0.eContents().get(0);
		private final Assignment cBitSizeConstAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cBitSizeConstConstantCrossReference_3_1_0 = (CrossReference)cBitSizeConstAssignment_3_1.eContents().get(0);
		private final RuleCall cBitSizeConstConstantIDTerminalRuleCall_3_1_0_1 = (RuleCall)cBitSizeConstConstantCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributesRegAttributeEnumRuleCall_5_1_0 = (RuleCall)cAttributesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cAttributesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cAttributesRegAttributeEnumRuleCall_5_2_1_0 = (RuleCall)cAttributesAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cIsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cOriginalAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final CrossReference cOriginalRegisterCrossReference_7_0_0 = (CrossReference)cOriginalAssignment_7_0.eContents().get(0);
		private final RuleCall cOriginalRegisterIDTerminalRuleCall_7_0_0_1 = (RuleCall)cOriginalRegisterCrossReference_7_0_0.eContents().get(1);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Assignment cOriginalAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final CrossReference cOriginalRegisterFileCrossReference_7_1_0_0 = (CrossReference)cOriginalAssignment_7_1_0.eContents().get(0);
		private final RuleCall cOriginalRegisterFileIDTerminalRuleCall_7_1_0_0_1 = (RuleCall)cOriginalRegisterFileCrossReference_7_1_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_7_1_1 = (Keyword)cGroup_7_1.eContents().get(1);
		private final Alternatives cAlternatives_7_1_2 = (Alternatives)cGroup_7_1.eContents().get(2);
		private final Assignment cIndexAssignment_7_1_2_0 = (Assignment)cAlternatives_7_1_2.eContents().get(0);
		private final RuleCall cIndexNumberLiteralParserRuleCall_7_1_2_0_0 = (RuleCall)cIndexAssignment_7_1_2_0.eContents().get(0);
		private final Assignment cIndexAssignment_7_1_2_1 = (Assignment)cAlternatives_7_1_2.eContents().get(1);
		private final RuleCall cIndexValueRefParserRuleCall_7_1_2_1_0 = (RuleCall)cIndexAssignment_7_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_1_3 = (Keyword)cGroup_7_1.eContents().get(3);
		
		//RegisterAlias:
		//	'alias' name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']' ('(' attributes+=RegAttribute (','
		//	attributes+=RegAttribute)* ')')? 'is' (original=[Register] | original=[RegisterFile] '[' (index=NumberLiteral |
		//	index=ValueRef) ']');
		@Override public ParserRule getRule() { return rule; }
		
		//'alias' name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']' ('(' attributes+=RegAttribute (','
		//attributes+=RegAttribute)* ')')? 'is' (original=[Register] | original=[RegisterFile] '[' (index=NumberLiteral |
		//index=ValueRef) ']')
		public Group getGroup() { return cGroup; }
		
		//'alias'
		public Keyword getAliasKeyword_0() { return cAliasKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(bitSize=NATURAL | bitSizeConst=[Constant])
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//bitSize=NATURAL
		public Assignment getBitSizeAssignment_3_0() { return cBitSizeAssignment_3_0; }
		
		//NATURAL
		public RuleCall getBitSizeNATURALTerminalRuleCall_3_0_0() { return cBitSizeNATURALTerminalRuleCall_3_0_0; }
		
		//bitSizeConst=[Constant]
		public Assignment getBitSizeConstAssignment_3_1() { return cBitSizeConstAssignment_3_1; }
		
		//[Constant]
		public CrossReference getBitSizeConstConstantCrossReference_3_1_0() { return cBitSizeConstConstantCrossReference_3_1_0; }
		
		//ID
		public RuleCall getBitSizeConstConstantIDTerminalRuleCall_3_1_0_1() { return cBitSizeConstConstantIDTerminalRuleCall_3_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//('(' attributes+=RegAttribute (',' attributes+=RegAttribute)* ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//attributes+=RegAttribute
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }
		
		//RegAttribute
		public RuleCall getAttributesRegAttributeEnumRuleCall_5_1_0() { return cAttributesRegAttributeEnumRuleCall_5_1_0; }
		
		//(',' attributes+=RegAttribute)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//attributes+=RegAttribute
		public Assignment getAttributesAssignment_5_2_1() { return cAttributesAssignment_5_2_1; }
		
		//RegAttribute
		public RuleCall getAttributesRegAttributeEnumRuleCall_5_2_1_0() { return cAttributesRegAttributeEnumRuleCall_5_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//'is'
		public Keyword getIsKeyword_6() { return cIsKeyword_6; }
		
		//(original=[Register] | original=[RegisterFile] '[' (index=NumberLiteral | index=ValueRef) ']')
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//original=[Register]
		public Assignment getOriginalAssignment_7_0() { return cOriginalAssignment_7_0; }
		
		//[Register]
		public CrossReference getOriginalRegisterCrossReference_7_0_0() { return cOriginalRegisterCrossReference_7_0_0; }
		
		//ID
		public RuleCall getOriginalRegisterIDTerminalRuleCall_7_0_0_1() { return cOriginalRegisterIDTerminalRuleCall_7_0_0_1; }
		
		//original=[RegisterFile] '[' (index=NumberLiteral | index=ValueRef) ']'
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//original=[RegisterFile]
		public Assignment getOriginalAssignment_7_1_0() { return cOriginalAssignment_7_1_0; }
		
		//[RegisterFile]
		public CrossReference getOriginalRegisterFileCrossReference_7_1_0_0() { return cOriginalRegisterFileCrossReference_7_1_0_0; }
		
		//ID
		public RuleCall getOriginalRegisterFileIDTerminalRuleCall_7_1_0_0_1() { return cOriginalRegisterFileIDTerminalRuleCall_7_1_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_1_1() { return cLeftSquareBracketKeyword_7_1_1; }
		
		//(index=NumberLiteral | index=ValueRef)
		public Alternatives getAlternatives_7_1_2() { return cAlternatives_7_1_2; }
		
		//index=NumberLiteral
		public Assignment getIndexAssignment_7_1_2_0() { return cIndexAssignment_7_1_2_0; }
		
		//NumberLiteral
		public RuleCall getIndexNumberLiteralParserRuleCall_7_1_2_0_0() { return cIndexNumberLiteralParserRuleCall_7_1_2_0_0; }
		
		//index=ValueRef
		public Assignment getIndexAssignment_7_1_2_1() { return cIndexAssignment_7_1_2_1; }
		
		//ValueRef
		public RuleCall getIndexValueRefParserRuleCall_7_1_2_1_0() { return cIndexValueRefParserRuleCall_7_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_1_3() { return cRightSquareBracketKeyword_7_1_3; }
	}
	public class ScalarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Scalar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBitSizeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBitSizeNATURALTerminalRuleCall_3_0_0 = (RuleCall)cBitSizeAssignment_3_0.eContents().get(0);
		private final Assignment cBitSizeConstAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cBitSizeConstConstantCrossReference_3_1_0 = (CrossReference)cBitSizeConstAssignment_3_1.eContents().get(0);
		private final RuleCall cBitSizeConstConstantIDTerminalRuleCall_3_1_0_1 = (RuleCall)cBitSizeConstConstantCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Scalar:
		//	'val' name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'val' name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']'
		public Group getGroup() { return cGroup; }
		
		//'val'
		public Keyword getValKeyword_0() { return cValKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(bitSize=NATURAL | bitSizeConst=[Constant])
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//bitSize=NATURAL
		public Assignment getBitSizeAssignment_3_0() { return cBitSizeAssignment_3_0; }
		
		//NATURAL
		public RuleCall getBitSizeNATURALTerminalRuleCall_3_0_0() { return cBitSizeNATURALTerminalRuleCall_3_0_0; }
		
		//bitSizeConst=[Constant]
		public Assignment getBitSizeConstAssignment_3_1() { return cBitSizeConstAssignment_3_1; }
		
		//[Constant]
		public CrossReference getBitSizeConstConstantCrossReference_3_1_0() { return cBitSizeConstConstantCrossReference_3_1_0; }
		
		//ID
		public RuleCall getBitSizeConstConstantIDTerminalRuleCall_3_1_0_1() { return cBitSizeConstConstantIDTerminalRuleCall_3_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ScalarBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ScalarBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScalarAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeterminedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDeterminedIs_determinedKeyword_1_0 = (Keyword)cDeterminedAssignment_1.eContents().get(0);
		
		//// dummy rule to add a property
		//ScalarBase Scalar:
		//	{Scalar} determined?='is_determined';
		@Override public ParserRule getRule() { return rule; }
		
		//{Scalar} determined?='is_determined'
		public Group getGroup() { return cGroup; }
		
		//{Scalar}
		public Action getScalarAction_0() { return cScalarAction_0; }
		
		//determined?='is_determined'
		public Assignment getDeterminedAssignment_1() { return cDeterminedAssignment_1; }
		
		//'is_determined'
		public Keyword getDeterminedIs_determinedKeyword_1_0() { return cDeterminedIs_determinedKeyword_1_0; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNATURALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//	value=NATURAL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NATURAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NATURAL
		public RuleCall getValueNATURALTerminalRuleCall_0() { return cValueNATURALTerminalRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Expression");
		private final RuleCall cBooleanOrExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	BooleanOrExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanOrExpr
		public RuleCall getBooleanOrExprParserRuleCall() { return cBooleanOrExprParserRuleCall; }
	}
	public class BooleanOrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BooleanOrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBooleanAndExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BooleanOrExpr Expression:
		//	BooleanAndExpr ({BooleanExpr.left=current} op='||' right=BooleanAndExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanAndExpr ({BooleanExpr.left=current} op='||' right=BooleanAndExpr)*
		public Group getGroup() { return cGroup; }
		
		//BooleanAndExpr
		public RuleCall getBooleanAndExprParserRuleCall_0() { return cBooleanAndExprParserRuleCall_0; }
		
		//({BooleanExpr.left=current} op='||' right=BooleanAndExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanExpr.left=current}
		public Action getBooleanExprLeftAction_1_0() { return cBooleanExprLeftAction_1_0; }
		
		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=BooleanAndExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BooleanAndExpr
		public RuleCall getRightBooleanAndExprParserRuleCall_1_2_0() { return cRightBooleanAndExprParserRuleCall_1_2_0; }
	}
	public class BooleanAndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BooleanAndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitOrExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BooleanAndExpr Expression:
		//	BitOrExpr ({BooleanExpr.left=current} op='&&' right=BitOrExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitOrExpr ({BooleanExpr.left=current} op='&&' right=BitOrExpr)*
		public Group getGroup() { return cGroup; }
		
		//BitOrExpr
		public RuleCall getBitOrExprParserRuleCall_0() { return cBitOrExprParserRuleCall_0; }
		
		//({BooleanExpr.left=current} op='&&' right=BitOrExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanExpr.left=current}
		public Action getBooleanExprLeftAction_1_0() { return cBooleanExprLeftAction_1_0; }
		
		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }
		
		//right=BitOrExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitOrExpr
		public RuleCall getRightBitOrExprParserRuleCall_1_2_0() { return cRightBitOrExprParserRuleCall_1_2_0; }
	}
	public class BitOrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BitOrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitXOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitXOrExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitOrExpr Expression:
		//	BitXOrExpr ({BitExpr.left=current} op='|' right=BitXOrExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitXOrExpr ({BitExpr.left=current} op='|' right=BitXOrExpr)*
		public Group getGroup() { return cGroup; }
		
		//BitXOrExpr
		public RuleCall getBitXOrExprParserRuleCall_0() { return cBitXOrExprParserRuleCall_0; }
		
		//({BitExpr.left=current} op='|' right=BitXOrExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitExpr.left=current}
		public Action getBitExprLeftAction_1_0() { return cBitExprLeftAction_1_0; }
		
		//op='|'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'|'
		public Keyword getOpVerticalLineKeyword_1_1_0() { return cOpVerticalLineKeyword_1_1_0; }
		
		//right=BitXOrExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitXOrExpr
		public RuleCall getRightBitXOrExprParserRuleCall_1_2_0() { return cRightBitXOrExprParserRuleCall_1_2_0; }
	}
	public class BitXOrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BitXOrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitAndExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitXOrExpr Expression:
		//	BitAndExpr ({BitExpr.left=current} op='^' right=BitAndExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitAndExpr ({BitExpr.left=current} op='^' right=BitAndExpr)*
		public Group getGroup() { return cGroup; }
		
		//BitAndExpr
		public RuleCall getBitAndExprParserRuleCall_0() { return cBitAndExprParserRuleCall_0; }
		
		//({BitExpr.left=current} op='^' right=BitAndExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitExpr.left=current}
		public Action getBitExprLeftAction_1_0() { return cBitExprLeftAction_1_0; }
		
		//op='^'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'^'
		public Keyword getOpCircumflexAccentKeyword_1_1_0() { return cOpCircumflexAccentKeyword_1_1_0; }
		
		//right=BitAndExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitAndExpr
		public RuleCall getRightBitAndExprParserRuleCall_1_2_0() { return cRightBitAndExprParserRuleCall_1_2_0; }
	}
	public class BitAndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BitAndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitAndExpr Expression:
		//	EqualityExpr ({BitExpr.left=current} op='&' right=EqualityExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpr ({BitExpr.left=current} op='&' right=EqualityExpr)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpr
		public RuleCall getEqualityExprParserRuleCall_0() { return cEqualityExprParserRuleCall_0; }
		
		//({BitExpr.left=current} op='&' right=EqualityExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitExpr.left=current}
		public Action getBitExprLeftAction_1_0() { return cBitExprLeftAction_1_0; }
		
		//op='&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_1_1_0() { return cOpAmpersandKeyword_1_1_0; }
		
		//right=EqualityExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpr
		public RuleCall getRightEqualityExprParserRuleCall_1_2_0() { return cRightEqualityExprParserRuleCall_1_2_0; }
	}
	public class EqualityExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.EqualityExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpr Expression:
		//	ComparisonExpr ({ComparisonExpr.left=current} op=('==' | '!=') right=ComparisonExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpr ({ComparisonExpr.left=current} op=('==' | '!=') right=ComparisonExpr)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonExpr
		public RuleCall getComparisonExprParserRuleCall_0() { return cComparisonExprParserRuleCall_0; }
		
		//({ComparisonExpr.left=current} op=('==' | '!=') right=ComparisonExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpr.left=current}
		public Action getComparisonExprLeftAction_1_0() { return cComparisonExprLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=ComparisonExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonExpr
		public RuleCall getRightComparisonExprParserRuleCall_1_2_0() { return cRightComparisonExprParserRuleCall_1_2_0; }
	}
	public class ComparisonExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ComparisonExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightShiftExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpr Expression:
		//	ShiftExpr ({ComparisonExpr.left=current} op=('<' | '>' | '<=' | '>=') right=ShiftExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ShiftExpr ({ComparisonExpr.left=current} op=('<' | '>' | '<=' | '>=') right=ShiftExpr)*
		public Group getGroup() { return cGroup; }
		
		//ShiftExpr
		public RuleCall getShiftExprParserRuleCall_0() { return cShiftExprParserRuleCall_0; }
		
		//({ComparisonExpr.left=current} op=('<' | '>' | '<=' | '>=') right=ShiftExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpr.left=current}
		public Action getComparisonExprLeftAction_1_0() { return cComparisonExprLeftAction_1_0; }
		
		//op=('<' | '>' | '<=' | '>=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('<' | '>' | '<=' | '>=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignKeyword_1_1_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_1() { return cOpGreaterThanSignKeyword_1_1_0_1; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_2() { return cOpLessThanSignEqualsSignKeyword_1_1_0_2; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//right=ShiftExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ShiftExpr
		public RuleCall getRightShiftExprParserRuleCall_1_2_0() { return cRightShiftExprParserRuleCall_1_2_0; }
	}
	public class ShiftExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ShiftExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShiftExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ShiftExpr Expression:
		//	AdditionExpr ({ShiftExpr.left=current} op=('<<' | '>>') right=AdditionExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditionExpr ({ShiftExpr.left=current} op=('<<' | '>>') right=AdditionExpr)*
		public Group getGroup() { return cGroup; }
		
		//AdditionExpr
		public RuleCall getAdditionExprParserRuleCall_0() { return cAdditionExprParserRuleCall_0; }
		
		//({ShiftExpr.left=current} op=('<<' | '>>') right=AdditionExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ShiftExpr.left=current}
		public Action getShiftExprLeftAction_1_0() { return cShiftExprLeftAction_1_0; }
		
		//op=('<<' | '>>')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('<<' | '>>')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'<<'
		public Keyword getOpLessThanSignLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignLessThanSignKeyword_1_1_0_0; }
		
		//'>>'
		public Keyword getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }
		
		//right=AdditionExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditionExpr
		public RuleCall getRightAdditionExprParserRuleCall_1_2_0() { return cRightAdditionExprParserRuleCall_1_2_0; }
	}
	public class AdditionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.AdditionExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditionExpr Expression:
		//	MultiplicationExpr ({AdditionExpr.left=current} op=('+' | '-') right=MultiplicationExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationExpr ({AdditionExpr.left=current} op=('+' | '-') right=MultiplicationExpr)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationExpr
		public RuleCall getMultiplicationExprParserRuleCall_0() { return cMultiplicationExprParserRuleCall_0; }
		
		//({AdditionExpr.left=current} op=('+' | '-') right=MultiplicationExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AdditionExpr.left=current}
		public Action getAdditionExprLeftAction_1_0() { return cAdditionExprLeftAction_1_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=MultiplicationExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplicationExpr
		public RuleCall getRightMultiplicationExprParserRuleCall_1_2_0() { return cRightMultiplicationExprParserRuleCall_1_2_0; }
	}
	public class MultiplicationExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.MultiplicationExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnitaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnitaryExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicationExpr Expression:
		//	UnitaryExpr ({MultiplicationExpr.left=current} op=('*' | '/' | '%') right=UnitaryExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitaryExpr ({MultiplicationExpr.left=current} op=('*' | '/' | '%') right=UnitaryExpr)*
		public Group getGroup() { return cGroup; }
		
		//UnitaryExpr
		public RuleCall getUnitaryExprParserRuleCall_0() { return cUnitaryExprParserRuleCall_0; }
		
		//({MultiplicationExpr.left=current} op=('*' | '/' | '%') right=UnitaryExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplicationExpr.left=current}
		public Action getMultiplicationExprLeftAction_1_0() { return cMultiplicationExprLeftAction_1_0; }
		
		//op=('*' | '/' | '%')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/' | '%')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//'%'
		public Keyword getOpPercentSignKeyword_1_1_0_2() { return cOpPercentSignKeyword_1_1_0_2; }
		
		//right=UnitaryExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnitaryExpr
		public RuleCall getRightUnitaryExprParserRuleCall_1_2_0() { return cRightUnitaryExprParserRuleCall_1_2_0; }
	}
	public class UnitaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.UnitaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeConvParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnitaryExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpTildeKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpExclamationMarkKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprUnitaryExprParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		
		//UnitaryExpr Expression:
		//	TypeConv | {UnitaryExpr} op=('-' | '+' | '~' | '!') expr=UnitaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeConv | {UnitaryExpr} op=('-' | '+' | '~' | '!') expr=UnitaryExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeConv
		public RuleCall getTypeConvParserRuleCall_0() { return cTypeConvParserRuleCall_0; }
		
		//{UnitaryExpr} op=('-' | '+' | '~' | '!') expr=UnitaryExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnitaryExpr}
		public Action getUnitaryExprAction_1_0() { return cUnitaryExprAction_1_0; }
		
		//op=('-' | '+' | '~' | '!')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('-' | '+' | '~' | '!')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_0() { return cOpHyphenMinusKeyword_1_1_0_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_1() { return cOpPlusSignKeyword_1_1_0_1; }
		
		//'~'
		public Keyword getOpTildeKeyword_1_1_0_2() { return cOpTildeKeyword_1_1_0_2; }
		
		//'!'
		public Keyword getOpExclamationMarkKeyword_1_1_0_3() { return cOpExclamationMarkKeyword_1_1_0_3; }
		
		//expr=UnitaryExpr
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }
		
		//UnitaryExpr
		public RuleCall getExprUnitaryExprParserRuleCall_1_2_0() { return cExprUnitaryExprParserRuleCall_1_2_0; }
	}
	public class TypeConvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.TypeConv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTypeConvExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cApostropheKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		
		//TypeConv Expression:
		//	Primary ({TypeConv.expr=current} "'"? type=DataType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({TypeConv.expr=current} "'"? type=DataType)?
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({TypeConv.expr=current} "'"? type=DataType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{TypeConv.expr=current}
		public Action getTypeConvExprAction_1_0() { return cTypeConvExprAction_1_0; }
		
		//"'"?
		public Keyword getApostropheKeyword_1_1() { return cApostropheKeyword_1_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_1_2_0() { return cTypeDataTypeEnumRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFunctionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameFUNCTIONNAMETerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cArgsAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_1_3_0_0 = (RuleCall)cArgsAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_3_1_1_0 = (RuleCall)cArgsAssignment_1_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final RuleCall cNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValueRefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary Expression:
		//	'(' Expression ')' | {Function} name=FUNCTIONNAME '(' (args+=Expression (',' args+=Expression)*)? ')' | NumberLiteral
		//	| ValueRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Function} name=FUNCTIONNAME '(' (args+=Expression (',' args+=Expression)*)? ')' | NumberLiteral |
		//ValueRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Function} name=FUNCTIONNAME '(' (args+=Expression (',' args+=Expression)*)? ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Function}
		public Action getFunctionAction_1_0() { return cFunctionAction_1_0; }
		
		//name=FUNCTIONNAME
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//FUNCTIONNAME
		public RuleCall getNameFUNCTIONNAMETerminalRuleCall_1_1_0() { return cNameFUNCTIONNAMETerminalRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//(args+=Expression (',' args+=Expression)*)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//args+=Expression
		public Assignment getArgsAssignment_1_3_0() { return cArgsAssignment_1_3_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_3_0_0() { return cArgsExpressionParserRuleCall_1_3_0_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//','
		public Keyword getCommaKeyword_1_3_1_0() { return cCommaKeyword_1_3_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_1_3_1_1() { return cArgsAssignment_1_3_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_3_1_1_0() { return cArgsExpressionParserRuleCall_1_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_2() { return cNumberLiteralParserRuleCall_2; }
		
		//ValueRef
		public RuleCall getValueRefParserRuleCall_3() { return cValueRefParserRuleCall_3; }
	}
	public class RValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.RValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RValue:
		//	Constant | Field;
		@Override public ParserRule getRule() { return rule; }
		
		//Constant | Field
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//Field
		public RuleCall getFieldParserRuleCall_1() { return cFieldParserRuleCall_1; }
	}
	public class ValueRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ValueRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cValueAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cValueIndexedVariableCrossReference_0_0_0_0 = (CrossReference)cValueAssignment_0_0_0.eContents().get(0);
		private final RuleCall cValueIndexedVariableIDTerminalRuleCall_0_0_0_0_1 = (RuleCall)cValueIndexedVariableCrossReference_0_0_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cIndexAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_0_0_2_0 = (RuleCall)cIndexAssignment_0_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cValueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cValueScalarVariableCrossReference_0_1_0 = (CrossReference)cValueAssignment_0_1.eContents().get(0);
		private final RuleCall cValueScalarVariableIDTerminalRuleCall_0_1_0_1 = (RuleCall)cValueScalarVariableCrossReference_0_1_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final CrossReference cValueRValueCrossReference_0_2_0 = (CrossReference)cValueAssignment_0_2.eContents().get(0);
		private final RuleCall cValueRValueIDTerminalRuleCall_0_2_0_1 = (RuleCall)cValueRValueCrossReference_0_2_0.eContents().get(1);
		private final Assignment cBitWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBitWidthBitSizeSpecParserRuleCall_1_0 = (RuleCall)cBitWidthAssignment_1.eContents().get(0);
		
		//ValueRef:
		//	(value=[IndexedVariable] '[' index=Expression ']' | value=[ScalarVariable] |
		//	-> value=[RValue]) bitWidth=BitSizeSpec?;
		@Override public ParserRule getRule() { return rule; }
		
		//(value=[IndexedVariable] '[' index=Expression ']' | value=[ScalarVariable] | -> value=[RValue]) bitWidth=BitSizeSpec?
		public Group getGroup() { return cGroup; }
		
		//(value=[IndexedVariable] '[' index=Expression ']' | value=[ScalarVariable] | -> value=[RValue])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//value=[IndexedVariable] '[' index=Expression ']'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//value=[IndexedVariable]
		public Assignment getValueAssignment_0_0_0() { return cValueAssignment_0_0_0; }
		
		//[IndexedVariable]
		public CrossReference getValueIndexedVariableCrossReference_0_0_0_0() { return cValueIndexedVariableCrossReference_0_0_0_0; }
		
		//ID
		public RuleCall getValueIndexedVariableIDTerminalRuleCall_0_0_0_0_1() { return cValueIndexedVariableIDTerminalRuleCall_0_0_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0_1() { return cLeftSquareBracketKeyword_0_0_1; }
		
		//index=Expression
		public Assignment getIndexAssignment_0_0_2() { return cIndexAssignment_0_0_2; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_0_0_2_0() { return cIndexExpressionParserRuleCall_0_0_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_0_3() { return cRightSquareBracketKeyword_0_0_3; }
		
		//value=[ScalarVariable]
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//[ScalarVariable]
		public CrossReference getValueScalarVariableCrossReference_0_1_0() { return cValueScalarVariableCrossReference_0_1_0; }
		
		//ID
		public RuleCall getValueScalarVariableIDTerminalRuleCall_0_1_0_1() { return cValueScalarVariableIDTerminalRuleCall_0_1_0_1; }
		
		//-> value=[RValue]
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//[RValue]
		public CrossReference getValueRValueCrossReference_0_2_0() { return cValueRValueCrossReference_0_2_0; }
		
		//ID
		public RuleCall getValueRValueIDTerminalRuleCall_0_2_0_1() { return cValueRValueIDTerminalRuleCall_0_2_0_1; }
		
		//bitWidth=BitSizeSpec?
		public Assignment getBitWidthAssignment_1() { return cBitWidthAssignment_1; }
		
		//BitSizeSpec
		public RuleCall getBitWidthBitSizeSpecParserRuleCall_1_0() { return cBitWidthBitSizeSpecParserRuleCall_1_0; }
	}
	public class BitSizeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BitSizeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueNATURALTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cConstantAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cConstantConstantCrossReference_1_1_0 = (CrossReference)cConstantAssignment_1_1.eContents().get(0);
		private final RuleCall cConstantConstantIDTerminalRuleCall_1_1_0_1 = (RuleCall)cConstantConstantCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BitSizeSpec:
		//	'{' (value=NATURAL | constant=[Constant]) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (value=NATURAL | constant=[Constant]) '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(value=NATURAL | constant=[Constant])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value=NATURAL
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//NATURAL
		public RuleCall getValueNATURALTerminalRuleCall_1_0_0() { return cValueNATURALTerminalRuleCall_1_0_0; }
		
		//constant=[Constant]
		public Assignment getConstantAssignment_1_1() { return cConstantAssignment_1_1; }
		
		//[Constant]
		public CrossReference getConstantConstantCrossReference_1_1_0() { return cConstantConstantCrossReference_1_1_0; }
		
		//ID
		public RuleCall getConstantConstantIDTerminalRuleCall_1_1_0_1() { return cConstantConstantIDTerminalRuleCall_1_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	
	public class DataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNSIGNEDUKeyword_1_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSIGNEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSIGNEDSKeyword_2_0 = (Keyword)cSIGNEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFLOATFKeyword_3_0 = (Keyword)cFLOATEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDOUBLEDKeyword_4_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cQUADEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cQUADQKeyword_5_0 = (Keyword)cQUADEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBOOLEANBKeyword_6_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum DataType:
		//	NONE | UNSIGNED="u" | SIGNED="s" | FLOAT="f" | DOUBLE="d" | QUAD="q" | BOOLEAN='b';
		public EnumRule getRule() { return rule; }
		
		//NONE | UNSIGNED="u" | SIGNED="s" | FLOAT="f" | DOUBLE="d" | QUAD="q" | BOOLEAN='b'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//"NONE"
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//UNSIGNED="u"
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_1() { return cUNSIGNEDEnumLiteralDeclaration_1; }
		
		//"u"
		public Keyword getUNSIGNEDUKeyword_1_0() { return cUNSIGNEDUKeyword_1_0; }
		
		//SIGNED="s"
		public EnumLiteralDeclaration getSIGNEDEnumLiteralDeclaration_2() { return cSIGNEDEnumLiteralDeclaration_2; }
		
		//"s"
		public Keyword getSIGNEDSKeyword_2_0() { return cSIGNEDSKeyword_2_0; }
		
		//FLOAT="f"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_3() { return cFLOATEnumLiteralDeclaration_3; }
		
		//"f"
		public Keyword getFLOATFKeyword_3_0() { return cFLOATFKeyword_3_0; }
		
		//DOUBLE="d"
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_4() { return cDOUBLEEnumLiteralDeclaration_4; }
		
		//"d"
		public Keyword getDOUBLEDKeyword_4_0() { return cDOUBLEDKeyword_4_0; }
		
		//QUAD="q"
		public EnumLiteralDeclaration getQUADEnumLiteralDeclaration_5() { return cQUADEnumLiteralDeclaration_5; }
		
		//"q"
		public Keyword getQUADQKeyword_5_0() { return cQUADQKeyword_5_0; }
		
		//BOOLEAN='b'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_6() { return cBOOLEANEnumLiteralDeclaration_6; }
		
		//'b'
		public Keyword getBOOLEANBKeyword_6_0() { return cBOOLEANBKeyword_6_0; }
	}
	public class RegAttributeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.RegAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPCIs_pcKeyword_0_0 = (Keyword)cPCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDELEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDELDeleteKeyword_1_0 = (Keyword)cDELEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RegAttribute:
		//	PC='is_pc' | DEL='delete';
		public EnumRule getRule() { return rule; }
		
		//PC='is_pc' | DEL='delete'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PC='is_pc'
		public EnumLiteralDeclaration getPCEnumLiteralDeclaration_0() { return cPCEnumLiteralDeclaration_0; }
		
		//'is_pc'
		public Keyword getPCIs_pcKeyword_0_0() { return cPCIs_pcKeyword_0_0; }
		
		//DEL='delete'
		public EnumLiteralDeclaration getDELEnumLiteralDeclaration_1() { return cDELEnumLiteralDeclaration_1; }
		
		//'delete'
		public Keyword getDELDeleteKeyword_1_0() { return cDELDeleteKeyword_1_0; }
	}
	public class ConstAttributeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ConstAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREG_WIDTHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREG_WIDTHIs_reg_withKeyword_0_0 = (Keyword)cREG_WIDTHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDR_WIDTHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDR_WIDTHIs_addr_widthKeyword_1_0 = (Keyword)cADDR_WIDTHEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConstAttribute:
		//	REG_WIDTH='is_reg_with' | ADDR_WIDTH='is_addr_width';
		public EnumRule getRule() { return rule; }
		
		//REG_WIDTH='is_reg_with' | ADDR_WIDTH='is_addr_width'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REG_WIDTH='is_reg_with'
		public EnumLiteralDeclaration getREG_WIDTHEnumLiteralDeclaration_0() { return cREG_WIDTHEnumLiteralDeclaration_0; }
		
		//'is_reg_with'
		public Keyword getREG_WIDTHIs_reg_withKeyword_0_0() { return cREG_WIDTHIs_reg_withKeyword_0_0; }
		
		//ADDR_WIDTH='is_addr_width'
		public EnumLiteralDeclaration getADDR_WIDTHEnumLiteralDeclaration_1() { return cADDR_WIDTHEnumLiteralDeclaration_1; }
		
		//'is_addr_width'
		public Keyword getADDR_WIDTHIs_addr_widthKeyword_1_0() { return cADDR_WIDTHIs_addr_widthKeyword_1_0; }
	}
	public class InstrAttributeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.InstrAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNO_CONTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNO_CONTNo_contKeyword_0_0 = (Keyword)cNO_CONTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONDCondKeyword_1_0 = (Keyword)cCONDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFLUSHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFLUSHFlushKeyword_2_0 = (Keyword)cFLUSHEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum InstrAttribute:
		//	NO_CONT='no_cont' | COND='cond' | FLUSH='flush';
		public EnumRule getRule() { return rule; }
		
		//NO_CONT='no_cont' | COND='cond' | FLUSH='flush'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NO_CONT='no_cont'
		public EnumLiteralDeclaration getNO_CONTEnumLiteralDeclaration_0() { return cNO_CONTEnumLiteralDeclaration_0; }
		
		//'no_cont'
		public Keyword getNO_CONTNo_contKeyword_0_0() { return cNO_CONTNo_contKeyword_0_0; }
		
		//COND='cond'
		public EnumLiteralDeclaration getCONDEnumLiteralDeclaration_1() { return cCONDEnumLiteralDeclaration_1; }
		
		//'cond'
		public Keyword getCONDCondKeyword_1_0() { return cCONDCondKeyword_1_0; }
		
		//FLUSH='flush'
		public EnumLiteralDeclaration getFLUSHEnumLiteralDeclaration_2() { return cFLUSHEnumLiteralDeclaration_2; }
		
		//'flush'
		public Keyword getFLUSHFlushKeyword_2_0() { return cFLUSHFlushKeyword_2_0; }
	}
	
	private final DescriptionContentElements pDescriptionContent;
	private final ImportElements pImport;
	private final ISAElements pISA;
	private final InstructionSetElements pInstructionSet;
	private final CoreDefElements pCoreDef;
	private final RangeSpecElements pRangeSpec;
	private final InstructionElements pInstruction;
	private final EncodingElements pEncoding;
	private final FieldElements pField;
	private final BitValueElements pBitValue;
	private final BitFieldElements pBitField;
	private final OperationElements pOperation;
	private final StatementElements pStatement;
	private final AssignmentElements pAssignment;
	private final ConditionalStmtElements pConditionalStmt;
	private final DirectCodeElements pDirectCode;
	private final ProcedureElements pProcedure;
	private final ConstantElements pConstant;
	private final ConstantDefElements pConstantDef;
	private final ConstantDeclElements pConstantDecl;
	private final ConstantDefaultElements pConstantDefault;
	private final VariableElements pVariable;
	private final IndexedVariableElements pIndexedVariable;
	private final ScalarVariableElements pScalarVariable;
	private final RegisterVariableElements pRegisterVariable;
	private final AddressSpaceElements pAddressSpace;
	private final RegisterFileElements pRegisterFile;
	private final RegisterElements pRegister;
	private final RegisterAliasElements pRegisterAlias;
	private final ScalarElements pScalar;
	private final ScalarBaseElements pScalarBase;
	private final NumberLiteralElements pNumberLiteral;
	private final ExpressionElements pExpression;
	private final BooleanOrExprElements pBooleanOrExpr;
	private final BooleanAndExprElements pBooleanAndExpr;
	private final BitOrExprElements pBitOrExpr;
	private final BitXOrExprElements pBitXOrExpr;
	private final BitAndExprElements pBitAndExpr;
	private final EqualityExprElements pEqualityExpr;
	private final ComparisonExprElements pComparisonExpr;
	private final ShiftExprElements pShiftExpr;
	private final AdditionExprElements pAdditionExpr;
	private final MultiplicationExprElements pMultiplicationExpr;
	private final UnitaryExprElements pUnitaryExpr;
	private final TypeConvElements pTypeConv;
	private final PrimaryElements pPrimary;
	private final RValueElements pRValue;
	private final ValueRefElements pValueRef;
	private final BitSizeSpecElements pBitSizeSpec;
	private final DataTypeElements eDataType;
	private final RegAttributeElements eRegAttribute;
	private final ConstAttributeElements eConstAttribute;
	private final InstrAttributeElements eInstrAttribute;
	private final TerminalRule tPROCEDURENAME;
	private final TerminalRule tFUNCTIONNAME;
	private final TerminalRule tBVAL;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tNATURAL;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CoreDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDescriptionContent = new DescriptionContentElements();
		this.pImport = new ImportElements();
		this.pISA = new ISAElements();
		this.pInstructionSet = new InstructionSetElements();
		this.pCoreDef = new CoreDefElements();
		this.pRangeSpec = new RangeSpecElements();
		this.pInstruction = new InstructionElements();
		this.pEncoding = new EncodingElements();
		this.pField = new FieldElements();
		this.pBitValue = new BitValueElements();
		this.pBitField = new BitFieldElements();
		this.pOperation = new OperationElements();
		this.pStatement = new StatementElements();
		this.pAssignment = new AssignmentElements();
		this.pConditionalStmt = new ConditionalStmtElements();
		this.pDirectCode = new DirectCodeElements();
		this.pProcedure = new ProcedureElements();
		this.pConstant = new ConstantElements();
		this.pConstantDef = new ConstantDefElements();
		this.pConstantDecl = new ConstantDeclElements();
		this.pConstantDefault = new ConstantDefaultElements();
		this.pVariable = new VariableElements();
		this.pIndexedVariable = new IndexedVariableElements();
		this.pScalarVariable = new ScalarVariableElements();
		this.pRegisterVariable = new RegisterVariableElements();
		this.pAddressSpace = new AddressSpaceElements();
		this.pRegisterFile = new RegisterFileElements();
		this.pRegister = new RegisterElements();
		this.pRegisterAlias = new RegisterAliasElements();
		this.pScalar = new ScalarElements();
		this.pScalarBase = new ScalarBaseElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pExpression = new ExpressionElements();
		this.pBooleanOrExpr = new BooleanOrExprElements();
		this.pBooleanAndExpr = new BooleanAndExprElements();
		this.pBitOrExpr = new BitOrExprElements();
		this.pBitXOrExpr = new BitXOrExprElements();
		this.pBitAndExpr = new BitAndExprElements();
		this.pEqualityExpr = new EqualityExprElements();
		this.pComparisonExpr = new ComparisonExprElements();
		this.pShiftExpr = new ShiftExprElements();
		this.pAdditionExpr = new AdditionExprElements();
		this.pMultiplicationExpr = new MultiplicationExprElements();
		this.pUnitaryExpr = new UnitaryExprElements();
		this.pTypeConv = new TypeConvElements();
		this.pPrimary = new PrimaryElements();
		this.pRValue = new RValueElements();
		this.pValueRef = new ValueRefElements();
		this.pBitSizeSpec = new BitSizeSpecElements();
		this.eDataType = new DataTypeElements();
		this.eRegAttribute = new RegAttributeElements();
		this.eConstAttribute = new ConstAttributeElements();
		this.eInstrAttribute = new InstrAttributeElements();
		this.tPROCEDURENAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.PROCEDURENAME");
		this.tFUNCTIONNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.FUNCTIONNAME");
		this.tBVAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BVAL");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BOOLEAN");
		this.tNATURAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.NATURAL");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.minres.coredsl.CoreDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DescriptionContent:
	//	imports+=Import*
	//	definitions+=ISA+;
	public DescriptionContentElements getDescriptionContentAccess() {
		return pDescriptionContent;
	}
	
	public ParserRule getDescriptionContentRule() {
		return getDescriptionContentAccess().getRule();
	}
	
	//Import:
	//	'import' importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ISA:
	//	InstructionSet | CoreDef;
	public ISAElements getISAAccess() {
		return pISA;
	}
	
	public ParserRule getISARule() {
		return getISAAccess().getRule();
	}
	
	//InstructionSet:
	//	'InsructionSet' name=ID ('extends' superType=[InstructionSet])? '{' ('constants' '{' constants+=ConstantDecl (','
	//	constants+=ConstantDecl)* '}')? ('address_spaces' '{' spaces+=AddressSpace (',' spaces+=AddressSpace)* '}')?
	//	('registers' '{' regs+=(Register | RegisterFile | RegisterAlias) (',' regs+=(Register | RegisterFile |
	//	RegisterAlias))* '}')? ('instructions' '{' instr+=Instruction+ '}')?
	//	'}';
	public InstructionSetElements getInstructionSetAccess() {
		return pInstructionSet;
	}
	
	public ParserRule getInstructionSetRule() {
		return getInstructionSetAccess().getRule();
	}
	
	//CoreDef:
	//	'Core' name=ID ('provides' contributingType+=[InstructionSet] (',' contributingType+=[InstructionSet])*)? '{'
	//	('template' ':' templateName=STRING ';')? ('constants' '{' constants+=ConstantDef+ '}')? ('address_spaces' '{'
	//	spaces+=AddressSpace (',' spaces+=AddressSpace)* '}')? ('registers' '{' regs+=(Register | RegisterFile |
	//	RegisterAlias) (',' regs+=(Register | RegisterFile | RegisterAlias))* '}')? ('instructions' '{' instr+=Instruction+
	//	'}')?
	//	'}';
	public CoreDefElements getCoreDefAccess() {
		return pCoreDef;
	}
	
	public ParserRule getCoreDefRule() {
		return getCoreDefAccess().getRule();
	}
	
	//RangeSpec:
	//	'[' left=NATURAL ':' right=NATURAL ']';
	public RangeSpecElements getRangeSpecAccess() {
		return pRangeSpec;
	}
	
	public ParserRule getRangeSpecRule() {
		return getRangeSpecAccess().getRule();
	}
	
	//Instruction:
	//	name=ID ('(' attributes+=InstrAttribute (',' attributes+=InstrAttribute)* ')')? '{' ('encoding' ':' encoding=Encoding
	//	';') & ('args_disass' ':' disass=STRING ';')?
	//	operation=Operation? '}';
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Encoding:
	//	fields+=Field ('|' fields+=Field)*;
	public EncodingElements getEncodingAccess() {
		return pEncoding;
	}
	
	public ParserRule getEncodingRule() {
		return getEncodingAccess().getRule();
	}
	
	//Field:
	//	BitValue | BitField;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//BitValue:
	//	name=BVAL;
	public BitValueElements getBitValueAccess() {
		return pBitValue;
	}
	
	public ParserRule getBitValueRule() {
		return getBitValueAccess().getRule();
	}
	
	//BitField:
	//	name=ID bitRange=RangeSpec ("'"? type=DataType)?;
	public BitFieldElements getBitFieldAccess() {
		return pBitField;
	}
	
	public ParserRule getBitFieldRule() {
		return getBitFieldAccess().getRule();
	}
	
	//Operation:
	//	statements+=Statement+;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Statement:
	//	Assignment | ConditionalStmt | DirectCode | Procedure;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Assignment:
	//	({IndexedAssignment} to=[IndexedVariable] '[' index=Expression ']' | {RegisterAssignment} to=[RegisterVariable] |
	//	{ScalarAssignment} to=Scalar) bitWidth=BitSizeSpec? '<=' expression=Expression ';';
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//ConditionalStmt:
	//	'if' '(' cond=BooleanOrExpr ')' (thenStmts+=Statement | '{' thenStmts+=Statement+ '}') (=> 'else'
	//	(elseStmts+=Statement | '{' elseStmts+=Statement+ '}'))?;
	public ConditionalStmtElements getConditionalStmtAccess() {
		return pConditionalStmt;
	}
	
	public ParserRule getConditionalStmtRule() {
		return getConditionalStmtAccess().getRule();
	}
	
	//DirectCode:
	//	'C++' '{' code+=STRING code+=STRING* '}';
	public DirectCodeElements getDirectCodeAccess() {
		return pDirectCode;
	}
	
	public ParserRule getDirectCodeRule() {
		return getDirectCodeAccess().getRule();
	}
	
	//Procedure:
	//	name=PROCEDURENAME '(' args+=Expression (',' args+=Expression)* ')' ';';
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//Constant:
	//	ConstantDef | ConstantDecl;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//ConstantDef:
	//	name=ID ':=' value=NATURAL ('(' attributes+=ConstAttribute (',' attributes+=ConstAttribute)* ')')? ';';
	public ConstantDefElements getConstantDefAccess() {
		return pConstantDef;
	}
	
	public ParserRule getConstantDefRule() {
		return getConstantDefAccess().getRule();
	}
	
	//ConstantDecl Constant:
	//	name=ID constantDefault=ConstantDefault?;
	public ConstantDeclElements getConstantDeclAccess() {
		return pConstantDecl;
	}
	
	public ParserRule getConstantDeclRule() {
		return getConstantDeclAccess().getRule();
	}
	
	//ConstantDefault:
	//	':=' defaultValue=NATURAL;
	public ConstantDefaultElements getConstantDefaultAccess() {
		return pConstantDefault;
	}
	
	public ParserRule getConstantDefaultRule() {
		return getConstantDefaultAccess().getRule();
	}
	
	//Variable:
	//	IndexedVariable | ScalarVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//IndexedVariable:
	//	AddressSpace | RegisterFile;
	public IndexedVariableElements getIndexedVariableAccess() {
		return pIndexedVariable;
	}
	
	public ParserRule getIndexedVariableRule() {
		return getIndexedVariableAccess().getRule();
	}
	
	//ScalarVariable:
	//	RegisterVariable | Scalar;
	public ScalarVariableElements getScalarVariableAccess() {
		return pScalarVariable;
	}
	
	public ParserRule getScalarVariableRule() {
		return getScalarVariableAccess().getRule();
	}
	
	//RegisterVariable:
	//	Register | RegisterAlias;
	public RegisterVariableElements getRegisterVariableAccess() {
		return pRegisterVariable;
	}
	
	public ParserRule getRegisterVariableRule() {
		return getRegisterVariableAccess().getRule();
	}
	
	//AddressSpace:
	//	name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']';
	public AddressSpaceElements getAddressSpaceAccess() {
		return pAddressSpace;
	}
	
	public ParserRule getAddressSpaceRule() {
		return getAddressSpaceAccess().getRule();
	}
	
	//RegisterFile:
	//	(-> range=RangeSpec name=ID) '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']' ('(' attributes+=RegAttribute (','
	//	attributes+=RegAttribute)* ')')?;
	public RegisterFileElements getRegisterFileAccess() {
		return pRegisterFile;
	}
	
	public ParserRule getRegisterFileRule() {
		return getRegisterFileAccess().getRule();
	}
	
	//Register:
	//	name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']' ('(' attributes+=RegAttribute (','
	//	attributes+=RegAttribute)* ')')?;
	public RegisterElements getRegisterAccess() {
		return pRegister;
	}
	
	public ParserRule getRegisterRule() {
		return getRegisterAccess().getRule();
	}
	
	//RegisterAlias:
	//	'alias' name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']' ('(' attributes+=RegAttribute (','
	//	attributes+=RegAttribute)* ')')? 'is' (original=[Register] | original=[RegisterFile] '[' (index=NumberLiteral |
	//	index=ValueRef) ']');
	public RegisterAliasElements getRegisterAliasAccess() {
		return pRegisterAlias;
	}
	
	public ParserRule getRegisterAliasRule() {
		return getRegisterAliasAccess().getRule();
	}
	
	//Scalar:
	//	'val' name=ID '[' (bitSize=NATURAL | bitSizeConst=[Constant]) ']';
	public ScalarElements getScalarAccess() {
		return pScalar;
	}
	
	public ParserRule getScalarRule() {
		return getScalarAccess().getRule();
	}
	
	//// dummy rule to add a property
	//ScalarBase Scalar:
	//	{Scalar} determined?='is_determined';
	public ScalarBaseElements getScalarBaseAccess() {
		return pScalarBase;
	}
	
	public ParserRule getScalarBaseRule() {
		return getScalarBaseAccess().getRule();
	}
	
	//NumberLiteral:
	//	value=NATURAL;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//Expression:
	//	BooleanOrExpr;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BooleanOrExpr Expression:
	//	BooleanAndExpr ({BooleanExpr.left=current} op='||' right=BooleanAndExpr)*;
	public BooleanOrExprElements getBooleanOrExprAccess() {
		return pBooleanOrExpr;
	}
	
	public ParserRule getBooleanOrExprRule() {
		return getBooleanOrExprAccess().getRule();
	}
	
	//BooleanAndExpr Expression:
	//	BitOrExpr ({BooleanExpr.left=current} op='&&' right=BitOrExpr)*;
	public BooleanAndExprElements getBooleanAndExprAccess() {
		return pBooleanAndExpr;
	}
	
	public ParserRule getBooleanAndExprRule() {
		return getBooleanAndExprAccess().getRule();
	}
	
	//BitOrExpr Expression:
	//	BitXOrExpr ({BitExpr.left=current} op='|' right=BitXOrExpr)*;
	public BitOrExprElements getBitOrExprAccess() {
		return pBitOrExpr;
	}
	
	public ParserRule getBitOrExprRule() {
		return getBitOrExprAccess().getRule();
	}
	
	//BitXOrExpr Expression:
	//	BitAndExpr ({BitExpr.left=current} op='^' right=BitAndExpr)*;
	public BitXOrExprElements getBitXOrExprAccess() {
		return pBitXOrExpr;
	}
	
	public ParserRule getBitXOrExprRule() {
		return getBitXOrExprAccess().getRule();
	}
	
	//BitAndExpr Expression:
	//	EqualityExpr ({BitExpr.left=current} op='&' right=EqualityExpr)*;
	public BitAndExprElements getBitAndExprAccess() {
		return pBitAndExpr;
	}
	
	public ParserRule getBitAndExprRule() {
		return getBitAndExprAccess().getRule();
	}
	
	//EqualityExpr Expression:
	//	ComparisonExpr ({ComparisonExpr.left=current} op=('==' | '!=') right=ComparisonExpr)*;
	public EqualityExprElements getEqualityExprAccess() {
		return pEqualityExpr;
	}
	
	public ParserRule getEqualityExprRule() {
		return getEqualityExprAccess().getRule();
	}
	
	//ComparisonExpr Expression:
	//	ShiftExpr ({ComparisonExpr.left=current} op=('<' | '>' | '<=' | '>=') right=ShiftExpr)*;
	public ComparisonExprElements getComparisonExprAccess() {
		return pComparisonExpr;
	}
	
	public ParserRule getComparisonExprRule() {
		return getComparisonExprAccess().getRule();
	}
	
	//ShiftExpr Expression:
	//	AdditionExpr ({ShiftExpr.left=current} op=('<<' | '>>') right=AdditionExpr)*;
	public ShiftExprElements getShiftExprAccess() {
		return pShiftExpr;
	}
	
	public ParserRule getShiftExprRule() {
		return getShiftExprAccess().getRule();
	}
	
	//AdditionExpr Expression:
	//	MultiplicationExpr ({AdditionExpr.left=current} op=('+' | '-') right=MultiplicationExpr)*;
	public AdditionExprElements getAdditionExprAccess() {
		return pAdditionExpr;
	}
	
	public ParserRule getAdditionExprRule() {
		return getAdditionExprAccess().getRule();
	}
	
	//MultiplicationExpr Expression:
	//	UnitaryExpr ({MultiplicationExpr.left=current} op=('*' | '/' | '%') right=UnitaryExpr)*;
	public MultiplicationExprElements getMultiplicationExprAccess() {
		return pMultiplicationExpr;
	}
	
	public ParserRule getMultiplicationExprRule() {
		return getMultiplicationExprAccess().getRule();
	}
	
	//UnitaryExpr Expression:
	//	TypeConv | {UnitaryExpr} op=('-' | '+' | '~' | '!') expr=UnitaryExpr;
	public UnitaryExprElements getUnitaryExprAccess() {
		return pUnitaryExpr;
	}
	
	public ParserRule getUnitaryExprRule() {
		return getUnitaryExprAccess().getRule();
	}
	
	//TypeConv Expression:
	//	Primary ({TypeConv.expr=current} "'"? type=DataType)?;
	public TypeConvElements getTypeConvAccess() {
		return pTypeConv;
	}
	
	public ParserRule getTypeConvRule() {
		return getTypeConvAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | {Function} name=FUNCTIONNAME '(' (args+=Expression (',' args+=Expression)*)? ')' | NumberLiteral
	//	| ValueRef;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//RValue:
	//	Constant | Field;
	public RValueElements getRValueAccess() {
		return pRValue;
	}
	
	public ParserRule getRValueRule() {
		return getRValueAccess().getRule();
	}
	
	//ValueRef:
	//	(value=[IndexedVariable] '[' index=Expression ']' | value=[ScalarVariable] |
	//	-> value=[RValue]) bitWidth=BitSizeSpec?;
	public ValueRefElements getValueRefAccess() {
		return pValueRef;
	}
	
	public ParserRule getValueRefRule() {
		return getValueRefAccess().getRule();
	}
	
	//BitSizeSpec:
	//	'{' (value=NATURAL | constant=[Constant]) '}';
	public BitSizeSpecElements getBitSizeSpecAccess() {
		return pBitSizeSpec;
	}
	
	public ParserRule getBitSizeSpecRule() {
		return getBitSizeSpecAccess().getRule();
	}
	
	//enum DataType:
	//	NONE | UNSIGNED="u" | SIGNED="s" | FLOAT="f" | DOUBLE="d" | QUAD="q" | BOOLEAN='b';
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//enum RegAttribute:
	//	PC='is_pc' | DEL='delete';
	public RegAttributeElements getRegAttributeAccess() {
		return eRegAttribute;
	}
	
	public EnumRule getRegAttributeRule() {
		return getRegAttributeAccess().getRule();
	}
	
	//enum ConstAttribute:
	//	REG_WIDTH='is_reg_with' | ADDR_WIDTH='is_addr_width';
	public ConstAttributeElements getConstAttributeAccess() {
		return eConstAttribute;
	}
	
	public EnumRule getConstAttributeRule() {
		return getConstAttributeAccess().getRule();
	}
	
	//enum InstrAttribute:
	//	NO_CONT='no_cont' | COND='cond' | FLUSH='flush';
	public InstrAttributeElements getInstrAttributeAccess() {
		return eInstrAttribute;
	}
	
	public EnumRule getInstrAttributeRule() {
		return getInstrAttributeAccess().getRule();
	}
	
	//terminal PROCEDURENAME:
	//	'raise' | 'leave' | 'wait' | 'dispatch_' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '.')*;
	public TerminalRule getPROCEDURENAMERule() {
		return tPROCEDURENAME;
	}
	
	//terminal FUNCTIONNAME:
	//	'sext' | 'zext' | 'choose' | 'shll' | 'shrl' | 'shra' | 'fdispatch_' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z'
	//	| '_' | '0'..'9' | '.')*;
	public TerminalRule getFUNCTIONNAMERule() {
		return tFUNCTIONNAME;
	}
	
	//terminal BVAL:
	//	'b' '0'..'9'+;
	public TerminalRule getBVALRule() {
		return tBVAL;
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal NATURAL returns ecore::EBigInteger:
	//	('0' | '1'..'9' ('_'? '0'..'9')*) | ('0b' | '0B') '0'..'1' ('_'? '0'..'1')* | ('0x' | '0X') ('0'..'9' | 'a'..'f' |
	//	'A'..'F') ('_'? ('0'..'9' | 'a'..'f' | 'A'..'F'))* | '0' '_'? '0'..'7' ('_'? '0'..'7')*;
	public TerminalRule getNATURALRule() {
		return tNATURAL;
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	'this one has been deactivated';
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '.')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
