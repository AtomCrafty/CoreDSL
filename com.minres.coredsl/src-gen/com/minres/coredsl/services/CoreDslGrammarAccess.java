/*
 * generated by Xtext 2.22.0
 */
package com.minres.coredsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CoreDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DescriptionContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DescriptionContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsISAParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		
		//DescriptionContent:
		//	imports+=Import* definitions+=ISA+;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import* definitions+=ISA+
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//definitions+=ISA+
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }
		
		//ISA
		public RuleCall getDefinitionsISAParserRuleCall_1_0() { return cDefinitionsISAParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class ISAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ISA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCoreDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ISA:
		//	InstructionSet
		//	| CoreDef;
		@Override public ParserRule getRule() { return rule; }
		
		//InstructionSet | CoreDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InstructionSet
		public RuleCall getInstructionSetParserRuleCall_0() { return cInstructionSetParserRuleCall_0; }
		
		//CoreDef
		public RuleCall getCoreDefParserRuleCall_1() { return cCoreDefParserRuleCall_1; }
	}
	public class InstructionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.InstructionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstructionSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeInstructionSetCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeInstructionSetIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeInstructionSetCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstantsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConstantsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConstantsDeclarationParserRuleCall_4_2_0 = (RuleCall)cConstantsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAddress_spacesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cSpacesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSpacesDeclarationParserRuleCall_5_2_0 = (RuleCall)cSpacesAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRegistersKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRegsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRegsDeclarationParserRuleCall_6_2_0 = (RuleCall)cRegsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFunctionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFuncAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFuncFunctionDefinitionParserRuleCall_7_2_0 = (RuleCall)cFuncAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cInstructionsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cInstrAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cInstrInstructionParserRuleCall_8_2_0 = (RuleCall)cInstrAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//InstructionSet:
		//	'InstructionSet' name=ID ('extends' superType=[InstructionSet])? '{' ('constants' '{' constants+=Declaration+ '}')?
		//	('address_spaces' '{' spaces+=Declaration+ '}')? ('registers' '{' regs+=Declaration+ '}')? ('functions' '{'
		//	func+=FunctionDefinition+ '}')? ('instructions' '{' instr+=Instruction+ '}')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'InstructionSet' name=ID ('extends' superType=[InstructionSet])? '{' ('constants' '{' constants+=Declaration+ '}')?
		//('address_spaces' '{' spaces+=Declaration+ '}')? ('registers' '{' regs+=Declaration+ '}')? ('functions' '{'
		//func+=FunctionDefinition+ '}')? ('instructions' '{' instr+=Instruction+ '}') '}'
		public Group getGroup() { return cGroup; }
		
		//'InstructionSet'
		public Keyword getInstructionSetKeyword_0() { return cInstructionSetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[InstructionSet])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[InstructionSet]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[InstructionSet]
		public CrossReference getSuperTypeInstructionSetCrossReference_2_1_0() { return cSuperTypeInstructionSetCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeInstructionSetIDTerminalRuleCall_2_1_0_1() { return cSuperTypeInstructionSetIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('constants' '{' constants+=Declaration+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'constants'
		public Keyword getConstantsKeyword_4_0() { return cConstantsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//constants+=Declaration+
		public Assignment getConstantsAssignment_4_2() { return cConstantsAssignment_4_2; }
		
		//Declaration
		public RuleCall getConstantsDeclarationParserRuleCall_4_2_0() { return cConstantsDeclarationParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
		
		//('address_spaces' '{' spaces+=Declaration+ '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'address_spaces'
		public Keyword getAddress_spacesKeyword_5_0() { return cAddress_spacesKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//spaces+=Declaration+
		public Assignment getSpacesAssignment_5_2() { return cSpacesAssignment_5_2; }
		
		//Declaration
		public RuleCall getSpacesDeclarationParserRuleCall_5_2_0() { return cSpacesDeclarationParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//('registers' '{' regs+=Declaration+ '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'registers'
		public Keyword getRegistersKeyword_6_0() { return cRegistersKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//regs+=Declaration+
		public Assignment getRegsAssignment_6_2() { return cRegsAssignment_6_2; }
		
		//Declaration
		public RuleCall getRegsDeclarationParserRuleCall_6_2_0() { return cRegsDeclarationParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//('functions' '{' func+=FunctionDefinition+ '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'functions'
		public Keyword getFunctionsKeyword_7_0() { return cFunctionsKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//func+=FunctionDefinition+
		public Assignment getFuncAssignment_7_2() { return cFuncAssignment_7_2; }
		
		//FunctionDefinition
		public RuleCall getFuncFunctionDefinitionParserRuleCall_7_2_0() { return cFuncFunctionDefinitionParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//('instructions' '{' instr+=Instruction+ '}')
		public Group getGroup_8() { return cGroup_8; }
		
		//'instructions'
		public Keyword getInstructionsKeyword_8_0() { return cInstructionsKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//instr+=Instruction+
		public Assignment getInstrAssignment_8_2() { return cInstrAssignment_8_2; }
		
		//Instruction
		public RuleCall getInstrInstructionParserRuleCall_8_2_0() { return cInstrInstructionParserRuleCall_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class CoreDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.CoreDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cProvidesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContributingTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cContributingTypeInstructionSetCrossReference_2_1_0 = (CrossReference)cContributingTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cContributingTypeInstructionSetIDTerminalRuleCall_2_1_0_1 = (RuleCall)cContributingTypeInstructionSetCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cContributingTypeAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cContributingTypeInstructionSetCrossReference_2_2_1_0 = (CrossReference)cContributingTypeAssignment_2_2_1.eContents().get(0);
		private final RuleCall cContributingTypeInstructionSetIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cContributingTypeInstructionSetCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstantsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConstantsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConstantsDeclarationParserRuleCall_4_2_0 = (RuleCall)cConstantsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAddress_spacesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cSpacesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSpacesDeclarationParserRuleCall_5_2_0 = (RuleCall)cSpacesAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRegistersKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRegsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRegsDeclarationParserRuleCall_6_2_0 = (RuleCall)cRegsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInstructionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cInstrAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cInstrInstructionParserRuleCall_7_2_0 = (RuleCall)cInstrAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CoreDef:
		//	'Core' name=ID ('provides' contributingType+=[InstructionSet] (',' contributingType+=[InstructionSet])*)? '{'
		//	('constants' '{' constants+=Declaration+ '}')? ('address_spaces' '{' spaces+=Declaration+ '}')? ('registers' '{'
		//	regs+=Declaration+ '}')? ('instructions' '{' instr+=Instruction+ '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Core' name=ID ('provides' contributingType+=[InstructionSet] (',' contributingType+=[InstructionSet])*)? '{'
		//('constants' '{' constants+=Declaration+ '}')? ('address_spaces' '{' spaces+=Declaration+ '}')? ('registers' '{'
		//regs+=Declaration+ '}')? ('instructions' '{' instr+=Instruction+ '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'Core'
		public Keyword getCoreKeyword_0() { return cCoreKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('provides' contributingType+=[InstructionSet] (',' contributingType+=[InstructionSet])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'provides'
		public Keyword getProvidesKeyword_2_0() { return cProvidesKeyword_2_0; }
		
		//contributingType+=[InstructionSet]
		public Assignment getContributingTypeAssignment_2_1() { return cContributingTypeAssignment_2_1; }
		
		//[InstructionSet]
		public CrossReference getContributingTypeInstructionSetCrossReference_2_1_0() { return cContributingTypeInstructionSetCrossReference_2_1_0; }
		
		//ID
		public RuleCall getContributingTypeInstructionSetIDTerminalRuleCall_2_1_0_1() { return cContributingTypeInstructionSetIDTerminalRuleCall_2_1_0_1; }
		
		//(',' contributingType+=[InstructionSet])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//contributingType+=[InstructionSet]
		public Assignment getContributingTypeAssignment_2_2_1() { return cContributingTypeAssignment_2_2_1; }
		
		//[InstructionSet]
		public CrossReference getContributingTypeInstructionSetCrossReference_2_2_1_0() { return cContributingTypeInstructionSetCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getContributingTypeInstructionSetIDTerminalRuleCall_2_2_1_0_1() { return cContributingTypeInstructionSetIDTerminalRuleCall_2_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('constants' '{' constants+=Declaration+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'constants'
		public Keyword getConstantsKeyword_4_0() { return cConstantsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//constants+=Declaration+
		public Assignment getConstantsAssignment_4_2() { return cConstantsAssignment_4_2; }
		
		//Declaration
		public RuleCall getConstantsDeclarationParserRuleCall_4_2_0() { return cConstantsDeclarationParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
		
		//('address_spaces' '{' spaces+=Declaration+ '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'address_spaces'
		public Keyword getAddress_spacesKeyword_5_0() { return cAddress_spacesKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//spaces+=Declaration+
		public Assignment getSpacesAssignment_5_2() { return cSpacesAssignment_5_2; }
		
		//Declaration
		public RuleCall getSpacesDeclarationParserRuleCall_5_2_0() { return cSpacesDeclarationParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//('registers' '{' regs+=Declaration+ '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'registers'
		public Keyword getRegistersKeyword_6_0() { return cRegistersKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//regs+=Declaration+
		public Assignment getRegsAssignment_6_2() { return cRegsAssignment_6_2; }
		
		//Declaration
		public RuleCall getRegsDeclarationParserRuleCall_6_2_0() { return cRegsDeclarationParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//('instructions' '{' instr+=Instruction+ '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'instructions'
		public Keyword getInstructionsKeyword_7_0() { return cInstructionsKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//instr+=Instruction+
		public Assignment getInstrAssignment_7_2() { return cInstrAssignment_7_2; }
		
		//Instruction
		public RuleCall getInstrInstructionParserRuleCall_7_2_0() { return cInstrInstructionParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesInstrAttributeEnumRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAttributesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAttributesInstrAttributeEnumRuleCall_1_2_1_0 = (RuleCall)cAttributesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEncodingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cEncodingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEncodingEncodingParserRuleCall_3_2_0 = (RuleCall)cEncodingAssignment_3_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cArgs_disassKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDisassAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDisassSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cDisassAssignment_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBehaviorKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cBehaviorAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cBehaviorCompoundStatementParserRuleCall_5_2_0 = (RuleCall)cBehaviorAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Instruction:
		//	name=ID ('[[' attributes+=InstrAttribute (',' attributes+=InstrAttribute)* ']]')? '{' ('encoding' ':'
		//	encoding=Encoding ';') ('args_disass' ':' disass=STRING ';')? ('behavior' ':' behavior=CompoundStatement)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('[[' attributes+=InstrAttribute (',' attributes+=InstrAttribute)* ']]')? '{' ('encoding' ':' encoding=Encoding
		//';') ('args_disass' ':' disass=STRING ';')? ('behavior' ':' behavior=CompoundStatement) '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('[[' attributes+=InstrAttribute (',' attributes+=InstrAttribute)* ']]')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketLeftSquareBracketKeyword_1_0; }
		
		//attributes+=InstrAttribute
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }
		
		//InstrAttribute
		public RuleCall getAttributesInstrAttributeEnumRuleCall_1_1_0() { return cAttributesInstrAttributeEnumRuleCall_1_1_0; }
		
		//(',' attributes+=InstrAttribute)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//attributes+=InstrAttribute
		public Assignment getAttributesAssignment_1_2_1() { return cAttributesAssignment_1_2_1; }
		
		//InstrAttribute
		public RuleCall getAttributesInstrAttributeEnumRuleCall_1_2_1_0() { return cAttributesInstrAttributeEnumRuleCall_1_2_1_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_1_3() { return cRightSquareBracketRightSquareBracketKeyword_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('encoding' ':' encoding=Encoding ';')
		public Group getGroup_3() { return cGroup_3; }
		
		//'encoding'
		public Keyword getEncodingKeyword_3_0() { return cEncodingKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//encoding=Encoding
		public Assignment getEncodingAssignment_3_2() { return cEncodingAssignment_3_2; }
		
		//Encoding
		public RuleCall getEncodingEncodingParserRuleCall_3_2_0() { return cEncodingEncodingParserRuleCall_3_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }
		
		//('args_disass' ':' disass=STRING ';')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'args_disass'
		public Keyword getArgs_disassKeyword_4_0() { return cArgs_disassKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//disass=STRING
		public Assignment getDisassAssignment_4_2() { return cDisassAssignment_4_2; }
		
		//STRING
		public RuleCall getDisassSTRINGTerminalRuleCall_4_2_0() { return cDisassSTRINGTerminalRuleCall_4_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }
		
		//('behavior' ':' behavior=CompoundStatement)
		public Group getGroup_5() { return cGroup_5; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_5_0() { return cBehaviorKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//behavior=CompoundStatement
		public Assignment getBehaviorAssignment_5_2() { return cBehaviorAssignment_5_2; }
		
		//CompoundStatement
		public RuleCall getBehaviorCompoundStatementParserRuleCall_5_2_0() { return cBehaviorCompoundStatementParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EncodingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Encoding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_0_0 = (RuleCall)cFieldsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_1_1_0 = (RuleCall)cFieldsAssignment_1_1.eContents().get(0);
		
		//Encoding:
		//	fields+=Field ('|' fields+=Field)*;
		@Override public ParserRule getRule() { return rule; }
		
		//fields+=Field ('|' fields+=Field)*
		public Group getGroup() { return cGroup; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_0() { return cFieldsAssignment_0; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_0_0() { return cFieldsFieldParserRuleCall_0_0; }
		
		//('|' fields+=Field)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_1_1() { return cFieldsAssignment_1_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_1_1_0() { return cFieldsFieldParserRuleCall_1_1_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Field");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBitValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBitFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Field:
		//	BitValue
		//	| BitField;
		@Override public ParserRule getRule() { return rule; }
		
		//BitValue | BitField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BitValue
		public RuleCall getBitValueParserRuleCall_0() { return cBitValueParserRuleCall_0; }
		
		//BitField
		public RuleCall getBitFieldParserRuleCall_1() { return cBitFieldParserRuleCall_1; }
	}
	public class BitValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BitValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameBVALTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//BitValue:
		//	name=BVAL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=BVAL
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//BVAL
		public RuleCall getNameBVALTerminalRuleCall_0() { return cNameBVALTerminalRuleCall_0; }
	}
	public class BitFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BitField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cBitRangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBitRangeRangeSpecParserRuleCall_1_0 = (RuleCall)cBitRangeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cApostropheKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeBitfieldDataTypeEnumRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//BitField:
		//	name=ID bitRange=RangeSpec ("'"? type=BitfieldDataType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID bitRange=RangeSpec ("'"? type=BitfieldDataType)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//bitRange=RangeSpec
		public Assignment getBitRangeAssignment_1() { return cBitRangeAssignment_1; }
		
		//RangeSpec
		public RuleCall getBitRangeRangeSpecParserRuleCall_1_0() { return cBitRangeRangeSpecParserRuleCall_1_0; }
		
		//("'"? type=BitfieldDataType)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"'"?
		public Keyword getApostropheKeyword_2_0() { return cApostropheKeyword_2_0; }
		
		//type=BitfieldDataType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//BitfieldDataType
		public RuleCall getTypeBitfieldDataTypeEnumRuleCall_2_1_0() { return cTypeBitfieldDataTypeEnumRuleCall_2_1_0; }
	}
	public class RangeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.RangeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftNATURALTerminalRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightNATURALTerminalRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RangeSpec:
		//	'[' left=NATURAL ':' right=NATURAL ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' left=NATURAL ':' right=NATURAL ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//left=NATURAL
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//NATURAL
		public RuleCall getLeftNATURALTerminalRuleCall_1_0() { return cLeftNATURALTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//right=NATURAL
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//NATURAL
		public RuleCall getRightNATURALTerminalRuleCall_3_0() { return cRightNATURALTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExternExternKeyword_0_0 = (Keyword)cExternAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cParameterListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementCompoundStatementParserRuleCall_6_0 = (RuleCall)cStatementAssignment_6.eContents().get(0);
		
		//FunctionDefinition:
		//	extern?='extern'? type=TypeSpecifier name=ID '(' ParameterList ')' statement=CompoundStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//extern?='extern'? type=TypeSpecifier name=ID '(' ParameterList ')' statement=CompoundStatement
		public Group getGroup() { return cGroup; }
		
		//extern?='extern'?
		public Assignment getExternAssignment_0() { return cExternAssignment_0; }
		
		//'extern'
		public Keyword getExternExternKeyword_0_0() { return cExternExternKeyword_0_0; }
		
		//type=TypeSpecifier
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TypeSpecifier
		public RuleCall getTypeTypeSpecifierParserRuleCall_1_0() { return cTypeTypeSpecifierParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_4() { return cParameterListParserRuleCall_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//statement=CompoundStatement
		public Assignment getStatementAssignment_6() { return cStatementAssignment_6; }
		
		//CompoundStatement
		public RuleCall getStatementCompoundStatementParserRuleCall_6_0() { return cStatementCompoundStatementParserRuleCall_6_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsParameterDeclarationParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//fragment ParameterList:
		//	params+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//params+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*
		public Group getGroup() { return cGroup; }
		
		//params+=ParameterDeclaration
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }
		
		//ParameterDeclaration
		public RuleCall getParamsParameterDeclarationParserRuleCall_0_0() { return cParamsParameterDeclarationParserRuleCall_0_0; }
		
		//(',' parameters+=ParameterDeclaration)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_1_1_0() { return cParametersParameterDeclarationParserRuleCall_1_1_0; }
	}
	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeSpecifierParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDeclaratorAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDeclaratorDirectDeclaratorParserRuleCall_1_0_0 = (RuleCall)cDeclaratorAssignment_1_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDeclaratorAbstractDeclaratorParserRuleCall_1_1_0 = (RuleCall)cDeclaratorAssignment_1_1.eContents().get(0);
		
		//ParameterDeclaration:
		//	type=TypeSpecifier (declarator=DirectDeclarator
		//	| declarator=AbstractDeclarator)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=TypeSpecifier (declarator=DirectDeclarator | declarator=AbstractDeclarator)?
		public Group getGroup() { return cGroup; }
		
		//type=TypeSpecifier
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeSpecifier
		public RuleCall getTypeTypeSpecifierParserRuleCall_0_0() { return cTypeTypeSpecifierParserRuleCall_0_0; }
		
		//(declarator=DirectDeclarator | declarator=AbstractDeclarator)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//declarator=DirectDeclarator
		public Assignment getDeclaratorAssignment_1_0() { return cDeclaratorAssignment_1_0; }
		
		//DirectDeclarator
		public RuleCall getDeclaratorDirectDeclaratorParserRuleCall_1_0_0() { return cDeclaratorDirectDeclaratorParserRuleCall_1_0_0; }
		
		//declarator=AbstractDeclarator
		public Assignment getDeclaratorAssignment_1_1() { return cDeclaratorAssignment_1_1; }
		
		//AbstractDeclarator
		public RuleCall getDeclaratorAbstractDeclaratorParserRuleCall_1_1_0() { return cDeclaratorAbstractDeclaratorParserRuleCall_1_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompoundStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelectionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIterationStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJumpStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// Statements
		//Statement:
		//	CompoundStatement
		//	| ExpressionStatement
		//	| SelectionStatement
		//	| IterationStatement
		//	| JumpStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//CompoundStatement | ExpressionStatement | SelectionStatement | IterationStatement | JumpStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CompoundStatement
		public RuleCall getCompoundStatementParserRuleCall_0() { return cCompoundStatementParserRuleCall_0; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_1() { return cExpressionStatementParserRuleCall_1; }
		
		//SelectionStatement
		public RuleCall getSelectionStatementParserRuleCall_2() { return cSelectionStatementParserRuleCall_2; }
		
		//IterationStatement
		public RuleCall getIterationStatementParserRuleCall_3() { return cIterationStatementParserRuleCall_3; }
		
		//JumpStatement
		public RuleCall getJumpStatementParserRuleCall_4() { return cJumpStatementParserRuleCall_4; }
	}
	public class LabeledStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.LabeledStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConstExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConstExprConstantExpressionParserRuleCall_0_1_0 = (RuleCall)cConstExprAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cStmtAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cStmtStatementParserRuleCall_0_3_0 = (RuleCall)cStmtAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDefaultKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStmtAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStmtStatementParserRuleCall_1_2_0 = (RuleCall)cStmtAssignment_1_2.eContents().get(0);
		
		//LabeledStatement:
		//	'case' constExpr=ConstantExpression ':' stmt=Statement
		//	| 'default' ':' stmt=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' constExpr=ConstantExpression ':' stmt=Statement | 'default' ':' stmt=Statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'case' constExpr=ConstantExpression ':' stmt=Statement
		public Group getGroup_0() { return cGroup_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//constExpr=ConstantExpression
		public Assignment getConstExprAssignment_0_1() { return cConstExprAssignment_0_1; }
		
		//ConstantExpression
		public RuleCall getConstExprConstantExpressionParserRuleCall_0_1_0() { return cConstExprConstantExpressionParserRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//stmt=Statement
		public Assignment getStmtAssignment_0_3() { return cStmtAssignment_0_3; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_0_3_0() { return cStmtStatementParserRuleCall_0_3_0; }
		
		//'default' ':' stmt=Statement
		public Group getGroup_1() { return cGroup_1; }
		
		//'default'
		public Keyword getDefaultKeyword_1_0() { return cDefaultKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//stmt=Statement
		public Assignment getStmtAssignment_1_2() { return cStmtAssignment_1_2; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_1_2_0() { return cStmtStatementParserRuleCall_1_2_0; }
	}
	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.CompoundStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompoundStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsBlockItemParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CompoundStatement:
		//	{CompoundStatement} '{' items+=BlockItem* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CompoundStatement} '{' items+=BlockItem* '}'
		public Group getGroup() { return cGroup; }
		
		//{CompoundStatement}
		public Action getCompoundStatementAction_0() { return cCompoundStatementAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//items+=BlockItem*
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//BlockItem
		public RuleCall getItemsBlockItemParserRuleCall_2_0() { return cItemsBlockItemParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BlockItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BlockItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BlockItem:
		//	Statement
		//	| Declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//Statement | Declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_1() { return cDeclarationParserRuleCall_1; }
	}
	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ExpressionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAssignmentExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionStatement:
		//	{ExpressionStatement} expr=AssignmentExpression? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionStatement} expr=AssignmentExpression? ';'
		public Group getGroup() { return cGroup; }
		
		//{ExpressionStatement}
		public Action getExpressionStatementAction_0() { return cExpressionStatementAction_0; }
		
		//expr=AssignmentExpression?
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AssignmentExpression
		public RuleCall getExprAssignmentExpressionParserRuleCall_1_0() { return cExprAssignmentExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SelectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.SelectionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSwitchStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SelectionStatement:
		//	IfStatement
		//	| SwitchStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//IfStatement | SwitchStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }
		
		//SwitchStatement
		public RuleCall getSwitchStatementParserRuleCall_1() { return cSwitchStatementParserRuleCall_1; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondConditionalExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenStmtAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStmtStatementParserRuleCall_4_0 = (RuleCall)cThenStmtAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStmtAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStmtStatementParserRuleCall_5_1_0 = (RuleCall)cElseStmtAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	'if' '(' cond=ConditionalExpression ')' thenStmt=Statement (=> 'else' elseStmt=Statement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' cond=ConditionalExpression ')' thenStmt=Statement (=> 'else' elseStmt=Statement)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=ConditionalExpression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//ConditionalExpression
		public RuleCall getCondConditionalExpressionParserRuleCall_2_0() { return cCondConditionalExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenStmt=Statement
		public Assignment getThenStmtAssignment_4() { return cThenStmtAssignment_4; }
		
		//Statement
		public RuleCall getThenStmtStatementParserRuleCall_4_0() { return cThenStmtStatementParserRuleCall_4_0; }
		
		//(=> 'else' elseStmt=Statement)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseStmt=Statement
		public Assignment getElseStmtAssignment_5_1() { return cElseStmtAssignment_5_1; }
		
		//Statement
		public RuleCall getElseStmtStatementParserRuleCall_5_1_0() { return cElseStmtStatementParserRuleCall_5_1_0; }
	}
	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondConditionalExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cItemsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cItemsLabeledStatementParserRuleCall_5_0 = (RuleCall)cItemsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SwitchStatement:
		//	'switch' '(' cond=ConditionalExpression ')' '{' items+=LabeledStatement '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' '(' cond=ConditionalExpression ')' '{' items+=LabeledStatement '}'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=ConditionalExpression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//ConditionalExpression
		public RuleCall getCondConditionalExpressionParserRuleCall_2_0() { return cCondConditionalExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//items+=LabeledStatement
		public Assignment getItemsAssignment_5() { return cItemsAssignment_5; }
		
		//LabeledStatement
		public RuleCall getItemsLabeledStatementParserRuleCall_5_0() { return cItemsLabeledStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class IterationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.IterationStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cTypeWhileKeyword_0_0_0 = (Keyword)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCondAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCondConditionalExpressionParserRuleCall_0_2_0 = (RuleCall)cCondAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cStmtAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cStmtStatementParserRuleCall_0_4_0 = (RuleCall)cStmtAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTypeDoKeyword_1_0_0 = (Keyword)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cStmtAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStmtStatementParserRuleCall_1_1_0 = (RuleCall)cStmtAssignment_1_1.eContents().get(0);
		private final Keyword cWhileKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cCondAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cCondConditionalExpressionParserRuleCall_1_4_0 = (RuleCall)cCondAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cTypeForKeyword_2_0_0 = (Keyword)cTypeAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cForConditionParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStmtAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cStmtStatementParserRuleCall_2_4_0 = (RuleCall)cStmtAssignment_2_4.eContents().get(0);
		
		//IterationStatement:
		//	type='while' '(' cond=ConditionalExpression ')' stmt=Statement
		//	| type='do' stmt=Statement 'while' '(' cond=ConditionalExpression ')' ';'
		//	| type='for' '(' ForCondition ')' stmt=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//type='while' '(' cond=ConditionalExpression ')' stmt=Statement | type='do' stmt=Statement 'while' '('
		//cond=ConditionalExpression ')' ';' | type='for' '(' ForCondition ')' stmt=Statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type='while' '(' cond=ConditionalExpression ')' stmt=Statement
		public Group getGroup_0() { return cGroup_0; }
		
		//type='while'
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//'while'
		public Keyword getTypeWhileKeyword_0_0_0() { return cTypeWhileKeyword_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//cond=ConditionalExpression
		public Assignment getCondAssignment_0_2() { return cCondAssignment_0_2; }
		
		//ConditionalExpression
		public RuleCall getCondConditionalExpressionParserRuleCall_0_2_0() { return cCondConditionalExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//stmt=Statement
		public Assignment getStmtAssignment_0_4() { return cStmtAssignment_0_4; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_0_4_0() { return cStmtStatementParserRuleCall_0_4_0; }
		
		//type='do' stmt=Statement 'while' '(' cond=ConditionalExpression ')' ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//type='do'
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//'do'
		public Keyword getTypeDoKeyword_1_0_0() { return cTypeDoKeyword_1_0_0; }
		
		//stmt=Statement
		public Assignment getStmtAssignment_1_1() { return cStmtAssignment_1_1; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_1_1_0() { return cStmtStatementParserRuleCall_1_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_1_2() { return cWhileKeyword_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//cond=ConditionalExpression
		public Assignment getCondAssignment_1_4() { return cCondAssignment_1_4; }
		
		//ConditionalExpression
		public RuleCall getCondConditionalExpressionParserRuleCall_1_4_0() { return cCondConditionalExpressionParserRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
		
		//type='for' '(' ForCondition ')' stmt=Statement
		public Group getGroup_2() { return cGroup_2; }
		
		//type='for'
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//'for'
		public Keyword getTypeForKeyword_2_0_0() { return cTypeForKeyword_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//ForCondition
		public RuleCall getForConditionParserRuleCall_2_2() { return cForConditionParserRuleCall_2_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//stmt=Statement
		public Assignment getStmtAssignment_2_4() { return cStmtAssignment_2_4; }
		
		//Statement
		public RuleCall getStmtStatementParserRuleCall_2_4_0() { return cStmtStatementParserRuleCall_2_4_0; }
	}
	public class ForConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ForCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cStartDeclAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cStartDeclDeclarationParserRuleCall_0_0_0 = (RuleCall)cStartDeclAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cStartExprAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cStartExprExpressionParserRuleCall_0_1_0_0 = (RuleCall)cStartExprAssignment_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cEndExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEndExprConditionalExpressionParserRuleCall_1_0 = (RuleCall)cEndExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLoopExprsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLoopExprsAssignmentExpressionParserRuleCall_3_0_0 = (RuleCall)cLoopExprsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLoopExprsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLoopExprsAssignmentExpressionParserRuleCall_3_1_1_0 = (RuleCall)cLoopExprsAssignment_3_1_1.eContents().get(0);
		
		//fragment ForCondition:
		//	(startDecl=Declaration | startExpr=Expression? ';') endExpr=ConditionalExpression? ';'
		//	(loopExprs+=AssignmentExpression (',' loopExprs+=AssignmentExpression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(startDecl=Declaration | startExpr=Expression? ';') endExpr=ConditionalExpression? ';' (loopExprs+=AssignmentExpression
		//(',' loopExprs+=AssignmentExpression)*)?
		public Group getGroup() { return cGroup; }
		
		//(startDecl=Declaration | startExpr=Expression? ';')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//startDecl=Declaration
		public Assignment getStartDeclAssignment_0_0() { return cStartDeclAssignment_0_0; }
		
		//Declaration
		public RuleCall getStartDeclDeclarationParserRuleCall_0_0_0() { return cStartDeclDeclarationParserRuleCall_0_0_0; }
		
		//startExpr=Expression? ';'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//startExpr=Expression?
		public Assignment getStartExprAssignment_0_1_0() { return cStartExprAssignment_0_1_0; }
		
		//Expression
		public RuleCall getStartExprExpressionParserRuleCall_0_1_0_0() { return cStartExprExpressionParserRuleCall_0_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1_1() { return cSemicolonKeyword_0_1_1; }
		
		//endExpr=ConditionalExpression?
		public Assignment getEndExprAssignment_1() { return cEndExprAssignment_1; }
		
		//ConditionalExpression
		public RuleCall getEndExprConditionalExpressionParserRuleCall_1_0() { return cEndExprConditionalExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//(loopExprs+=AssignmentExpression (',' loopExprs+=AssignmentExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//loopExprs+=AssignmentExpression
		public Assignment getLoopExprsAssignment_3_0() { return cLoopExprsAssignment_3_0; }
		
		//AssignmentExpression
		public RuleCall getLoopExprsAssignmentExpressionParserRuleCall_3_0_0() { return cLoopExprsAssignmentExpressionParserRuleCall_3_0_0; }
		
		//(',' loopExprs+=AssignmentExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//loopExprs+=AssignmentExpression
		public Assignment getLoopExprsAssignment_3_1_1() { return cLoopExprsAssignment_3_1_1; }
		
		//AssignmentExpression
		public RuleCall getLoopExprsAssignmentExpressionParserRuleCall_3_1_1_0() { return cLoopExprsAssignmentExpressionParserRuleCall_3_1_1_0; }
	}
	public class JumpStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.JumpStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cTypeContinueKeyword_0_0_0 = (Keyword)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTypeBreakKeyword_1_0_0 = (Keyword)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cTypeReturnKeyword_2_0_0 = (Keyword)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprConditionalExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//JumpStatement:
		//	type='continue' ';'
		//	| type='break' ';'
		//	| type='return' expr=ConditionalExpression? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type='continue' ';' | type='break' ';' | type='return' expr=ConditionalExpression? ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type='continue' ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//type='continue'
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//'continue'
		public Keyword getTypeContinueKeyword_0_0_0() { return cTypeContinueKeyword_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//type='break' ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//type='break'
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//'break'
		public Keyword getTypeBreakKeyword_1_0_0() { return cTypeBreakKeyword_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//type='return' expr=ConditionalExpression? ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//type='return'
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//'return'
		public Keyword getTypeReturnKeyword_2_0_0() { return cTypeReturnKeyword_2_0_0; }
		
		//expr=ConditionalExpression?
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//ConditionalExpression
		public RuleCall getExprConditionalExpressionParserRuleCall_2_1_0() { return cExprConditionalExpressionParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeOrVarDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypedefDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// Declarations
		//Declaration:
		//	TypeOrVarDeclaration
		//	| TypedefDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeOrVarDeclaration | TypedefDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeOrVarDeclaration
		public RuleCall getTypeOrVarDeclarationParserRuleCall_0() { return cTypeOrVarDeclarationParserRuleCall_0; }
		
		//TypedefDeclaration
		public RuleCall getTypedefDeclarationParserRuleCall_1() { return cTypedefDeclarationParserRuleCall_1; }
	}
	public class TypeOrVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.TypeOrVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDeclarationSpecifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeBitSizeSpecifierParserRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInitAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInitInitDeclaratorParserRuleCall_3_0_0 = (RuleCall)cInitAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInitAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInitInitDeclaratorParserRuleCall_3_1_1_0 = (RuleCall)cInitAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TypeOrVarDeclaration:
		//	DeclarationSpecifier* type=TypeSpecifier size=BitSizeSpecifier? (init+=InitDeclarator (',' init+=InitDeclarator)*)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//DeclarationSpecifier* type=TypeSpecifier size=BitSizeSpecifier? (init+=InitDeclarator (',' init+=InitDeclarator)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//DeclarationSpecifier*
		public RuleCall getDeclarationSpecifierParserRuleCall_0() { return cDeclarationSpecifierParserRuleCall_0; }
		
		//type=TypeSpecifier
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TypeSpecifier
		public RuleCall getTypeTypeSpecifierParserRuleCall_1_0() { return cTypeTypeSpecifierParserRuleCall_1_0; }
		
		//size=BitSizeSpecifier?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }
		
		//BitSizeSpecifier
		public RuleCall getSizeBitSizeSpecifierParserRuleCall_2_0() { return cSizeBitSizeSpecifierParserRuleCall_2_0; }
		
		//(init+=InitDeclarator (',' init+=InitDeclarator)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//init+=InitDeclarator
		public Assignment getInitAssignment_3_0() { return cInitAssignment_3_0; }
		
		//InitDeclarator
		public RuleCall getInitInitDeclaratorParserRuleCall_3_0_0() { return cInitInitDeclaratorParserRuleCall_3_0_0; }
		
		//(',' init+=InitDeclarator)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//init+=InitDeclarator
		public Assignment getInitAssignment_3_1_1() { return cInitAssignment_3_1_1; }
		
		//InitDeclarator
		public RuleCall getInitInitDeclaratorParserRuleCall_3_1_1_0() { return cInitInitDeclaratorParserRuleCall_3_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TypedefDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.TypedefDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDeclarationSpecifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeSpecifierParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitInitDeclaratorParserRuleCall_3_0 = (RuleCall)cInitAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TypedefDeclaration:
		//	'typedef' DeclarationSpecifier* type=TypeSpecifier init+=InitDeclarator ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'typedef' DeclarationSpecifier* type=TypeSpecifier init+=InitDeclarator ';'
		public Group getGroup() { return cGroup; }
		
		//'typedef'
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }
		
		//DeclarationSpecifier*
		public RuleCall getDeclarationSpecifierParserRuleCall_1() { return cDeclarationSpecifierParserRuleCall_1; }
		
		//type=TypeSpecifier
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeSpecifier
		public RuleCall getTypeTypeSpecifierParserRuleCall_2_0() { return cTypeTypeSpecifierParserRuleCall_2_0; }
		
		//init+=InitDeclarator
		public Assignment getInitAssignment_3() { return cInitAssignment_3; }
		
		//InitDeclarator
		public RuleCall getInitInitDeclaratorParserRuleCall_3_0() { return cInitInitDeclaratorParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class DeclarationSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DeclarationSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStorageAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStorageStorageClassSpecifierEnumRuleCall_0_0 = (RuleCall)cStorageAssignment_0.eContents().get(0);
		private final Assignment cQualifiersAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cQualifiersTypeQualifierEnumRuleCall_1_0 = (RuleCall)cQualifiersAssignment_1.eContents().get(0);
		private final RuleCall cAttributeListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//fragment DeclarationSpecifier:
		//	storage+=StorageClassSpecifier
		//	| qualifiers+=TypeQualifier
		//	| AttributeList;
		@Override public ParserRule getRule() { return rule; }
		
		//storage+=StorageClassSpecifier | qualifiers+=TypeQualifier | AttributeList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//storage+=StorageClassSpecifier
		public Assignment getStorageAssignment_0() { return cStorageAssignment_0; }
		
		//StorageClassSpecifier
		public RuleCall getStorageStorageClassSpecifierEnumRuleCall_0_0() { return cStorageStorageClassSpecifierEnumRuleCall_0_0; }
		
		//qualifiers+=TypeQualifier
		public Assignment getQualifiersAssignment_1() { return cQualifiersAssignment_1; }
		
		//TypeQualifier
		public RuleCall getQualifiersTypeQualifierEnumRuleCall_1_0() { return cQualifiersTypeQualifierEnumRuleCall_1_0; }
		
		//AttributeList
		public RuleCall getAttributeListParserRuleCall_2() { return cAttributeListParserRuleCall_2; }
	}
	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.AttributeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttrsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttrsAttributeEnumRuleCall_1_0 = (RuleCall)cAttrsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttrsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttrsAttributeEnumRuleCall_2_1_0 = (RuleCall)cAttrsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//fragment AttributeList:
		//	'[[' attrs+=Attribute (',' attrs+=Attribute)* ']]';
		@Override public ParserRule getRule() { return rule; }
		
		//'[[' attrs+=Attribute (',' attrs+=Attribute)* ']]'
		public Group getGroup() { return cGroup; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }
		
		//attrs+=Attribute
		public Assignment getAttrsAssignment_1() { return cAttrsAssignment_1; }
		
		//Attribute
		public RuleCall getAttrsAttributeEnumRuleCall_1_0() { return cAttrsAttributeEnumRuleCall_1_0; }
		
		//(',' attrs+=Attribute)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//attrs+=Attribute
		public Assignment getAttrsAssignment_2_1() { return cAttrsAssignment_2_1; }
		
		//Attribute
		public RuleCall getAttrsAttributeEnumRuleCall_2_1_0() { return cAttrsAttributeEnumRuleCall_2_1_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_3() { return cRightSquareBracketRightSquareBracketKeyword_3; }
	}
	public class TypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.TypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypedefRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSpecifier:
		//	DataTypeSpecifier
		//	| TypedefRef;
		@Override public ParserRule getRule() { return rule; }
		
		//DataTypeSpecifier | TypedefRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataTypeSpecifier
		public RuleCall getDataTypeSpecifierParserRuleCall_0() { return cDataTypeSpecifierParserRuleCall_0; }
		
		//TypedefRef
		public RuleCall getTypedefRefParserRuleCall_1() { return cTypedefRefParserRuleCall_1; }
	}
	public class DataTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DataTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPodSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructOrUnionSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumSpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DataTypeSpecifier:
		//	PodSpecifier
		//	| StructOrUnionSpecifier
		//	| EnumSpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//PodSpecifier | StructOrUnionSpecifier | EnumSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PodSpecifier
		public RuleCall getPodSpecifierParserRuleCall_0() { return cPodSpecifierParserRuleCall_0; }
		
		//StructOrUnionSpecifier
		public RuleCall getStructOrUnionSpecifierParserRuleCall_1() { return cStructOrUnionSpecifierParserRuleCall_1; }
		
		//EnumSpecifier
		public RuleCall getEnumSpecifierParserRuleCall_2() { return cEnumSpecifierParserRuleCall_2; }
	}
	public class TypedefRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.TypedefRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefDirectDeclaratorCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefDirectDeclaratorIDTerminalRuleCall_0_1 = (RuleCall)cRefDirectDeclaratorCrossReference_0.eContents().get(1);
		
		//TypedefRef:
		//	ref=[DirectDeclarator];
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[DirectDeclarator]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[DirectDeclarator]
		public CrossReference getRefDirectDeclaratorCrossReference_0() { return cRefDirectDeclaratorCrossReference_0; }
		
		//ID
		public RuleCall getRefDirectDeclaratorIDTerminalRuleCall_0_1() { return cRefDirectDeclaratorIDTerminalRuleCall_0_1; }
	}
	public class PodSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.PodSpecifier");
		private final Assignment cDataTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDataTypeDataTypesEnumRuleCall_0 = (RuleCall)cDataTypeAssignment.eContents().get(0);
		
		//PodSpecifier:
		//	dataType+=DataTypes+;
		@Override public ParserRule getRule() { return rule; }
		
		//dataType+=DataTypes+
		public Assignment getDataTypeAssignment() { return cDataTypeAssignment; }
		
		//DataTypes
		public RuleCall getDataTypeDataTypesEnumRuleCall_0() { return cDataTypeDataTypesEnumRuleCall_0; }
	}
	public class BitSizeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BitSizeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueNATURALTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cConstantAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cConstantConstantCrossReference_1_1_0 = (CrossReference)cConstantAssignment_1_1.eContents().get(0);
		private final RuleCall cConstantConstantIDTerminalRuleCall_1_1_0_1 = (RuleCall)cConstantConstantCrossReference_1_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BitSizeSpecifier:
		//	'<' (value=NATURAL | constant=[Constant]) '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' (value=NATURAL | constant=[Constant]) '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//(value=NATURAL | constant=[Constant])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value=NATURAL
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//NATURAL
		public RuleCall getValueNATURALTerminalRuleCall_1_0_0() { return cValueNATURALTerminalRuleCall_1_0_0; }
		
		//constant=[Constant]
		public Assignment getConstantAssignment_1_1() { return cConstantAssignment_1_1; }
		
		//[Constant]
		public CrossReference getConstantConstantCrossReference_1_1_0() { return cConstantConstantCrossReference_1_1_0; }
		
		//ID
		public RuleCall getConstantConstantIDTerminalRuleCall_1_1_0_1() { return cConstantConstantIDTerminalRuleCall_1_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class EnumSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.EnumSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEnumKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cEnumeratorListParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEnumKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//EnumSpecifier:
		//	'enum' name=ID? '{' EnumeratorList ','? '}'
		//	| 'enum' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID? '{' EnumeratorList ','? '}' | 'enum' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'enum' name=ID? '{' EnumeratorList ','? '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'enum'
		public Keyword getEnumKeyword_0_0() { return cEnumKeyword_0_0; }
		
		//name=ID?
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//EnumeratorList
		public RuleCall getEnumeratorListParserRuleCall_0_3() { return cEnumeratorListParserRuleCall_0_3; }
		
		//','?
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_5() { return cRightCurlyBracketKeyword_0_5; }
		
		//'enum' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'enum'
		public Keyword getEnumKeyword_1_0() { return cEnumKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}
	public class EnumeratorListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.EnumeratorList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumeratorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnumeratorsEnumeratorParserRuleCall_0_0 = (RuleCall)cEnumeratorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEnumeratorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnumeratorsEnumeratorParserRuleCall_1_1_0 = (RuleCall)cEnumeratorsAssignment_1_1.eContents().get(0);
		
		//fragment EnumeratorList:
		//	enumerators+=Enumerator (',' enumerators+=Enumerator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//enumerators+=Enumerator (',' enumerators+=Enumerator)*
		public Group getGroup() { return cGroup; }
		
		//enumerators+=Enumerator
		public Assignment getEnumeratorsAssignment_0() { return cEnumeratorsAssignment_0; }
		
		//Enumerator
		public RuleCall getEnumeratorsEnumeratorParserRuleCall_0_0() { return cEnumeratorsEnumeratorParserRuleCall_0_0; }
		
		//(',' enumerators+=Enumerator)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//enumerators+=Enumerator
		public Assignment getEnumeratorsAssignment_1_1() { return cEnumeratorsAssignment_1_1; }
		
		//Enumerator
		public RuleCall getEnumeratorsEnumeratorParserRuleCall_1_1_0() { return cEnumeratorsEnumeratorParserRuleCall_1_1_0; }
	}
	public class EnumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Enumerator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionConstantExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Enumerator:
		//	name=ID
		//	| name=ID '=' expression=ConstantExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID | name=ID '=' expression=ConstantExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//name=ID '=' expression=ConstantExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//expression=ConstantExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//ConstantExpression
		public RuleCall getExpressionConstantExpressionParserRuleCall_1_2_0() { return cExpressionConstantExpressionParserRuleCall_1_2_0; }
	}
	public class StructOrUnionSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.StructOrUnionSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cComposeTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cComposeTypeStructOrUnionEnumRuleCall_0_0_0 = (RuleCall)cComposeTypeAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cDeclsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cDeclsStructDeclarationParserRuleCall_0_3_0 = (RuleCall)cDeclsAssignment_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cComposeTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cComposeTypeStructOrUnionEnumRuleCall_1_0_0 = (RuleCall)cComposeTypeAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//StructOrUnionSpecifier:
		//	composeType=StructOrUnion name=ID? '{' decls+=StructDeclaration* '}'
		//	| composeType=StructOrUnion name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//composeType=StructOrUnion name=ID? '{' decls+=StructDeclaration* '}' | composeType=StructOrUnion name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//composeType=StructOrUnion name=ID? '{' decls+=StructDeclaration* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//composeType=StructOrUnion
		public Assignment getComposeTypeAssignment_0_0() { return cComposeTypeAssignment_0_0; }
		
		//StructOrUnion
		public RuleCall getComposeTypeStructOrUnionEnumRuleCall_0_0_0() { return cComposeTypeStructOrUnionEnumRuleCall_0_0_0; }
		
		//name=ID?
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//decls+=StructDeclaration*
		public Assignment getDeclsAssignment_0_3() { return cDeclsAssignment_0_3; }
		
		//StructDeclaration
		public RuleCall getDeclsStructDeclarationParserRuleCall_0_3_0() { return cDeclsStructDeclarationParserRuleCall_0_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//composeType=StructOrUnion name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//composeType=StructOrUnion
		public Assignment getComposeTypeAssignment_1_0() { return cComposeTypeAssignment_1_0; }
		
		//StructOrUnion
		public RuleCall getComposeTypeStructOrUnionEnumRuleCall_1_0_0() { return cComposeTypeStructOrUnionEnumRuleCall_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}
	public class StructDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.StructDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSpecifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSpecifierStructDeclarationSpecifierParserRuleCall_0_0 = (RuleCall)cSpecifierAssignment_0.eContents().get(0);
		private final Assignment cDeclsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclsDirectDeclaratorParserRuleCall_1_0 = (RuleCall)cDeclsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDeclsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDeclsDirectDeclaratorParserRuleCall_2_1_0 = (RuleCall)cDeclsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StructDeclaration:
		//	specifier=StructDeclarationSpecifier decls+=DirectDeclarator (',' decls+=DirectDeclarator)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//specifier=StructDeclarationSpecifier decls+=DirectDeclarator (',' decls+=DirectDeclarator)* ';'
		public Group getGroup() { return cGroup; }
		
		//specifier=StructDeclarationSpecifier
		public Assignment getSpecifierAssignment_0() { return cSpecifierAssignment_0; }
		
		//StructDeclarationSpecifier
		public RuleCall getSpecifierStructDeclarationSpecifierParserRuleCall_0_0() { return cSpecifierStructDeclarationSpecifierParserRuleCall_0_0; }
		
		//decls+=DirectDeclarator
		public Assignment getDeclsAssignment_1() { return cDeclsAssignment_1; }
		
		//DirectDeclarator
		public RuleCall getDeclsDirectDeclaratorParserRuleCall_1_0() { return cDeclsDirectDeclaratorParserRuleCall_1_0; }
		
		//(',' decls+=DirectDeclarator)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//decls+=DirectDeclarator
		public Assignment getDeclsAssignment_2_1() { return cDeclsAssignment_2_1; }
		
		//DirectDeclarator
		public RuleCall getDeclsDirectDeclaratorParserRuleCall_2_1_0() { return cDeclsDirectDeclaratorParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class StructDeclarationSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.StructDeclarationSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeTypeSpecifierParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cQualifiersAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cQualifiersTypeQualifierEnumRuleCall_1_0 = (RuleCall)cQualifiersAssignment_1.eContents().get(0);
		
		//StructDeclarationSpecifier:
		//	type=TypeSpecifier
		//	| qualifiers+=TypeQualifier;
		@Override public ParserRule getRule() { return rule; }
		
		//type=TypeSpecifier | qualifiers+=TypeQualifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=TypeSpecifier
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeSpecifier
		public RuleCall getTypeTypeSpecifierParserRuleCall_0_0() { return cTypeTypeSpecifierParserRuleCall_0_0; }
		
		//qualifiers+=TypeQualifier
		public Assignment getQualifiersAssignment_1() { return cQualifiersAssignment_1; }
		
		//TypeQualifier
		public RuleCall getQualifiersTypeQualifierEnumRuleCall_1_0() { return cQualifiersTypeQualifierEnumRuleCall_1_0; }
	}
	public class InitDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.InitDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclaratorDirectDeclaratorParserRuleCall_0_0 = (RuleCall)cDeclaratorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitializerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_1_1_0 = (RuleCall)cInitializerAssignment_1_1.eContents().get(0);
		
		//InitDeclarator:
		//	declarator=DirectDeclarator ('=' initializer=Initializer)?;
		@Override public ParserRule getRule() { return rule; }
		
		//declarator=DirectDeclarator ('=' initializer=Initializer)?
		public Group getGroup() { return cGroup; }
		
		//declarator=DirectDeclarator
		public Assignment getDeclaratorAssignment_0() { return cDeclaratorAssignment_0; }
		
		//DirectDeclarator
		public RuleCall getDeclaratorDirectDeclaratorParserRuleCall_0_0() { return cDeclaratorDirectDeclaratorParserRuleCall_0_0; }
		
		//('=' initializer=Initializer)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//initializer=Initializer
		public Assignment getInitializerAssignment_1_1() { return cInitializerAssignment_1_1; }
		
		//Initializer
		public RuleCall getInitializerInitializerParserRuleCall_1_1_0() { return cInitializerInitializerParserRuleCall_1_1_0; }
	}
	public class DirectDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DirectDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexIntegerConstantParserRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cDirectDeclaratorLeftAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cQualifiersAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cQualifiersTypeQualifierEnumRuleCall_2_2_0 = (RuleCall)cQualifiersAssignment_2_2.eContents().get(0);
		private final Assignment cExprAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExprConditionalExpressionParserRuleCall_2_3_0 = (RuleCall)cExprAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//DirectDeclarator:
		//	name=ID (':' index=IntegerConstant)? ({DirectDeclarator.left=current} '[' qualifiers+=TypeQualifier?
		//	expr=ConditionalExpression? ']'
		//	//    	|   {DirectDeclarator.left=current} '[' (qualifiers+=TypeQualifier)? '*' ']'
		//	//    	|   {DirectDeclarator.left=current} '(' ParameterList ')'
		//)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (':' index=IntegerConstant)? ({DirectDeclarator.left=current} '[' qualifiers+=TypeQualifier?
		//expr=ConditionalExpression? ']' //    	|   {DirectDeclarator.left=current} '[' (qualifiers+=TypeQualifier)? '*' ']'
		////    	|   {DirectDeclarator.left=current} '(' ParameterList ')'
		//)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':' index=IntegerConstant)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//index=IntegerConstant
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }
		
		//IntegerConstant
		public RuleCall getIndexIntegerConstantParserRuleCall_1_1_0() { return cIndexIntegerConstantParserRuleCall_1_1_0; }
		
		//({DirectDeclarator.left=current} '[' qualifiers+=TypeQualifier? expr=ConditionalExpression? ']' //    	|   {DirectDeclarator.left=current} '[' (qualifiers+=TypeQualifier)? '*' ']'
		////    	|   {DirectDeclarator.left=current} '(' ParameterList ')'
		//)?
		public Group getGroup_2() { return cGroup_2; }
		
		//{DirectDeclarator.left=current}
		public Action getDirectDeclaratorLeftAction_2_0() { return cDirectDeclaratorLeftAction_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//qualifiers+=TypeQualifier?
		public Assignment getQualifiersAssignment_2_2() { return cQualifiersAssignment_2_2; }
		
		//TypeQualifier
		public RuleCall getQualifiersTypeQualifierEnumRuleCall_2_2_0() { return cQualifiersTypeQualifierEnumRuleCall_2_2_0; }
		
		//expr=ConditionalExpression?
		public Assignment getExprAssignment_2_3() { return cExprAssignment_2_3; }
		
		//ConditionalExpression
		public RuleCall getExprConditionalExpressionParserRuleCall_2_3_0() { return cExprConditionalExpressionParserRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}
	public class InitializerListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.InitializerList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cInitAlternatives_0_0 = (Alternatives)cInitAssignment_0.eContents().get(0);
		private final RuleCall cInitDesignatedInitializerParserRuleCall_0_0_0 = (RuleCall)cInitAlternatives_0_0.eContents().get(0);
		private final RuleCall cInitInitializerParserRuleCall_0_0_1 = (RuleCall)cInitAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cInitAlternatives_1_1_0 = (Alternatives)cInitAssignment_1_1.eContents().get(0);
		private final RuleCall cInitDesignatedInitializerParserRuleCall_1_1_0_0 = (RuleCall)cInitAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cInitInitializerParserRuleCall_1_1_0_1 = (RuleCall)cInitAlternatives_1_1_0.eContents().get(1);
		
		//fragment InitializerList:
		//	init+=(DesignatedInitializer | Initializer) (',' init+=(DesignatedInitializer | Initializer))?;
		@Override public ParserRule getRule() { return rule; }
		
		//init+=(DesignatedInitializer | Initializer) (',' init+=(DesignatedInitializer | Initializer))?
		public Group getGroup() { return cGroup; }
		
		//init+=(DesignatedInitializer | Initializer)
		public Assignment getInitAssignment_0() { return cInitAssignment_0; }
		
		//(DesignatedInitializer | Initializer)
		public Alternatives getInitAlternatives_0_0() { return cInitAlternatives_0_0; }
		
		//DesignatedInitializer
		public RuleCall getInitDesignatedInitializerParserRuleCall_0_0_0() { return cInitDesignatedInitializerParserRuleCall_0_0_0; }
		
		//Initializer
		public RuleCall getInitInitializerParserRuleCall_0_0_1() { return cInitInitializerParserRuleCall_0_0_1; }
		
		//(',' init+=(DesignatedInitializer | Initializer))?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//init+=(DesignatedInitializer | Initializer)
		public Assignment getInitAssignment_1_1() { return cInitAssignment_1_1; }
		
		//(DesignatedInitializer | Initializer)
		public Alternatives getInitAlternatives_1_1_0() { return cInitAlternatives_1_1_0; }
		
		//DesignatedInitializer
		public RuleCall getInitDesignatedInitializerParserRuleCall_1_1_0_0() { return cInitDesignatedInitializerParserRuleCall_1_1_0_0; }
		
		//Initializer
		public RuleCall getInitInitializerParserRuleCall_1_1_0_1() { return cInitInitializerParserRuleCall_1_1_0_1; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Initializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprConditionalExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cInitializerListParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Initializer:
		//	expr=ConditionalExpression
		//	| '{' InitializerList ','? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//expr=ConditionalExpression | '{' InitializerList ','? '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expr=ConditionalExpression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//ConditionalExpression
		public RuleCall getExprConditionalExpressionParserRuleCall_0_0() { return cExprConditionalExpressionParserRuleCall_0_0; }
		
		//'{' InitializerList ','? '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//InitializerList
		public RuleCall getInitializerListParserRuleCall_1_1() { return cInitializerListParserRuleCall_1_1; }
		
		//','?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class DesignatedInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DesignatedInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesignatorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesignatorsDesignatorParserRuleCall_0_0 = (RuleCall)cDesignatorsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitInitializerParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		
		//DesignatedInitializer:
		//	designators+=Designator+ '=' init=Initializer;
		@Override public ParserRule getRule() { return rule; }
		
		//designators+=Designator+ '=' init=Initializer
		public Group getGroup() { return cGroup; }
		
		//designators+=Designator+
		public Assignment getDesignatorsAssignment_0() { return cDesignatorsAssignment_0; }
		
		//Designator
		public RuleCall getDesignatorsDesignatorParserRuleCall_0_0() { return cDesignatorsDesignatorParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//init=Initializer
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }
		
		//Initializer
		public RuleCall getInitInitializerParserRuleCall_2_0() { return cInitInitializerParserRuleCall_2_0; }
	}
	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Designator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIdxAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdxConstantExpressionParserRuleCall_0_1_0 = (RuleCall)cIdxAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropIDTerminalRuleCall_1_1_0 = (RuleCall)cPropAssignment_1_1.eContents().get(0);
		
		//Designator:
		//	'[' idx=ConstantExpression ']'
		//	| '.' prop=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' idx=ConstantExpression ']' | '.' prop=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' idx=ConstantExpression ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//idx=ConstantExpression
		public Assignment getIdxAssignment_0_1() { return cIdxAssignment_0_1; }
		
		//ConstantExpression
		public RuleCall getIdxConstantExpressionParserRuleCall_0_1_0() { return cIdxConstantExpressionParserRuleCall_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//'.' prop=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//prop=ID
		public Assignment getPropAssignment_1_1() { return cPropAssignment_1_1; }
		
		//ID
		public RuleCall getPropIDTerminalRuleCall_1_1_0() { return cPropIDTerminalRuleCall_1_1_0; }
	}
	public class AbstractDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.AbstractDeclarator");
		private final RuleCall cDirectAbstractDeclaratorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractDeclarator:
		//	DirectAbstractDeclarator;
		@Override public ParserRule getRule() { return rule; }
		
		//DirectAbstractDeclarator
		public RuleCall getDirectAbstractDeclaratorParserRuleCall() { return cDirectAbstractDeclaratorParserRuleCall; }
	}
	public class DirectAbstractDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DirectAbstractDeclarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDirectAbstractDeclaratorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cDeclaratorAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cDeclaratorAbstractDeclaratorParserRuleCall_0_2_0_0 = (RuleCall)cDeclaratorAssignment_0_2_0.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDirectAbstractDeclaratorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprConstantExpressionParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		///*
		// direct_abstract_declarator
		//	: '(' abstract_declarator ')'
		//	| '(' parameter_type_list ')'
		//	| '(' ')'
		//	| '[' constant_expression ']'
		//	| '[' ']'
		//	| direct_abstract_declarator '[' ']'
		//	| direct_abstract_declarator '[' constant_expression ']'
		//	| direct_abstract_declarator '(' ')'
		//	| direct_abstract_declarator '(' parameter_type_list ')'
		//	;
		// 
		// */ DirectAbstractDeclarator:
		//	{DirectAbstractDeclarator} '(' (declarator=AbstractDeclarator? | ParameterList) ')'
		//	| {DirectAbstractDeclarator} '[' expr=ConstantExpression? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{DirectAbstractDeclarator} '(' (declarator=AbstractDeclarator? | ParameterList) ')' | {DirectAbstractDeclarator} '['
		//expr=ConstantExpression? ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DirectAbstractDeclarator} '(' (declarator=AbstractDeclarator? | ParameterList) ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{DirectAbstractDeclarator}
		public Action getDirectAbstractDeclaratorAction_0_0() { return cDirectAbstractDeclaratorAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//(declarator=AbstractDeclarator? | ParameterList)
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//declarator=AbstractDeclarator?
		public Assignment getDeclaratorAssignment_0_2_0() { return cDeclaratorAssignment_0_2_0; }
		
		//AbstractDeclarator
		public RuleCall getDeclaratorAbstractDeclaratorParserRuleCall_0_2_0_0() { return cDeclaratorAbstractDeclaratorParserRuleCall_0_2_0_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_0_2_1() { return cParameterListParserRuleCall_0_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{DirectAbstractDeclarator} '[' expr=ConstantExpression? ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//{DirectAbstractDeclarator}
		public Action getDirectAbstractDeclaratorAction_1_0() { return cDirectAbstractDeclaratorAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//expr=ConstantExpression?
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }
		
		//ConstantExpression
		public RuleCall getExprConstantExpressionParserRuleCall_1_2_0() { return cExprConstantExpressionParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAssignmentExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAssignmentExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// Expressions
		//Expression:
		//	AssignmentExpression ({Expression.left=current} ',' right=AssignmentExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignmentExpression ({Expression.left=current} ',' right=AssignmentExpression)?
		public Group getGroup() { return cGroup; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall_0() { return cAssignmentExpressionParserRuleCall_0; }
		
		//({Expression.left=current} ',' right=AssignmentExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//right=AssignmentExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AssignmentExpression
		public RuleCall getRightAssignmentExpressionParserRuleCall_1_2_0() { return cRightAssignmentExpressionParserRuleCall_1_2_0; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cAssignmentExpressionLeftAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOpAlternatives_2_0 = (Alternatives)cOpAssignment_2.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_2_0_0 = (Keyword)cOpAlternatives_2_0.eContents().get(0);
		private final Keyword cOpAsteriskEqualsSignKeyword_2_0_1 = (Keyword)cOpAlternatives_2_0.eContents().get(1);
		private final Keyword cOpSolidusEqualsSignKeyword_2_0_2 = (Keyword)cOpAlternatives_2_0.eContents().get(2);
		private final Keyword cOpPercentSignEqualsSignKeyword_2_0_3 = (Keyword)cOpAlternatives_2_0.eContents().get(3);
		private final Keyword cOpPlusSignEqualsSignKeyword_2_0_4 = (Keyword)cOpAlternatives_2_0.eContents().get(4);
		private final Keyword cOpHyphenMinusEqualsSignKeyword_2_0_5 = (Keyword)cOpAlternatives_2_0.eContents().get(5);
		private final Keyword cOpLessThanSignLessThanSignEqualsSignKeyword_2_0_6 = (Keyword)cOpAlternatives_2_0.eContents().get(6);
		private final Keyword cOpGreaterThanSignGreaterThanSignEqualsSignKeyword_2_0_7 = (Keyword)cOpAlternatives_2_0.eContents().get(7);
		private final Keyword cOpAmpersandEqualsSignKeyword_2_0_8 = (Keyword)cOpAlternatives_2_0.eContents().get(8);
		private final Keyword cOpCircumflexAccentEqualsSignKeyword_2_0_9 = (Keyword)cOpAlternatives_2_0.eContents().get(9);
		private final Keyword cOpVerticalLineEqualsSignKeyword_2_0_10 = (Keyword)cOpAlternatives_2_0.eContents().get(10);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightConditionalExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//AssignmentExpression Expression:
		//	UnaryExpression {AssignmentExpression.left=current} op=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&='
		//	| '^=' | '|=') right=ConditionalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression {AssignmentExpression.left=current} op=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' |
		//'^=' | '|=') right=ConditionalExpression
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//{AssignmentExpression.left=current}
		public Action getAssignmentExpressionLeftAction_1() { return cAssignmentExpressionLeftAction_1; }
		
		//op=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=')
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=')
		public Alternatives getOpAlternatives_2_0() { return cOpAlternatives_2_0; }
		
		//'='
		public Keyword getOpEqualsSignKeyword_2_0_0() { return cOpEqualsSignKeyword_2_0_0; }
		
		//'*='
		public Keyword getOpAsteriskEqualsSignKeyword_2_0_1() { return cOpAsteriskEqualsSignKeyword_2_0_1; }
		
		//'/='
		public Keyword getOpSolidusEqualsSignKeyword_2_0_2() { return cOpSolidusEqualsSignKeyword_2_0_2; }
		
		//'%='
		public Keyword getOpPercentSignEqualsSignKeyword_2_0_3() { return cOpPercentSignEqualsSignKeyword_2_0_3; }
		
		//'+='
		public Keyword getOpPlusSignEqualsSignKeyword_2_0_4() { return cOpPlusSignEqualsSignKeyword_2_0_4; }
		
		//'-='
		public Keyword getOpHyphenMinusEqualsSignKeyword_2_0_5() { return cOpHyphenMinusEqualsSignKeyword_2_0_5; }
		
		//'<<='
		public Keyword getOpLessThanSignLessThanSignEqualsSignKeyword_2_0_6() { return cOpLessThanSignLessThanSignEqualsSignKeyword_2_0_6; }
		
		//'>>='
		public Keyword getOpGreaterThanSignGreaterThanSignEqualsSignKeyword_2_0_7() { return cOpGreaterThanSignGreaterThanSignEqualsSignKeyword_2_0_7; }
		
		//'&='
		public Keyword getOpAmpersandEqualsSignKeyword_2_0_8() { return cOpAmpersandEqualsSignKeyword_2_0_8; }
		
		//'^='
		public Keyword getOpCircumflexAccentEqualsSignKeyword_2_0_9() { return cOpCircumflexAccentEqualsSignKeyword_2_0_9; }
		
		//'|='
		public Keyword getOpVerticalLineEqualsSignKeyword_2_0_10() { return cOpVerticalLineEqualsSignKeyword_2_0_10; }
		
		//right=ConditionalExpression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//ConditionalExpression
		public RuleCall getRightConditionalExpressionParserRuleCall_3_0() { return cRightConditionalExpressionParserRuleCall_3_0; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalExpressionCondAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLeftAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftConditionalExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightConditionalExpressionParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//ConditionalExpression Expression:
		//	LogicalOrExpression ({ConditionalExpression.cond=current} '?' left=ConditionalExpression ':'
		//	right=ConditionalExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrExpression ({ConditionalExpression.cond=current} '?' left=ConditionalExpression ':'
		//right=ConditionalExpression)?
		public Group getGroup() { return cGroup; }
		
		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }
		
		//({ConditionalExpression.cond=current} '?' left=ConditionalExpression ':' right=ConditionalExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConditionalExpression.cond=current}
		public Action getConditionalExpressionCondAction_1_0() { return cConditionalExpressionCondAction_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
		
		//left=ConditionalExpression
		public Assignment getLeftAssignment_1_2() { return cLeftAssignment_1_2; }
		
		//ConditionalExpression
		public RuleCall getLeftConditionalExpressionParserRuleCall_1_2_0() { return cLeftConditionalExpressionParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//right=ConditionalExpression
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }
		
		//ConditionalExpression
		public RuleCall getRightConditionalExpressionParserRuleCall_1_4_0() { return cRightConditionalExpressionParserRuleCall_1_4_0; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalOrExpression Expression:
		//	LogicalAndExpression ({LogicalExpr.left=current} op='||' right=LogicalOrExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpression ({LogicalExpr.left=current} op='||' right=LogicalOrExpression)?
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }
		
		//({LogicalExpr.left=current} op='||' right=LogicalOrExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalExpr.left=current}
		public Action getLogicalExprLeftAction_1_0() { return cLogicalExprLeftAction_1_0; }
		
		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=LogicalOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalOrExpression
		public RuleCall getRightLogicalOrExpressionParserRuleCall_1_2_0() { return cRightLogicalOrExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInclusiveOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression Expression:
		//	InclusiveOrExpression ({LogicalExpr.left=current} op='&&' right=LogicalAndExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//InclusiveOrExpression ({LogicalExpr.left=current} op='&&' right=LogicalAndExpression)?
		public Group getGroup() { return cGroup; }
		
		//InclusiveOrExpression
		public RuleCall getInclusiveOrExpressionParserRuleCall_0() { return cInclusiveOrExpressionParserRuleCall_0; }
		
		//({LogicalExpr.left=current} op='&&' right=LogicalAndExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalExpr.left=current}
		public Action getLogicalExprLeftAction_1_0() { return cLogicalExprLeftAction_1_0; }
		
		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }
		
		//right=LogicalAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalAndExpression
		public RuleCall getRightLogicalAndExpressionParserRuleCall_1_2_0() { return cRightLogicalAndExpressionParserRuleCall_1_2_0; }
	}
	public class InclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.InclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExclusiveOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightInclusiveOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//InclusiveOrExpression Expression:
		//	ExclusiveOrExpression ({LogicalExpr.left=current} op='|' right=InclusiveOrExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ExclusiveOrExpression ({LogicalExpr.left=current} op='|' right=InclusiveOrExpression)?
		public Group getGroup() { return cGroup; }
		
		//ExclusiveOrExpression
		public RuleCall getExclusiveOrExpressionParserRuleCall_0() { return cExclusiveOrExpressionParserRuleCall_0; }
		
		//({LogicalExpr.left=current} op='|' right=InclusiveOrExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalExpr.left=current}
		public Action getLogicalExprLeftAction_1_0() { return cLogicalExprLeftAction_1_0; }
		
		//op='|'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'|'
		public Keyword getOpVerticalLineKeyword_1_1_0() { return cOpVerticalLineKeyword_1_1_0; }
		
		//right=InclusiveOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//InclusiveOrExpression
		public RuleCall getRightInclusiveOrExpressionParserRuleCall_1_2_0() { return cRightInclusiveOrExpressionParserRuleCall_1_2_0; }
	}
	public class ExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExclusiveOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExclusiveOrExpression Expression:
		//	AndExpression ({LogicalExpr.left=current} op='^' right=ExclusiveOrExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({LogicalExpr.left=current} op='^' right=ExclusiveOrExpression)?
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({LogicalExpr.left=current} op='^' right=ExclusiveOrExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalExpr.left=current}
		public Action getLogicalExprLeftAction_1_0() { return cLogicalExprLeftAction_1_0; }
		
		//op='^'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'^'
		public Keyword getOpCircumflexAccentKeyword_1_1_0() { return cOpCircumflexAccentKeyword_1_1_0; }
		
		//right=ExclusiveOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExclusiveOrExpression
		public RuleCall getRightExclusiveOrExpressionParserRuleCall_1_2_0() { return cRightExclusiveOrExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	EqualityExpression ({LogicalExpr.left=current} op='&' right=AndExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({LogicalExpr.left=current} op='&' right=AndExpression)?
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({LogicalExpr.left=current} op='&' right=AndExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalExpr.left=current}
		public Action getLogicalExprLeftAction_1_0() { return cLogicalExprLeftAction_1_0; }
		
		//op='&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_1_1_0() { return cOpAmpersandKeyword_1_1_0; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression Expression:
		//	RelationalExpression ({LogicalExpr.left=current} op=('==' | '!=') right=EqualityExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression ({LogicalExpr.left=current} op=('==' | '!=') right=EqualityExpression)?
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//({LogicalExpr.left=current} op=('==' | '!=') right=EqualityExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalExpr.left=current}
		public Action getLogicalExprLeftAction_1_0() { return cLogicalExprLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationalExpression Expression:
		//	ShiftExpression ({LogicalExpr.left=current} op=('<' | '>' | '<=' | '>=') right=RelationalExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ShiftExpression ({LogicalExpr.left=current} op=('<' | '>' | '<=' | '>=') right=RelationalExpression)?
		public Group getGroup() { return cGroup; }
		
		//ShiftExpression
		public RuleCall getShiftExpressionParserRuleCall_0() { return cShiftExpressionParserRuleCall_0; }
		
		//({LogicalExpr.left=current} op=('<' | '>' | '<=' | '>=') right=RelationalExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalExpr.left=current}
		public Action getLogicalExprLeftAction_1_0() { return cLogicalExprLeftAction_1_0; }
		
		//op=('<' | '>' | '<=' | '>=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('<' | '>' | '<=' | '>=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignKeyword_1_1_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_1() { return cOpGreaterThanSignKeyword_1_1_0_1; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_2() { return cOpLessThanSignEqualsSignKeyword_1_1_0_2; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//right=RelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_2_0() { return cRightRelationalExpressionParserRuleCall_1_2_0; }
	}
	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightShiftExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ShiftExpression Expression:
		//	AdditiveExpression ({ArithmeticExpression.left=current} op=('<<' | '>>') right=ShiftExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({ArithmeticExpression.left=current} op=('<<' | '>>') right=ShiftExpression)?
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({ArithmeticExpression.left=current} op=('<<' | '>>') right=ShiftExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression.left=current}
		public Action getArithmeticExpressionLeftAction_1_0() { return cArithmeticExpressionLeftAction_1_0; }
		
		//op=('<<' | '>>')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('<<' | '>>')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'<<'
		public Keyword getOpLessThanSignLessThanSignKeyword_1_1_0_0() { return cOpLessThanSignLessThanSignKeyword_1_1_0_0; }
		
		//'>>'
		public Keyword getOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cOpGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }
		
		//right=ShiftExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ShiftExpression
		public RuleCall getRightShiftExpressionParserRuleCall_1_2_0() { return cRightShiftExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	MultiplicativeExpression ({ArithmeticExpression.left=current} op=('+' | '-') right=AdditiveExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({ArithmeticExpression.left=current} op=('+' | '-') right=AdditiveExpression)?
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({ArithmeticExpression.left=current} op=('+' | '-') right=AdditiveExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression.left=current}
		public Action getArithmeticExpressionLeftAction_1_0() { return cArithmeticExpressionLeftAction_1_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCastExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	CastExpression ({ArithmeticExpression.left=current} op=('*' | '/' | '%') right=MultiplicativeExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//CastExpression ({ArithmeticExpression.left=current} op=('*' | '/' | '%') right=MultiplicativeExpression)?
		public Group getGroup() { return cGroup; }
		
		//CastExpression
		public RuleCall getCastExpressionParserRuleCall_0() { return cCastExpressionParserRuleCall_0; }
		
		//({ArithmeticExpression.left=current} op=('*' | '/' | '%') right=MultiplicativeExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression.left=current}
		public Action getArithmeticExpressionLeftAction_1_0() { return cArithmeticExpressionLeftAction_1_0; }
		
		//op=('*' | '/' | '%')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/' | '%')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//'%'
		public Keyword getOpPercentSignKeyword_1_1_0_2() { return cOpPercentSignKeyword_1_1_0_2; }
		
		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.CastExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeDataTypeSpecifierParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLeftAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLeftCastExpressionParserRuleCall_1_3_0 = (RuleCall)cLeftAssignment_1_3.eContents().get(0);
		
		//CastExpression:
		//	UnaryExpression
		//	| '(' type=DataTypeSpecifier ')' left=CastExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression | '(' type=DataTypeSpecifier ')' left=CastExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//'(' type=DataTypeSpecifier ')' left=CastExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//type=DataTypeSpecifier
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//DataTypeSpecifier
		public RuleCall getTypeDataTypeSpecifierParserRuleCall_1_1_0() { return cTypeDataTypeSpecifierParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//left=CastExpression
		public Assignment getLeftAssignment_1_3() { return cLeftAssignment_1_3; }
		
		//CastExpression
		public RuleCall getLeftCastExpressionParserRuleCall_1_3_0() { return cLeftCastExpressionParserRuleCall_1_3_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostfixExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOpPlusSignPlusSignKeyword_1_0_0 = (Keyword)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpHyphenMinusHyphenMinusKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cLeftAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLeftUnaryExpressionParserRuleCall_2_1_0 = (RuleCall)cLeftAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cUnaryOperatorParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cLeftAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLeftCastExpressionParserRuleCall_3_1_0 = (RuleCall)cLeftAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cOpSizeofKeyword_4_0_0 = (Keyword)cOpAssignment_4_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_4_2 = (Alternatives)cGroup_4.eContents().get(2);
		private final Assignment cLeftAssignment_4_2_0 = (Assignment)cAlternatives_4_2.eContents().get(0);
		private final RuleCall cLeftPostfixExpressionParserRuleCall_4_2_0_0 = (RuleCall)cLeftAssignment_4_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_4_2_1 = (Assignment)cAlternatives_4_2.eContents().get(1);
		private final RuleCall cTypeDataTypeSpecifierParserRuleCall_4_2_1_0 = (RuleCall)cTypeAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//UnaryExpression:
		//	PostfixExpression
		//	| op='++' left=UnaryExpression
		//	| op='--' left=UnaryExpression
		//	| UnaryOperator left=CastExpression
		//	| op='sizeof' '(' (left=PostfixExpression | type=DataTypeSpecifier) ')'
		//	//    |   op='_Alignof' '(' type=TypeSpecifier ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PostfixExpression | op='++' left=UnaryExpression | op='--' left=UnaryExpression | UnaryOperator left=CastExpression |
		//op='sizeof' '(' (left=PostfixExpression | type=DataTypeSpecifier) ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PostfixExpression
		public RuleCall getPostfixExpressionParserRuleCall_0() { return cPostfixExpressionParserRuleCall_0; }
		
		//op='++' left=UnaryExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//op='++'
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//'++'
		public Keyword getOpPlusSignPlusSignKeyword_1_0_0() { return cOpPlusSignPlusSignKeyword_1_0_0; }
		
		//left=UnaryExpression
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }
		
		//UnaryExpression
		public RuleCall getLeftUnaryExpressionParserRuleCall_1_1_0() { return cLeftUnaryExpressionParserRuleCall_1_1_0; }
		
		//op='--' left=UnaryExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//op='--'
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }
		
		//'--'
		public Keyword getOpHyphenMinusHyphenMinusKeyword_2_0_0() { return cOpHyphenMinusHyphenMinusKeyword_2_0_0; }
		
		//left=UnaryExpression
		public Assignment getLeftAssignment_2_1() { return cLeftAssignment_2_1; }
		
		//UnaryExpression
		public RuleCall getLeftUnaryExpressionParserRuleCall_2_1_0() { return cLeftUnaryExpressionParserRuleCall_2_1_0; }
		
		//UnaryOperator left=CastExpression
		public Group getGroup_3() { return cGroup_3; }
		
		//UnaryOperator
		public RuleCall getUnaryOperatorParserRuleCall_3_0() { return cUnaryOperatorParserRuleCall_3_0; }
		
		//left=CastExpression
		public Assignment getLeftAssignment_3_1() { return cLeftAssignment_3_1; }
		
		//CastExpression
		public RuleCall getLeftCastExpressionParserRuleCall_3_1_0() { return cLeftCastExpressionParserRuleCall_3_1_0; }
		
		//op='sizeof' '(' (left=PostfixExpression | type=DataTypeSpecifier) ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//op='sizeof'
		public Assignment getOpAssignment_4_0() { return cOpAssignment_4_0; }
		
		//'sizeof'
		public Keyword getOpSizeofKeyword_4_0_0() { return cOpSizeofKeyword_4_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//(left=PostfixExpression | type=DataTypeSpecifier)
		public Alternatives getAlternatives_4_2() { return cAlternatives_4_2; }
		
		//left=PostfixExpression
		public Assignment getLeftAssignment_4_2_0() { return cLeftAssignment_4_2_0; }
		
		//PostfixExpression
		public RuleCall getLeftPostfixExpressionParserRuleCall_4_2_0_0() { return cLeftPostfixExpressionParserRuleCall_4_2_0_0; }
		
		//type=DataTypeSpecifier
		public Assignment getTypeAssignment_4_2_1() { return cTypeAssignment_4_2_1; }
		
		//DataTypeSpecifier
		public RuleCall getTypeDataTypeSpecifierParserRuleCall_4_2_1_0() { return cTypeDataTypeSpecifierParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.UnaryOperator");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpAmpersandKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final Keyword cOpPlusSignKeyword_0_2 = (Keyword)cOpAlternatives_0.eContents().get(2);
		private final Keyword cOpHyphenMinusKeyword_0_3 = (Keyword)cOpAlternatives_0.eContents().get(3);
		private final Keyword cOpTildeKeyword_0_4 = (Keyword)cOpAlternatives_0.eContents().get(4);
		private final Keyword cOpExclamationMarkKeyword_0_5 = (Keyword)cOpAlternatives_0.eContents().get(5);
		
		//fragment UnaryOperator:
		//	op=('&' | '*' | '+' | '-' | '~' | '!');
		@Override public ParserRule getRule() { return rule; }
		
		//op=('&' | '*' | '+' | '-' | '~' | '!')
		public Assignment getOpAssignment() { return cOpAssignment; }
		
		//('&' | '*' | '+' | '-' | '~' | '!')
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_0_0() { return cOpAmpersandKeyword_0_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_0_1() { return cOpAsteriskKeyword_0_1; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_0_2() { return cOpPlusSignKeyword_0_2; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_0_3() { return cOpHyphenMinusKeyword_0_3; }
		
		//'~'
		public Keyword getOpTildeKeyword_0_4() { return cOpTildeKeyword_0_4; }
		
		//'!'
		public Keyword getOpExclamationMarkKeyword_0_5() { return cOpExclamationMarkKeyword_0_5; }
	}
	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.PostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPostfixExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpsPostfixOperatorParserRuleCall_1_1_0 = (RuleCall)cOpsAssignment_1_1.eContents().get(0);
		
		//PostfixExpression:
		//	PrimaryExpression ({PostfixExpression.left=current} ops+=PostfixOperator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({PostfixExpression.left=current} ops+=PostfixOperator)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({PostfixExpression.left=current} ops+=PostfixOperator)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PostfixExpression.left=current}
		public Action getPostfixExpressionLeftAction_1_0() { return cPostfixExpressionLeftAction_1_0; }
		
		//ops+=PostfixOperator
		public Assignment getOpsAssignment_1_1() { return cOpsAssignment_1_1; }
		
		//PostfixOperator
		public RuleCall getOpsPostfixOperatorParserRuleCall_1_1_0() { return cOpsPostfixOperatorParserRuleCall_1_1_0; }
	}
	public class PostfixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.PostfixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOpAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cOpLeftSquareBracketKeyword_0_0_0 = (Keyword)cOpAssignment_0_0.eContents().get(0);
		private final Assignment cArgsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cArgsConditionalExpressionParserRuleCall_0_1_0 = (RuleCall)cArgsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cColonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cArgsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cArgsConditionalExpressionParserRuleCall_0_2_1_0 = (RuleCall)cArgsAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOpLeftParenthesisKeyword_1_0_0 = (Keyword)cOpAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cArgsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cArgsConditionalExpressionParserRuleCall_1_1_0_0 = (RuleCall)cArgsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cArgsConditionalExpressionParserRuleCall_1_1_1_1_0 = (RuleCall)cArgsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpFullStopKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cMemberAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cMemberDirectDeclaratorCrossReference_2_1_0 = (CrossReference)cMemberAssignment_2_1.eContents().get(0);
		private final RuleCall cMemberDirectDeclaratorIDTerminalRuleCall_2_1_0_1 = (RuleCall)cMemberDirectDeclaratorCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_3_0_0 = (Keyword)cOpAssignment_3_0.eContents().get(0);
		private final Assignment cMemberAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMemberDirectDeclaratorCrossReference_3_1_0 = (CrossReference)cMemberAssignment_3_1.eContents().get(0);
		private final RuleCall cMemberDirectDeclaratorIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMemberDirectDeclaratorCrossReference_3_1_0.eContents().get(1);
		private final Assignment cOpAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cOpPlusSignPlusSignKeyword_4_0 = (Keyword)cOpAssignment_4.eContents().get(0);
		private final Assignment cOpAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cOpHyphenMinusHyphenMinusKeyword_5_0 = (Keyword)cOpAssignment_5.eContents().get(0);
		
		//PostfixOperator:
		//	op='[' args+=ConditionalExpression (':' args+=ConditionalExpression)? ']'
		//	| op='(' (args+=ConditionalExpression (',' args+=ConditionalExpression)*)? ')' //function call
		//	| op='.' member=[DirectDeclarator] | op='->' member=[DirectDeclarator] | op='++'
		//	| op='--';
		@Override public ParserRule getRule() { return rule; }
		
		//op='[' args+=ConditionalExpression (':' args+=ConditionalExpression)? ']' | op='(' (args+=ConditionalExpression (','
		//args+=ConditionalExpression)*)? ')' //function call
		//| op='.' member=[DirectDeclarator] | op='->' member=[DirectDeclarator] | op='++' | op='--'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//op='[' args+=ConditionalExpression (':' args+=ConditionalExpression)? ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//op='['
		public Assignment getOpAssignment_0_0() { return cOpAssignment_0_0; }
		
		//'['
		public Keyword getOpLeftSquareBracketKeyword_0_0_0() { return cOpLeftSquareBracketKeyword_0_0_0; }
		
		//args+=ConditionalExpression
		public Assignment getArgsAssignment_0_1() { return cArgsAssignment_0_1; }
		
		//ConditionalExpression
		public RuleCall getArgsConditionalExpressionParserRuleCall_0_1_0() { return cArgsConditionalExpressionParserRuleCall_0_1_0; }
		
		//(':' args+=ConditionalExpression)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//':'
		public Keyword getColonKeyword_0_2_0() { return cColonKeyword_0_2_0; }
		
		//args+=ConditionalExpression
		public Assignment getArgsAssignment_0_2_1() { return cArgsAssignment_0_2_1; }
		
		//ConditionalExpression
		public RuleCall getArgsConditionalExpressionParserRuleCall_0_2_1_0() { return cArgsConditionalExpressionParserRuleCall_0_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//op='(' (args+=ConditionalExpression (',' args+=ConditionalExpression)*)? ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//op='('
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//'('
		public Keyword getOpLeftParenthesisKeyword_1_0_0() { return cOpLeftParenthesisKeyword_1_0_0; }
		
		//(args+=ConditionalExpression (',' args+=ConditionalExpression)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//args+=ConditionalExpression
		public Assignment getArgsAssignment_1_1_0() { return cArgsAssignment_1_1_0; }
		
		//ConditionalExpression
		public RuleCall getArgsConditionalExpressionParserRuleCall_1_1_0_0() { return cArgsConditionalExpressionParserRuleCall_1_1_0_0; }
		
		//(',' args+=ConditionalExpression)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//args+=ConditionalExpression
		public Assignment getArgsAssignment_1_1_1_1() { return cArgsAssignment_1_1_1_1; }
		
		//ConditionalExpression
		public RuleCall getArgsConditionalExpressionParserRuleCall_1_1_1_1_0() { return cArgsConditionalExpressionParserRuleCall_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//op='.' member=[DirectDeclarator]
		public Group getGroup_2() { return cGroup_2; }
		
		//op='.'
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }
		
		//'.'
		public Keyword getOpFullStopKeyword_2_0_0() { return cOpFullStopKeyword_2_0_0; }
		
		//member=[DirectDeclarator]
		public Assignment getMemberAssignment_2_1() { return cMemberAssignment_2_1; }
		
		//[DirectDeclarator]
		public CrossReference getMemberDirectDeclaratorCrossReference_2_1_0() { return cMemberDirectDeclaratorCrossReference_2_1_0; }
		
		//ID
		public RuleCall getMemberDirectDeclaratorIDTerminalRuleCall_2_1_0_1() { return cMemberDirectDeclaratorIDTerminalRuleCall_2_1_0_1; }
		
		//op='->' member=[DirectDeclarator]
		public Group getGroup_3() { return cGroup_3; }
		
		//op='->'
		public Assignment getOpAssignment_3_0() { return cOpAssignment_3_0; }
		
		//'->'
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_3_0_0() { return cOpHyphenMinusGreaterThanSignKeyword_3_0_0; }
		
		//member=[DirectDeclarator]
		public Assignment getMemberAssignment_3_1() { return cMemberAssignment_3_1; }
		
		//[DirectDeclarator]
		public CrossReference getMemberDirectDeclaratorCrossReference_3_1_0() { return cMemberDirectDeclaratorCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMemberDirectDeclaratorIDTerminalRuleCall_3_1_0_1() { return cMemberDirectDeclaratorIDTerminalRuleCall_3_1_0_1; }
		
		//op='++'
		public Assignment getOpAssignment_4() { return cOpAssignment_4; }
		
		//'++'
		public Keyword getOpPlusSignPlusSignKeyword_4_0() { return cOpPlusSignPlusSignKeyword_4_0; }
		
		//op='--'
		public Assignment getOpAssignment_5() { return cOpAssignment_5; }
		
		//'--'
		public Keyword getOpHyphenMinusHyphenMinusKeyword_5_0() { return cOpHyphenMinusHyphenMinusKeyword_5_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRefVariableRefCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefVariableRefIDTerminalRuleCall_0_0_1 = (RuleCall)cRefVariableRefCrossReference_0_0.eContents().get(1);
		private final Assignment cConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		private final Assignment cLiteralAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralStringLiteralParserRuleCall_2_0 = (RuleCall)cLiteralAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLeftAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLeftConditionalExpressionParserRuleCall_3_1_0 = (RuleCall)cLeftAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PrimaryExpression:
		//	ref=[VariableRef] | constant=Constant
		//	| literal+=StringLiteral+
		//	| '(' left=ConditionalExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[VariableRef] | constant=Constant | literal+=StringLiteral+ | '(' left=ConditionalExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ref=[VariableRef]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[VariableRef]
		public CrossReference getRefVariableRefCrossReference_0_0() { return cRefVariableRefCrossReference_0_0; }
		
		//ID
		public RuleCall getRefVariableRefIDTerminalRuleCall_0_0_1() { return cRefVariableRefIDTerminalRuleCall_0_0_1; }
		
		//constant=Constant
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }
		
		//Constant
		public RuleCall getConstantConstantParserRuleCall_1_0() { return cConstantConstantParserRuleCall_1_0; }
		
		//literal+=StringLiteral+
		public Assignment getLiteralAssignment_2() { return cLiteralAssignment_2; }
		
		//StringLiteral
		public RuleCall getLiteralStringLiteralParserRuleCall_2_0() { return cLiteralStringLiteralParserRuleCall_2_0; }
		
		//'(' left=ConditionalExpression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//left=ConditionalExpression
		public Assignment getLeftAssignment_3_1() { return cLeftAssignment_3_1; }
		
		//ConditionalExpression
		public RuleCall getLeftConditionalExpressionParserRuleCall_3_1_0() { return cLeftConditionalExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.VariableRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDirectDeclaratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VariableRef hidden():
		//	FunctionDefinition | DirectDeclarator | Field;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionDefinition | DirectDeclarator | Field
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_0() { return cFunctionDefinitionParserRuleCall_0; }
		
		//DirectDeclarator
		public RuleCall getDirectDeclaratorParserRuleCall_1() { return cDirectDeclaratorParserRuleCall_1; }
		
		//Field
		public RuleCall getFieldParserRuleCall_2() { return cFieldParserRuleCall_2; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEncodingPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//StringLiteral:
		//	EncodingPrefix? val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//EncodingPrefix? val=STRING
		public Group getGroup() { return cGroup; }
		
		//EncodingPrefix?
		public RuleCall getEncodingPrefixParserRuleCall_0() { return cEncodingPrefixParserRuleCall_0; }
		
		//val=STRING
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_1_0() { return cValSTRINGTerminalRuleCall_1_0; }
	}
	public class EncodingPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.EncodingPrefix");
		private final Assignment cPrefixAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cPrefixAlternatives_0 = (Alternatives)cPrefixAssignment.eContents().get(0);
		private final Keyword cPrefixU8Keyword_0_0 = (Keyword)cPrefixAlternatives_0.eContents().get(0);
		private final Keyword cPrefixUKeyword_0_1 = (Keyword)cPrefixAlternatives_0.eContents().get(1);
		private final Keyword cPrefixUKeyword_0_2 = (Keyword)cPrefixAlternatives_0.eContents().get(2);
		private final Keyword cPrefixLKeyword_0_3 = (Keyword)cPrefixAlternatives_0.eContents().get(3);
		
		//fragment EncodingPrefix:
		//	prefix=('u8' | 'u' | 'U' | 'L');
		@Override public ParserRule getRule() { return rule; }
		
		//prefix=('u8' | 'u' | 'U' | 'L')
		public Assignment getPrefixAssignment() { return cPrefixAssignment; }
		
		//('u8' | 'u' | 'U' | 'L')
		public Alternatives getPrefixAlternatives_0() { return cPrefixAlternatives_0; }
		
		//'u8'
		public Keyword getPrefixU8Keyword_0_0() { return cPrefixU8Keyword_0_0; }
		
		//'u'
		public Keyword getPrefixUKeyword_0_1() { return cPrefixUKeyword_0_1; }
		
		//'U'
		public Keyword getPrefixUKeyword_0_2() { return cPrefixUKeyword_0_2; }
		
		//'L'
		public Keyword getPrefixLKeyword_0_3() { return cPrefixLKeyword_0_3; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ConstantExpression");
		private final RuleCall cConditionalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConstantExpression Expression:
		//	ConditionalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall() { return cConditionalExpressionParserRuleCall; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatingConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharacterConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBoolConstantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/////////////////////////////////////////////////////////////////////////////////
		//// Constants
		//Constant:
		//	IntegerConstant
		//	| FloatingConstant
		//	| CharacterConstant
		//	| BoolConstant;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerConstant | FloatingConstant | CharacterConstant | BoolConstant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerConstant
		public RuleCall getIntegerConstantParserRuleCall_0() { return cIntegerConstantParserRuleCall_0; }
		
		//FloatingConstant
		public RuleCall getFloatingConstantParserRuleCall_1() { return cFloatingConstantParserRuleCall_1; }
		
		//CharacterConstant
		public RuleCall getCharacterConstantParserRuleCall_2() { return cCharacterConstantParserRuleCall_2; }
		
		//BoolConstant
		public RuleCall getBoolConstantParserRuleCall_3() { return cBoolConstantParserRuleCall_3; }
	}
	public class IntegerConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.IntegerConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValNATURALTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final RuleCall cIntegerSuffixParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IntegerConstant:
		//	val=NATURAL IntegerSuffix?;
		@Override public ParserRule getRule() { return rule; }
		
		//val=NATURAL IntegerSuffix?
		public Group getGroup() { return cGroup; }
		
		//val=NATURAL
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//NATURAL
		public RuleCall getValNATURALTerminalRuleCall_0_0() { return cValNATURALTerminalRuleCall_0_0; }
		
		//IntegerSuffix?
		public RuleCall getIntegerSuffixParserRuleCall_1() { return cIntegerSuffixParserRuleCall_1; }
	}
	public class FloatingConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.FloatingConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValFLOATTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final RuleCall cFloatingSuffixParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FloatingConstant:
		//	val=FLOAT FloatingSuffix?;
		@Override public ParserRule getRule() { return rule; }
		
		//val=FLOAT FloatingSuffix?
		public Group getGroup() { return cGroup; }
		
		//val=FLOAT
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//FLOAT
		public RuleCall getValFLOATTerminalRuleCall_0_0() { return cValFLOATTerminalRuleCall_0_0; }
		
		//FloatingSuffix?
		public RuleCall getFloatingSuffixParserRuleCall_1() { return cFloatingSuffixParserRuleCall_1; }
	}
	public class BoolConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BoolConstant");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValBOOLEANTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//BoolConstant:
		//	val=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//val=BOOLEAN
		public Assignment getValAssignment() { return cValAssignment; }
		
		//BOOLEAN
		public RuleCall getValBOOLEANTerminalRuleCall_0() { return cValBOOLEANTerminalRuleCall_0; }
	}
	public class IntegerSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.IntegerSuffix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedSuffixParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cLongSuffixParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUnsignedSuffixParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cLongLongSuffixParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLongSuffixParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cUnsignedSuffixParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cLongLongSuffixParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cUnsignedSuffixParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//fragment IntegerSuffix:
		//	UnsignedSuffix LongSuffix?
		//	| UnsignedSuffix LongLongSuffix
		//	| LongSuffix UnsignedSuffix?
		//	| LongLongSuffix UnsignedSuffix?;
		@Override public ParserRule getRule() { return rule; }
		
		//UnsignedSuffix LongSuffix? | UnsignedSuffix LongLongSuffix | LongSuffix UnsignedSuffix? | LongLongSuffix UnsignedSuffix?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnsignedSuffix LongSuffix?
		public Group getGroup_0() { return cGroup_0; }
		
		//UnsignedSuffix
		public RuleCall getUnsignedSuffixParserRuleCall_0_0() { return cUnsignedSuffixParserRuleCall_0_0; }
		
		//LongSuffix?
		public RuleCall getLongSuffixParserRuleCall_0_1() { return cLongSuffixParserRuleCall_0_1; }
		
		//UnsignedSuffix LongLongSuffix
		public Group getGroup_1() { return cGroup_1; }
		
		//UnsignedSuffix
		public RuleCall getUnsignedSuffixParserRuleCall_1_0() { return cUnsignedSuffixParserRuleCall_1_0; }
		
		//LongLongSuffix
		public RuleCall getLongLongSuffixParserRuleCall_1_1() { return cLongLongSuffixParserRuleCall_1_1; }
		
		//LongSuffix UnsignedSuffix?
		public Group getGroup_2() { return cGroup_2; }
		
		//LongSuffix
		public RuleCall getLongSuffixParserRuleCall_2_0() { return cLongSuffixParserRuleCall_2_0; }
		
		//UnsignedSuffix?
		public RuleCall getUnsignedSuffixParserRuleCall_2_1() { return cUnsignedSuffixParserRuleCall_2_1; }
		
		//LongLongSuffix UnsignedSuffix?
		public Group getGroup_3() { return cGroup_3; }
		
		//LongLongSuffix
		public RuleCall getLongLongSuffixParserRuleCall_3_0() { return cLongLongSuffixParserRuleCall_3_0; }
		
		//UnsignedSuffix?
		public RuleCall getUnsignedSuffixParserRuleCall_3_1() { return cUnsignedSuffixParserRuleCall_3_1; }
	}
	public class UnsignedSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.UnsignedSuffix");
		private final Assignment cUnsignedAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cUnsignedAlternatives_0 = (Alternatives)cUnsignedAssignment.eContents().get(0);
		private final Keyword cUnsignedUKeyword_0_0 = (Keyword)cUnsignedAlternatives_0.eContents().get(0);
		private final Keyword cUnsignedUKeyword_0_1 = (Keyword)cUnsignedAlternatives_0.eContents().get(1);
		
		//fragment UnsignedSuffix:
		//	unsigned?=('u' | 'U');
		@Override public ParserRule getRule() { return rule; }
		
		//unsigned?=('u' | 'U')
		public Assignment getUnsignedAssignment() { return cUnsignedAssignment; }
		
		//('u' | 'U')
		public Alternatives getUnsignedAlternatives_0() { return cUnsignedAlternatives_0; }
		
		//'u'
		public Keyword getUnsignedUKeyword_0_0() { return cUnsignedUKeyword_0_0; }
		
		//'U'
		public Keyword getUnsignedUKeyword_0_1() { return cUnsignedUKeyword_0_1; }
	}
	public class LongSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.LongSuffix");
		private final Assignment cLongAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cLongAlternatives_0 = (Alternatives)cLongAssignment.eContents().get(0);
		private final Keyword cLongLKeyword_0_0 = (Keyword)cLongAlternatives_0.eContents().get(0);
		private final Keyword cLongLKeyword_0_1 = (Keyword)cLongAlternatives_0.eContents().get(1);
		
		//fragment LongSuffix:
		//	long?=('l' | 'L');
		@Override public ParserRule getRule() { return rule; }
		
		//long?=('l' | 'L')
		public Assignment getLongAssignment() { return cLongAssignment; }
		
		//('l' | 'L')
		public Alternatives getLongAlternatives_0() { return cLongAlternatives_0; }
		
		//'l'
		public Keyword getLongLKeyword_0_0() { return cLongLKeyword_0_0; }
		
		//'L'
		public Keyword getLongLKeyword_0_1() { return cLongLKeyword_0_1; }
	}
	public class LongLongSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.LongLongSuffix");
		private final Assignment cLonglongAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cLonglongAlternatives_0 = (Alternatives)cLonglongAssignment.eContents().get(0);
		private final Keyword cLonglongLlKeyword_0_0 = (Keyword)cLonglongAlternatives_0.eContents().get(0);
		private final Keyword cLonglongLLKeyword_0_1 = (Keyword)cLonglongAlternatives_0.eContents().get(1);
		
		//fragment LongLongSuffix:
		//	longlong?=('ll' | 'LL');
		@Override public ParserRule getRule() { return rule; }
		
		//longlong?=('ll' | 'LL')
		public Assignment getLonglongAssignment() { return cLonglongAssignment; }
		
		//('ll' | 'LL')
		public Alternatives getLonglongAlternatives_0() { return cLonglongAlternatives_0; }
		
		//'ll'
		public Keyword getLonglongLlKeyword_0_0() { return cLonglongLlKeyword_0_0; }
		
		//'LL'
		public Keyword getLonglongLLKeyword_0_1() { return cLonglongLLKeyword_0_1; }
	}
	public class FloatingSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.FloatingSuffix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cFFKeyword_0_0 = (Keyword)cFAssignment_0.eContents().get(0);
		private final Assignment cLAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLLKeyword_1_0 = (Keyword)cLAssignment_1.eContents().get(0);
		private final Assignment cFAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cFFKeyword_2_0 = (Keyword)cFAssignment_2.eContents().get(0);
		private final Assignment cFAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cFLKeyword_3_0 = (Keyword)cFAssignment_3.eContents().get(0);
		
		//fragment FloatingSuffix:
		//	f?='f' | l?='l' | f?='F' | f?='L';
		@Override public ParserRule getRule() { return rule; }
		
		//f?='f' | l?='l' | f?='F' | f?='L'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//f?='f'
		public Assignment getFAssignment_0() { return cFAssignment_0; }
		
		//'f'
		public Keyword getFFKeyword_0_0() { return cFFKeyword_0_0; }
		
		//l?='l'
		public Assignment getLAssignment_1() { return cLAssignment_1; }
		
		//'l'
		public Keyword getLLKeyword_1_0() { return cLLKeyword_1_0; }
		
		//f?='F'
		public Assignment getFAssignment_2() { return cFAssignment_2; }
		
		//'F'
		public Keyword getFFKeyword_2_0() { return cFFKeyword_2_0; }
		
		//f?='L'
		public Assignment getFAssignment_3() { return cFAssignment_3; }
		
		//'L'
		public Keyword getFLKeyword_3_0() { return cFLKeyword_3_0; }
	}
	public class CharacterConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.CharacterConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValCHARCONSTTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cEncAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cEncLKeyword_1_0_0 = (Keyword)cEncAssignment_1_0.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValCHARCONSTTerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cEncAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cEncUKeyword_2_0_0 = (Keyword)cEncAssignment_2_0.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValCHARCONSTTerminalRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cEncAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cEncUKeyword_3_0_0 = (Keyword)cEncAssignment_3_0.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValCHARCONSTTerminalRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		
		//CharacterConstant:
		//	val=CHARCONST
		//	| enc="L" val=CHARCONST
		//	| enc="u" val=CHARCONST
		//	| enc="U" val=CHARCONST;
		@Override public ParserRule getRule() { return rule; }
		
		//val=CHARCONST | enc="L" val=CHARCONST | enc="u" val=CHARCONST | enc="U" val=CHARCONST
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//val=CHARCONST
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//CHARCONST
		public RuleCall getValCHARCONSTTerminalRuleCall_0_0() { return cValCHARCONSTTerminalRuleCall_0_0; }
		
		//enc="L" val=CHARCONST
		public Group getGroup_1() { return cGroup_1; }
		
		//enc="L"
		public Assignment getEncAssignment_1_0() { return cEncAssignment_1_0; }
		
		//"L"
		public Keyword getEncLKeyword_1_0_0() { return cEncLKeyword_1_0_0; }
		
		//val=CHARCONST
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//CHARCONST
		public RuleCall getValCHARCONSTTerminalRuleCall_1_1_0() { return cValCHARCONSTTerminalRuleCall_1_1_0; }
		
		//enc="u" val=CHARCONST
		public Group getGroup_2() { return cGroup_2; }
		
		//enc="u"
		public Assignment getEncAssignment_2_0() { return cEncAssignment_2_0; }
		
		//"u"
		public Keyword getEncUKeyword_2_0_0() { return cEncUKeyword_2_0_0; }
		
		//val=CHARCONST
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }
		
		//CHARCONST
		public RuleCall getValCHARCONSTTerminalRuleCall_2_1_0() { return cValCHARCONSTTerminalRuleCall_2_1_0; }
		
		//enc="U" val=CHARCONST
		public Group getGroup_3() { return cGroup_3; }
		
		//enc="U"
		public Assignment getEncAssignment_3_0() { return cEncAssignment_3_0; }
		
		//"U"
		public Keyword getEncUKeyword_3_0_0() { return cEncUKeyword_3_0_0; }
		
		//val=CHARCONST
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }
		
		//CHARCONST
		public RuleCall getValCHARCONSTTerminalRuleCall_3_1_0() { return cValCHARCONSTTerminalRuleCall_3_1_0; }
	}
	
	public class DataTypesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DataTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLBoolKeyword_0_0 = (Keyword)cBOOLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCHARCharKeyword_1_0 = (Keyword)cCHAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSHORTShortKeyword_2_0 = (Keyword)cSHORTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTIntKeyword_3_0 = (Keyword)cINTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLONGLongKeyword_4_0 = (Keyword)cLONGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSIGNEDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSIGNEDSignedKeyword_5_0 = (Keyword)cSIGNEDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cUNSIGNEDUnsignedKeyword_6_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFLOATFloatKeyword_7_0 = (Keyword)cFLOATEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDOUBLEDoubleKeyword_8_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cFRACEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cFRACFracKeyword_9_0 = (Keyword)cFRACEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cACCUMEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cACCUMAccumKeyword_10_0 = (Keyword)cACCUMEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum DataTypes:
		//	BOOL='bool' | CHAR='char' | SHORT='short' | INT='int' | LONG='long'
		//	| SIGNED='signed' | UNSIGNED='unsigned'
		//	| FLOAT='float' | DOUBLE='double'
		//	| FRAC='frac' | ACCUM='accum';
		public EnumRule getRule() { return rule; }
		
		//BOOL='bool' | CHAR='char' | SHORT='short' | INT='int' | LONG='long' | SIGNED='signed' | UNSIGNED='unsigned' |
		//FLOAT='float' | DOUBLE='double' | FRAC='frac' | ACCUM='accum'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOL='bool'
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_0() { return cBOOLEnumLiteralDeclaration_0; }
		
		//'bool'
		public Keyword getBOOLBoolKeyword_0_0() { return cBOOLBoolKeyword_0_0; }
		
		//CHAR='char'
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_1() { return cCHAREnumLiteralDeclaration_1; }
		
		//'char'
		public Keyword getCHARCharKeyword_1_0() { return cCHARCharKeyword_1_0; }
		
		//SHORT='short'
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_2() { return cSHORTEnumLiteralDeclaration_2; }
		
		//'short'
		public Keyword getSHORTShortKeyword_2_0() { return cSHORTShortKeyword_2_0; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_3() { return cINTEnumLiteralDeclaration_3; }
		
		//'int'
		public Keyword getINTIntKeyword_3_0() { return cINTIntKeyword_3_0; }
		
		//LONG='long'
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_4() { return cLONGEnumLiteralDeclaration_4; }
		
		//'long'
		public Keyword getLONGLongKeyword_4_0() { return cLONGLongKeyword_4_0; }
		
		//SIGNED='signed'
		public EnumLiteralDeclaration getSIGNEDEnumLiteralDeclaration_5() { return cSIGNEDEnumLiteralDeclaration_5; }
		
		//'signed'
		public Keyword getSIGNEDSignedKeyword_5_0() { return cSIGNEDSignedKeyword_5_0; }
		
		//UNSIGNED='unsigned'
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_6() { return cUNSIGNEDEnumLiteralDeclaration_6; }
		
		//'unsigned'
		public Keyword getUNSIGNEDUnsignedKeyword_6_0() { return cUNSIGNEDUnsignedKeyword_6_0; }
		
		//FLOAT='float'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_7() { return cFLOATEnumLiteralDeclaration_7; }
		
		//'float'
		public Keyword getFLOATFloatKeyword_7_0() { return cFLOATFloatKeyword_7_0; }
		
		//DOUBLE='double'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_8() { return cDOUBLEEnumLiteralDeclaration_8; }
		
		//'double'
		public Keyword getDOUBLEDoubleKeyword_8_0() { return cDOUBLEDoubleKeyword_8_0; }
		
		//FRAC='frac'
		public EnumLiteralDeclaration getFRACEnumLiteralDeclaration_9() { return cFRACEnumLiteralDeclaration_9; }
		
		//'frac'
		public Keyword getFRACFracKeyword_9_0() { return cFRACFracKeyword_9_0; }
		
		//ACCUM='accum'
		public EnumLiteralDeclaration getACCUMEnumLiteralDeclaration_10() { return cACCUMEnumLiteralDeclaration_10; }
		
		//'accum'
		public Keyword getACCUMAccumKeyword_10_0() { return cACCUMAccumKeyword_10_0; }
	}
	public class TypeQualifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.TypeQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCONSTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCONSTConstKeyword_0_0 = (Keyword)cCONSTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVOLATILEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVOLATILEVolatileKeyword_1_0 = (Keyword)cVOLATILEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TypeQualifier:
		//	CONST='const' | VOLATILE='volatile';
		public EnumRule getRule() { return rule; }
		
		//CONST='const' | VOLATILE='volatile'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CONST='const'
		public EnumLiteralDeclaration getCONSTEnumLiteralDeclaration_0() { return cCONSTEnumLiteralDeclaration_0; }
		
		//'const'
		public Keyword getCONSTConstKeyword_0_0() { return cCONSTConstKeyword_0_0; }
		
		//VOLATILE='volatile'
		public EnumLiteralDeclaration getVOLATILEEnumLiteralDeclaration_1() { return cVOLATILEEnumLiteralDeclaration_1; }
		
		//'volatile'
		public Keyword getVOLATILEVolatileKeyword_1_0() { return cVOLATILEVolatileKeyword_1_0; }
	}
	public class StorageClassSpecifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.StorageClassSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEXTERNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEXTERNExternKeyword_0_0 = (Keyword)cEXTERNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTATICStaticKeyword_1_0 = (Keyword)cSTATICEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum StorageClassSpecifier:
		//	EXTERN='extern' | STATIC='static';
		public EnumRule getRule() { return rule; }
		
		//EXTERN='extern' | STATIC='static'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EXTERN='extern'
		public EnumLiteralDeclaration getEXTERNEnumLiteralDeclaration_0() { return cEXTERNEnumLiteralDeclaration_0; }
		
		//'extern'
		public Keyword getEXTERNExternKeyword_0_0() { return cEXTERNExternKeyword_0_0; }
		
		//STATIC='static'
		public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_1() { return cSTATICEnumLiteralDeclaration_1; }
		
		//'static'
		public Keyword getSTATICStaticKeyword_1_0() { return cSTATICStaticKeyword_1_0; }
	}
	public class AttributeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIS_PCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIS_PCIs_pcKeyword_1_0 = (Keyword)cIS_PCEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDELEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDELDeleteKeyword_2_0 = (Keyword)cDELEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Attribute:
		//	NONE | IS_PC='is_pc' | DEL='delete';
		public EnumRule getRule() { return rule; }
		
		//NONE | IS_PC='is_pc' | DEL='delete'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//"NONE"
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//IS_PC='is_pc'
		public EnumLiteralDeclaration getIS_PCEnumLiteralDeclaration_1() { return cIS_PCEnumLiteralDeclaration_1; }
		
		//'is_pc'
		public Keyword getIS_PCIs_pcKeyword_1_0() { return cIS_PCIs_pcKeyword_1_0; }
		
		//DEL='delete'
		public EnumLiteralDeclaration getDELEnumLiteralDeclaration_2() { return cDELEnumLiteralDeclaration_2; }
		
		//'delete'
		public Keyword getDELDeleteKeyword_2_0() { return cDELDeleteKeyword_2_0; }
	}
	public class InstrAttributeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.InstrAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNO_CONTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNO_CONTNo_contKeyword_1_0 = (Keyword)cNO_CONTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONDCondKeyword_2_0 = (Keyword)cCONDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFLUSHEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFLUSHFlushKeyword_3_0 = (Keyword)cFLUSHEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum InstrAttribute:
		//	NONE | NO_CONT='no_cont' | COND='cond' | FLUSH='flush';
		public EnumRule getRule() { return rule; }
		
		//NONE | NO_CONT='no_cont' | COND='cond' | FLUSH='flush'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//"NONE"
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//NO_CONT='no_cont'
		public EnumLiteralDeclaration getNO_CONTEnumLiteralDeclaration_1() { return cNO_CONTEnumLiteralDeclaration_1; }
		
		//'no_cont'
		public Keyword getNO_CONTNo_contKeyword_1_0() { return cNO_CONTNo_contKeyword_1_0; }
		
		//COND='cond'
		public EnumLiteralDeclaration getCONDEnumLiteralDeclaration_2() { return cCONDEnumLiteralDeclaration_2; }
		
		//'cond'
		public Keyword getCONDCondKeyword_2_0() { return cCONDCondKeyword_2_0; }
		
		//FLUSH='flush'
		public EnumLiteralDeclaration getFLUSHEnumLiteralDeclaration_3() { return cFLUSHEnumLiteralDeclaration_3; }
		
		//'flush'
		public Keyword getFLUSHFlushKeyword_3_0() { return cFLUSHFlushKeyword_3_0; }
	}
	public class StructOrUnionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.StructOrUnion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRUCTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRUCTStructKeyword_0_0 = (Keyword)cSTRUCTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNIONUnionKeyword_1_0 = (Keyword)cUNIONEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum StructOrUnion:
		//	STRUCT='struct' | UNION='union';
		public EnumRule getRule() { return rule; }
		
		//STRUCT='struct' | UNION='union'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRUCT='struct'
		public EnumLiteralDeclaration getSTRUCTEnumLiteralDeclaration_0() { return cSTRUCTEnumLiteralDeclaration_0; }
		
		//'struct'
		public Keyword getSTRUCTStructKeyword_0_0() { return cSTRUCTStructKeyword_0_0; }
		
		//UNION='union'
		public EnumLiteralDeclaration getUNIONEnumLiteralDeclaration_1() { return cUNIONEnumLiteralDeclaration_1; }
		
		//'union'
		public Keyword getUNIONUnionKeyword_1_0() { return cUNIONUnionKeyword_1_0; }
	}
	public class BitfieldDataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BitfieldDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNSIGNEDUKeyword_0_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSIGNEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSIGNEDSKeyword_1_0 = (Keyword)cSIGNEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BitfieldDataType:
		//	UNSIGNED="u" | SIGNED="s";
		public EnumRule getRule() { return rule; }
		
		//UNSIGNED="u" | SIGNED="s"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNSIGNED="u"
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_0() { return cUNSIGNEDEnumLiteralDeclaration_0; }
		
		//"u"
		public Keyword getUNSIGNEDUKeyword_0_0() { return cUNSIGNEDUKeyword_0_0; }
		
		//SIGNED="s"
		public EnumLiteralDeclaration getSIGNEDEnumLiteralDeclaration_1() { return cSIGNEDEnumLiteralDeclaration_1; }
		
		//"s"
		public Keyword getSIGNEDSKeyword_1_0() { return cSIGNEDSKeyword_1_0; }
	}
	
	private final DescriptionContentElements pDescriptionContent;
	private final ImportElements pImport;
	private final ISAElements pISA;
	private final InstructionSetElements pInstructionSet;
	private final CoreDefElements pCoreDef;
	private final InstructionElements pInstruction;
	private final EncodingElements pEncoding;
	private final FieldElements pField;
	private final BitValueElements pBitValue;
	private final BitFieldElements pBitField;
	private final RangeSpecElements pRangeSpec;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final ParameterListElements pParameterList;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final StatementElements pStatement;
	private final LabeledStatementElements pLabeledStatement;
	private final CompoundStatementElements pCompoundStatement;
	private final BlockItemElements pBlockItem;
	private final ExpressionStatementElements pExpressionStatement;
	private final SelectionStatementElements pSelectionStatement;
	private final IfStatementElements pIfStatement;
	private final SwitchStatementElements pSwitchStatement;
	private final IterationStatementElements pIterationStatement;
	private final ForConditionElements pForCondition;
	private final JumpStatementElements pJumpStatement;
	private final DeclarationElements pDeclaration;
	private final TypeOrVarDeclarationElements pTypeOrVarDeclaration;
	private final TypedefDeclarationElements pTypedefDeclaration;
	private final DeclarationSpecifierElements pDeclarationSpecifier;
	private final AttributeListElements pAttributeList;
	private final TypeSpecifierElements pTypeSpecifier;
	private final DataTypeSpecifierElements pDataTypeSpecifier;
	private final TypedefRefElements pTypedefRef;
	private final PodSpecifierElements pPodSpecifier;
	private final BitSizeSpecifierElements pBitSizeSpecifier;
	private final EnumSpecifierElements pEnumSpecifier;
	private final EnumeratorListElements pEnumeratorList;
	private final EnumeratorElements pEnumerator;
	private final StructOrUnionSpecifierElements pStructOrUnionSpecifier;
	private final StructDeclarationElements pStructDeclaration;
	private final StructDeclarationSpecifierElements pStructDeclarationSpecifier;
	private final InitDeclaratorElements pInitDeclarator;
	private final DirectDeclaratorElements pDirectDeclarator;
	private final InitializerListElements pInitializerList;
	private final InitializerElements pInitializer;
	private final DesignatedInitializerElements pDesignatedInitializer;
	private final DesignatorElements pDesignator;
	private final AbstractDeclaratorElements pAbstractDeclarator;
	private final DirectAbstractDeclaratorElements pDirectAbstractDeclarator;
	private final ExpressionElements pExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final ConditionalExpressionElements pConditionalExpression;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final InclusiveOrExpressionElements pInclusiveOrExpression;
	private final ExclusiveOrExpressionElements pExclusiveOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final ShiftExpressionElements pShiftExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final CastExpressionElements pCastExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final PostfixExpressionElements pPostfixExpression;
	private final PostfixOperatorElements pPostfixOperator;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final VariableRefElements pVariableRef;
	private final StringLiteralElements pStringLiteral;
	private final EncodingPrefixElements pEncodingPrefix;
	private final ConstantExpressionElements pConstantExpression;
	private final ConstantElements pConstant;
	private final IntegerConstantElements pIntegerConstant;
	private final FloatingConstantElements pFloatingConstant;
	private final BoolConstantElements pBoolConstant;
	private final IntegerSuffixElements pIntegerSuffix;
	private final UnsignedSuffixElements pUnsignedSuffix;
	private final LongSuffixElements pLongSuffix;
	private final LongLongSuffixElements pLongLongSuffix;
	private final FloatingSuffixElements pFloatingSuffix;
	private final CharacterConstantElements pCharacterConstant;
	private final DataTypesElements eDataTypes;
	private final TypeQualifierElements eTypeQualifier;
	private final StorageClassSpecifierElements eStorageClassSpecifier;
	private final AttributeElements eAttribute;
	private final InstrAttributeElements eInstrAttribute;
	private final StructOrUnionElements eStructOrUnion;
	private final BitfieldDataTypeElements eBitfieldDataType;
	private final TerminalRule tBVAL;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tFLOAT;
	private final TerminalRule tNATURAL;
	private final TerminalRule tBINARYCONSTANT;
	private final TerminalRule tOCTALCONSTANT;
	private final TerminalRule tDECIMALCONSTANT;
	private final TerminalRule tHEXADECIMALCONSTANT;
	private final TerminalRule tCHARCONST;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CoreDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDescriptionContent = new DescriptionContentElements();
		this.pImport = new ImportElements();
		this.pISA = new ISAElements();
		this.pInstructionSet = new InstructionSetElements();
		this.pCoreDef = new CoreDefElements();
		this.pInstruction = new InstructionElements();
		this.pEncoding = new EncodingElements();
		this.pField = new FieldElements();
		this.pBitValue = new BitValueElements();
		this.pBitField = new BitFieldElements();
		this.pRangeSpec = new RangeSpecElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pStatement = new StatementElements();
		this.pLabeledStatement = new LabeledStatementElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pBlockItem = new BlockItemElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pSelectionStatement = new SelectionStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pSwitchStatement = new SwitchStatementElements();
		this.pIterationStatement = new IterationStatementElements();
		this.pForCondition = new ForConditionElements();
		this.pJumpStatement = new JumpStatementElements();
		this.pDeclaration = new DeclarationElements();
		this.pTypeOrVarDeclaration = new TypeOrVarDeclarationElements();
		this.pTypedefDeclaration = new TypedefDeclarationElements();
		this.pDeclarationSpecifier = new DeclarationSpecifierElements();
		this.pAttributeList = new AttributeListElements();
		this.pTypeSpecifier = new TypeSpecifierElements();
		this.pDataTypeSpecifier = new DataTypeSpecifierElements();
		this.pTypedefRef = new TypedefRefElements();
		this.pPodSpecifier = new PodSpecifierElements();
		this.pBitSizeSpecifier = new BitSizeSpecifierElements();
		this.pEnumSpecifier = new EnumSpecifierElements();
		this.pEnumeratorList = new EnumeratorListElements();
		this.pEnumerator = new EnumeratorElements();
		this.pStructOrUnionSpecifier = new StructOrUnionSpecifierElements();
		this.pStructDeclaration = new StructDeclarationElements();
		this.pStructDeclarationSpecifier = new StructDeclarationSpecifierElements();
		this.pInitDeclarator = new InitDeclaratorElements();
		this.pDirectDeclarator = new DirectDeclaratorElements();
		this.pInitializerList = new InitializerListElements();
		this.pInitializer = new InitializerElements();
		this.pDesignatedInitializer = new DesignatedInitializerElements();
		this.pDesignator = new DesignatorElements();
		this.pAbstractDeclarator = new AbstractDeclaratorElements();
		this.pDirectAbstractDeclarator = new DirectAbstractDeclaratorElements();
		this.pExpression = new ExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pInclusiveOrExpression = new InclusiveOrExpressionElements();
		this.pExclusiveOrExpression = new ExclusiveOrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pShiftExpression = new ShiftExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pCastExpression = new CastExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pPostfixOperator = new PostfixOperatorElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pVariableRef = new VariableRefElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pEncodingPrefix = new EncodingPrefixElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pConstant = new ConstantElements();
		this.pIntegerConstant = new IntegerConstantElements();
		this.pFloatingConstant = new FloatingConstantElements();
		this.pBoolConstant = new BoolConstantElements();
		this.pIntegerSuffix = new IntegerSuffixElements();
		this.pUnsignedSuffix = new UnsignedSuffixElements();
		this.pLongSuffix = new LongSuffixElements();
		this.pLongLongSuffix = new LongLongSuffixElements();
		this.pFloatingSuffix = new FloatingSuffixElements();
		this.pCharacterConstant = new CharacterConstantElements();
		this.eDataTypes = new DataTypesElements();
		this.eTypeQualifier = new TypeQualifierElements();
		this.eStorageClassSpecifier = new StorageClassSpecifierElements();
		this.eAttribute = new AttributeElements();
		this.eInstrAttribute = new InstrAttributeElements();
		this.eStructOrUnion = new StructOrUnionElements();
		this.eBitfieldDataType = new BitfieldDataTypeElements();
		this.tBVAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BVAL");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BOOLEAN");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.FLOAT");
		this.tNATURAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.NATURAL");
		this.tBINARYCONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.BINARYCONSTANT");
		this.tOCTALCONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.OCTALCONSTANT");
		this.tDECIMALCONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.DECIMALCONSTANT");
		this.tHEXADECIMALCONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.HEXADECIMALCONSTANT");
		this.tCHARCONST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.CHARCONST");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.minres.coredsl.CoreDsl.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.minres.coredsl.CoreDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DescriptionContent:
	//	imports+=Import* definitions+=ISA+;
	public DescriptionContentElements getDescriptionContentAccess() {
		return pDescriptionContent;
	}
	
	public ParserRule getDescriptionContentRule() {
		return getDescriptionContentAccess().getRule();
	}
	
	//Import:
	//	'import' importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ISA:
	//	InstructionSet
	//	| CoreDef;
	public ISAElements getISAAccess() {
		return pISA;
	}
	
	public ParserRule getISARule() {
		return getISAAccess().getRule();
	}
	
	//InstructionSet:
	//	'InstructionSet' name=ID ('extends' superType=[InstructionSet])? '{' ('constants' '{' constants+=Declaration+ '}')?
	//	('address_spaces' '{' spaces+=Declaration+ '}')? ('registers' '{' regs+=Declaration+ '}')? ('functions' '{'
	//	func+=FunctionDefinition+ '}')? ('instructions' '{' instr+=Instruction+ '}')
	//	'}';
	public InstructionSetElements getInstructionSetAccess() {
		return pInstructionSet;
	}
	
	public ParserRule getInstructionSetRule() {
		return getInstructionSetAccess().getRule();
	}
	
	//CoreDef:
	//	'Core' name=ID ('provides' contributingType+=[InstructionSet] (',' contributingType+=[InstructionSet])*)? '{'
	//	('constants' '{' constants+=Declaration+ '}')? ('address_spaces' '{' spaces+=Declaration+ '}')? ('registers' '{'
	//	regs+=Declaration+ '}')? ('instructions' '{' instr+=Instruction+ '}')?
	//	'}';
	public CoreDefElements getCoreDefAccess() {
		return pCoreDef;
	}
	
	public ParserRule getCoreDefRule() {
		return getCoreDefAccess().getRule();
	}
	
	//Instruction:
	//	name=ID ('[[' attributes+=InstrAttribute (',' attributes+=InstrAttribute)* ']]')? '{' ('encoding' ':'
	//	encoding=Encoding ';') ('args_disass' ':' disass=STRING ';')? ('behavior' ':' behavior=CompoundStatement)
	//	'}';
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Encoding:
	//	fields+=Field ('|' fields+=Field)*;
	public EncodingElements getEncodingAccess() {
		return pEncoding;
	}
	
	public ParserRule getEncodingRule() {
		return getEncodingAccess().getRule();
	}
	
	//Field:
	//	BitValue
	//	| BitField;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//BitValue:
	//	name=BVAL;
	public BitValueElements getBitValueAccess() {
		return pBitValue;
	}
	
	public ParserRule getBitValueRule() {
		return getBitValueAccess().getRule();
	}
	
	//BitField:
	//	name=ID bitRange=RangeSpec ("'"? type=BitfieldDataType)?;
	public BitFieldElements getBitFieldAccess() {
		return pBitField;
	}
	
	public ParserRule getBitFieldRule() {
		return getBitFieldAccess().getRule();
	}
	
	//RangeSpec:
	//	'[' left=NATURAL ':' right=NATURAL ']';
	public RangeSpecElements getRangeSpecAccess() {
		return pRangeSpec;
	}
	
	public ParserRule getRangeSpecRule() {
		return getRangeSpecAccess().getRule();
	}
	
	//FunctionDefinition:
	//	extern?='extern'? type=TypeSpecifier name=ID '(' ParameterList ')' statement=CompoundStatement;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	//fragment ParameterList:
	//	params+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDeclaration:
	//	type=TypeSpecifier (declarator=DirectDeclarator
	//	| declarator=AbstractDeclarator)?;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}
	
	/////////////////////////////////////////////////////////////////////////////////
	//// Statements
	//Statement:
	//	CompoundStatement
	//	| ExpressionStatement
	//	| SelectionStatement
	//	| IterationStatement
	//	| JumpStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//LabeledStatement:
	//	'case' constExpr=ConstantExpression ':' stmt=Statement
	//	| 'default' ':' stmt=Statement;
	public LabeledStatementElements getLabeledStatementAccess() {
		return pLabeledStatement;
	}
	
	public ParserRule getLabeledStatementRule() {
		return getLabeledStatementAccess().getRule();
	}
	
	//CompoundStatement:
	//	{CompoundStatement} '{' items+=BlockItem* '}';
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}
	
	//BlockItem:
	//	Statement
	//	| Declaration;
	public BlockItemElements getBlockItemAccess() {
		return pBlockItem;
	}
	
	public ParserRule getBlockItemRule() {
		return getBlockItemAccess().getRule();
	}
	
	//ExpressionStatement:
	//	{ExpressionStatement} expr=AssignmentExpression? ';';
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//SelectionStatement:
	//	IfStatement
	//	| SwitchStatement;
	public SelectionStatementElements getSelectionStatementAccess() {
		return pSelectionStatement;
	}
	
	public ParserRule getSelectionStatementRule() {
		return getSelectionStatementAccess().getRule();
	}
	
	//IfStatement:
	//	'if' '(' cond=ConditionalExpression ')' thenStmt=Statement (=> 'else' elseStmt=Statement)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//SwitchStatement:
	//	'switch' '(' cond=ConditionalExpression ')' '{' items+=LabeledStatement '}';
	public SwitchStatementElements getSwitchStatementAccess() {
		return pSwitchStatement;
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}
	
	//IterationStatement:
	//	type='while' '(' cond=ConditionalExpression ')' stmt=Statement
	//	| type='do' stmt=Statement 'while' '(' cond=ConditionalExpression ')' ';'
	//	| type='for' '(' ForCondition ')' stmt=Statement;
	public IterationStatementElements getIterationStatementAccess() {
		return pIterationStatement;
	}
	
	public ParserRule getIterationStatementRule() {
		return getIterationStatementAccess().getRule();
	}
	
	//fragment ForCondition:
	//	(startDecl=Declaration | startExpr=Expression? ';') endExpr=ConditionalExpression? ';'
	//	(loopExprs+=AssignmentExpression (',' loopExprs+=AssignmentExpression)*)?;
	public ForConditionElements getForConditionAccess() {
		return pForCondition;
	}
	
	public ParserRule getForConditionRule() {
		return getForConditionAccess().getRule();
	}
	
	//JumpStatement:
	//	type='continue' ';'
	//	| type='break' ';'
	//	| type='return' expr=ConditionalExpression? ';';
	public JumpStatementElements getJumpStatementAccess() {
		return pJumpStatement;
	}
	
	public ParserRule getJumpStatementRule() {
		return getJumpStatementAccess().getRule();
	}
	
	/////////////////////////////////////////////////////////////////////////////////
	//// Declarations
	//Declaration:
	//	TypeOrVarDeclaration
	//	| TypedefDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//TypeOrVarDeclaration:
	//	DeclarationSpecifier* type=TypeSpecifier size=BitSizeSpecifier? (init+=InitDeclarator (',' init+=InitDeclarator)*)?
	//	';';
	public TypeOrVarDeclarationElements getTypeOrVarDeclarationAccess() {
		return pTypeOrVarDeclaration;
	}
	
	public ParserRule getTypeOrVarDeclarationRule() {
		return getTypeOrVarDeclarationAccess().getRule();
	}
	
	//TypedefDeclaration:
	//	'typedef' DeclarationSpecifier* type=TypeSpecifier init+=InitDeclarator ';';
	public TypedefDeclarationElements getTypedefDeclarationAccess() {
		return pTypedefDeclaration;
	}
	
	public ParserRule getTypedefDeclarationRule() {
		return getTypedefDeclarationAccess().getRule();
	}
	
	//fragment DeclarationSpecifier:
	//	storage+=StorageClassSpecifier
	//	| qualifiers+=TypeQualifier
	//	| AttributeList;
	public DeclarationSpecifierElements getDeclarationSpecifierAccess() {
		return pDeclarationSpecifier;
	}
	
	public ParserRule getDeclarationSpecifierRule() {
		return getDeclarationSpecifierAccess().getRule();
	}
	
	//fragment AttributeList:
	//	'[[' attrs+=Attribute (',' attrs+=Attribute)* ']]';
	public AttributeListElements getAttributeListAccess() {
		return pAttributeList;
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}
	
	//TypeSpecifier:
	//	DataTypeSpecifier
	//	| TypedefRef;
	public TypeSpecifierElements getTypeSpecifierAccess() {
		return pTypeSpecifier;
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}
	
	//DataTypeSpecifier:
	//	PodSpecifier
	//	| StructOrUnionSpecifier
	//	| EnumSpecifier;
	public DataTypeSpecifierElements getDataTypeSpecifierAccess() {
		return pDataTypeSpecifier;
	}
	
	public ParserRule getDataTypeSpecifierRule() {
		return getDataTypeSpecifierAccess().getRule();
	}
	
	//TypedefRef:
	//	ref=[DirectDeclarator];
	public TypedefRefElements getTypedefRefAccess() {
		return pTypedefRef;
	}
	
	public ParserRule getTypedefRefRule() {
		return getTypedefRefAccess().getRule();
	}
	
	//PodSpecifier:
	//	dataType+=DataTypes+;
	public PodSpecifierElements getPodSpecifierAccess() {
		return pPodSpecifier;
	}
	
	public ParserRule getPodSpecifierRule() {
		return getPodSpecifierAccess().getRule();
	}
	
	//BitSizeSpecifier:
	//	'<' (value=NATURAL | constant=[Constant]) '>';
	public BitSizeSpecifierElements getBitSizeSpecifierAccess() {
		return pBitSizeSpecifier;
	}
	
	public ParserRule getBitSizeSpecifierRule() {
		return getBitSizeSpecifierAccess().getRule();
	}
	
	//EnumSpecifier:
	//	'enum' name=ID? '{' EnumeratorList ','? '}'
	//	| 'enum' name=ID;
	public EnumSpecifierElements getEnumSpecifierAccess() {
		return pEnumSpecifier;
	}
	
	public ParserRule getEnumSpecifierRule() {
		return getEnumSpecifierAccess().getRule();
	}
	
	//fragment EnumeratorList:
	//	enumerators+=Enumerator (',' enumerators+=Enumerator)*;
	public EnumeratorListElements getEnumeratorListAccess() {
		return pEnumeratorList;
	}
	
	public ParserRule getEnumeratorListRule() {
		return getEnumeratorListAccess().getRule();
	}
	
	//Enumerator:
	//	name=ID
	//	| name=ID '=' expression=ConstantExpression;
	public EnumeratorElements getEnumeratorAccess() {
		return pEnumerator;
	}
	
	public ParserRule getEnumeratorRule() {
		return getEnumeratorAccess().getRule();
	}
	
	//StructOrUnionSpecifier:
	//	composeType=StructOrUnion name=ID? '{' decls+=StructDeclaration* '}'
	//	| composeType=StructOrUnion name=ID;
	public StructOrUnionSpecifierElements getStructOrUnionSpecifierAccess() {
		return pStructOrUnionSpecifier;
	}
	
	public ParserRule getStructOrUnionSpecifierRule() {
		return getStructOrUnionSpecifierAccess().getRule();
	}
	
	//StructDeclaration:
	//	specifier=StructDeclarationSpecifier decls+=DirectDeclarator (',' decls+=DirectDeclarator)* ';';
	public StructDeclarationElements getStructDeclarationAccess() {
		return pStructDeclaration;
	}
	
	public ParserRule getStructDeclarationRule() {
		return getStructDeclarationAccess().getRule();
	}
	
	//StructDeclarationSpecifier:
	//	type=TypeSpecifier
	//	| qualifiers+=TypeQualifier;
	public StructDeclarationSpecifierElements getStructDeclarationSpecifierAccess() {
		return pStructDeclarationSpecifier;
	}
	
	public ParserRule getStructDeclarationSpecifierRule() {
		return getStructDeclarationSpecifierAccess().getRule();
	}
	
	//InitDeclarator:
	//	declarator=DirectDeclarator ('=' initializer=Initializer)?;
	public InitDeclaratorElements getInitDeclaratorAccess() {
		return pInitDeclarator;
	}
	
	public ParserRule getInitDeclaratorRule() {
		return getInitDeclaratorAccess().getRule();
	}
	
	//DirectDeclarator:
	//	name=ID (':' index=IntegerConstant)? ({DirectDeclarator.left=current} '[' qualifiers+=TypeQualifier?
	//	expr=ConditionalExpression? ']'
	//	//    	|   {DirectDeclarator.left=current} '[' (qualifiers+=TypeQualifier)? '*' ']'
	//	//    	|   {DirectDeclarator.left=current} '(' ParameterList ')'
	//)?;
	public DirectDeclaratorElements getDirectDeclaratorAccess() {
		return pDirectDeclarator;
	}
	
	public ParserRule getDirectDeclaratorRule() {
		return getDirectDeclaratorAccess().getRule();
	}
	
	//fragment InitializerList:
	//	init+=(DesignatedInitializer | Initializer) (',' init+=(DesignatedInitializer | Initializer))?;
	public InitializerListElements getInitializerListAccess() {
		return pInitializerList;
	}
	
	public ParserRule getInitializerListRule() {
		return getInitializerListAccess().getRule();
	}
	
	//Initializer:
	//	expr=ConditionalExpression
	//	| '{' InitializerList ','? '}';
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	//DesignatedInitializer:
	//	designators+=Designator+ '=' init=Initializer;
	public DesignatedInitializerElements getDesignatedInitializerAccess() {
		return pDesignatedInitializer;
	}
	
	public ParserRule getDesignatedInitializerRule() {
		return getDesignatedInitializerAccess().getRule();
	}
	
	//Designator:
	//	'[' idx=ConstantExpression ']'
	//	| '.' prop=ID;
	public DesignatorElements getDesignatorAccess() {
		return pDesignator;
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}
	
	//AbstractDeclarator:
	//	DirectAbstractDeclarator;
	public AbstractDeclaratorElements getAbstractDeclaratorAccess() {
		return pAbstractDeclarator;
	}
	
	public ParserRule getAbstractDeclaratorRule() {
		return getAbstractDeclaratorAccess().getRule();
	}
	
	///*
	// direct_abstract_declarator
	//	: '(' abstract_declarator ')'
	//	| '(' parameter_type_list ')'
	//	| '(' ')'
	//	| '[' constant_expression ']'
	//	| '[' ']'
	//	| direct_abstract_declarator '[' ']'
	//	| direct_abstract_declarator '[' constant_expression ']'
	//	| direct_abstract_declarator '(' ')'
	//	| direct_abstract_declarator '(' parameter_type_list ')'
	//	;
	// 
	// */ DirectAbstractDeclarator:
	//	{DirectAbstractDeclarator} '(' (declarator=AbstractDeclarator? | ParameterList) ')'
	//	| {DirectAbstractDeclarator} '[' expr=ConstantExpression? ']';
	public DirectAbstractDeclaratorElements getDirectAbstractDeclaratorAccess() {
		return pDirectAbstractDeclarator;
	}
	
	public ParserRule getDirectAbstractDeclaratorRule() {
		return getDirectAbstractDeclaratorAccess().getRule();
	}
	
	/////////////////////////////////////////////////////////////////////////////////
	//// Expressions
	//Expression:
	//	AssignmentExpression ({Expression.left=current} ',' right=AssignmentExpression)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AssignmentExpression Expression:
	//	UnaryExpression {AssignmentExpression.left=current} op=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&='
	//	| '^=' | '|=') right=ConditionalExpression;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//ConditionalExpression Expression:
	//	LogicalOrExpression ({ConditionalExpression.cond=current} '?' left=ConditionalExpression ':'
	//	right=ConditionalExpression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({LogicalExpr.left=current} op='||' right=LogicalOrExpression)?;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression Expression:
	//	InclusiveOrExpression ({LogicalExpr.left=current} op='&&' right=LogicalAndExpression)?;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//InclusiveOrExpression Expression:
	//	ExclusiveOrExpression ({LogicalExpr.left=current} op='|' right=InclusiveOrExpression)?;
	public InclusiveOrExpressionElements getInclusiveOrExpressionAccess() {
		return pInclusiveOrExpression;
	}
	
	public ParserRule getInclusiveOrExpressionRule() {
		return getInclusiveOrExpressionAccess().getRule();
	}
	
	//ExclusiveOrExpression Expression:
	//	AndExpression ({LogicalExpr.left=current} op='^' right=ExclusiveOrExpression)?;
	public ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return pExclusiveOrExpression;
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	EqualityExpression ({LogicalExpr.left=current} op='&' right=AndExpression)?;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	RelationalExpression ({LogicalExpr.left=current} op=('==' | '!=') right=EqualityExpression)?;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression Expression:
	//	ShiftExpression ({LogicalExpr.left=current} op=('<' | '>' | '<=' | '>=') right=RelationalExpression)?;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//ShiftExpression Expression:
	//	AdditiveExpression ({ArithmeticExpression.left=current} op=('<<' | '>>') right=ShiftExpression)?;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return pShiftExpression;
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({ArithmeticExpression.left=current} op=('+' | '-') right=AdditiveExpression)?;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression Expression:
	//	CastExpression ({ArithmeticExpression.left=current} op=('*' | '/' | '%') right=MultiplicativeExpression)?;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//CastExpression:
	//	UnaryExpression
	//	| '(' type=DataTypeSpecifier ')' left=CastExpression;
	public CastExpressionElements getCastExpressionAccess() {
		return pCastExpression;
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//UnaryExpression:
	//	PostfixExpression
	//	| op='++' left=UnaryExpression
	//	| op='--' left=UnaryExpression
	//	| UnaryOperator left=CastExpression
	//	| op='sizeof' '(' (left=PostfixExpression | type=DataTypeSpecifier) ')'
	//	//    |   op='_Alignof' '(' type=TypeSpecifier ')'
	//;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//fragment UnaryOperator:
	//	op=('&' | '*' | '+' | '-' | '~' | '!');
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//PostfixExpression:
	//	PrimaryExpression ({PostfixExpression.left=current} ops+=PostfixOperator)*;
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	//PostfixOperator:
	//	op='[' args+=ConditionalExpression (':' args+=ConditionalExpression)? ']'
	//	| op='(' (args+=ConditionalExpression (',' args+=ConditionalExpression)*)? ')' //function call
	//	| op='.' member=[DirectDeclarator] | op='->' member=[DirectDeclarator] | op='++'
	//	| op='--';
	public PostfixOperatorElements getPostfixOperatorAccess() {
		return pPostfixOperator;
	}
	
	public ParserRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	//PrimaryExpression:
	//	ref=[VariableRef] | constant=Constant
	//	| literal+=StringLiteral+
	//	| '(' left=ConditionalExpression ')';
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//VariableRef hidden():
	//	FunctionDefinition | DirectDeclarator | Field;
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//StringLiteral:
	//	EncodingPrefix? val=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//fragment EncodingPrefix:
	//	prefix=('u8' | 'u' | 'U' | 'L');
	public EncodingPrefixElements getEncodingPrefixAccess() {
		return pEncodingPrefix;
	}
	
	public ParserRule getEncodingPrefixRule() {
		return getEncodingPrefixAccess().getRule();
	}
	
	//ConstantExpression Expression:
	//	ConditionalExpression;
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	/////////////////////////////////////////////////////////////////////////////////
	//// Constants
	//Constant:
	//	IntegerConstant
	//	| FloatingConstant
	//	| CharacterConstant
	//	| BoolConstant;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//IntegerConstant:
	//	val=NATURAL IntegerSuffix?;
	public IntegerConstantElements getIntegerConstantAccess() {
		return pIntegerConstant;
	}
	
	public ParserRule getIntegerConstantRule() {
		return getIntegerConstantAccess().getRule();
	}
	
	//FloatingConstant:
	//	val=FLOAT FloatingSuffix?;
	public FloatingConstantElements getFloatingConstantAccess() {
		return pFloatingConstant;
	}
	
	public ParserRule getFloatingConstantRule() {
		return getFloatingConstantAccess().getRule();
	}
	
	//BoolConstant:
	//	val=BOOLEAN;
	public BoolConstantElements getBoolConstantAccess() {
		return pBoolConstant;
	}
	
	public ParserRule getBoolConstantRule() {
		return getBoolConstantAccess().getRule();
	}
	
	//fragment IntegerSuffix:
	//	UnsignedSuffix LongSuffix?
	//	| UnsignedSuffix LongLongSuffix
	//	| LongSuffix UnsignedSuffix?
	//	| LongLongSuffix UnsignedSuffix?;
	public IntegerSuffixElements getIntegerSuffixAccess() {
		return pIntegerSuffix;
	}
	
	public ParserRule getIntegerSuffixRule() {
		return getIntegerSuffixAccess().getRule();
	}
	
	//fragment UnsignedSuffix:
	//	unsigned?=('u' | 'U');
	public UnsignedSuffixElements getUnsignedSuffixAccess() {
		return pUnsignedSuffix;
	}
	
	public ParserRule getUnsignedSuffixRule() {
		return getUnsignedSuffixAccess().getRule();
	}
	
	//fragment LongSuffix:
	//	long?=('l' | 'L');
	public LongSuffixElements getLongSuffixAccess() {
		return pLongSuffix;
	}
	
	public ParserRule getLongSuffixRule() {
		return getLongSuffixAccess().getRule();
	}
	
	//fragment LongLongSuffix:
	//	longlong?=('ll' | 'LL');
	public LongLongSuffixElements getLongLongSuffixAccess() {
		return pLongLongSuffix;
	}
	
	public ParserRule getLongLongSuffixRule() {
		return getLongLongSuffixAccess().getRule();
	}
	
	//fragment FloatingSuffix:
	//	f?='f' | l?='l' | f?='F' | f?='L';
	public FloatingSuffixElements getFloatingSuffixAccess() {
		return pFloatingSuffix;
	}
	
	public ParserRule getFloatingSuffixRule() {
		return getFloatingSuffixAccess().getRule();
	}
	
	//CharacterConstant:
	//	val=CHARCONST
	//	| enc="L" val=CHARCONST
	//	| enc="u" val=CHARCONST
	//	| enc="U" val=CHARCONST;
	public CharacterConstantElements getCharacterConstantAccess() {
		return pCharacterConstant;
	}
	
	public ParserRule getCharacterConstantRule() {
		return getCharacterConstantAccess().getRule();
	}
	
	//enum DataTypes:
	//	BOOL='bool' | CHAR='char' | SHORT='short' | INT='int' | LONG='long'
	//	| SIGNED='signed' | UNSIGNED='unsigned'
	//	| FLOAT='float' | DOUBLE='double'
	//	| FRAC='frac' | ACCUM='accum';
	public DataTypesElements getDataTypesAccess() {
		return eDataTypes;
	}
	
	public EnumRule getDataTypesRule() {
		return getDataTypesAccess().getRule();
	}
	
	//enum TypeQualifier:
	//	CONST='const' | VOLATILE='volatile';
	public TypeQualifierElements getTypeQualifierAccess() {
		return eTypeQualifier;
	}
	
	public EnumRule getTypeQualifierRule() {
		return getTypeQualifierAccess().getRule();
	}
	
	//enum StorageClassSpecifier:
	//	EXTERN='extern' | STATIC='static';
	public StorageClassSpecifierElements getStorageClassSpecifierAccess() {
		return eStorageClassSpecifier;
	}
	
	public EnumRule getStorageClassSpecifierRule() {
		return getStorageClassSpecifierAccess().getRule();
	}
	
	//enum Attribute:
	//	NONE | IS_PC='is_pc' | DEL='delete';
	public AttributeElements getAttributeAccess() {
		return eAttribute;
	}
	
	public EnumRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//enum InstrAttribute:
	//	NONE | NO_CONT='no_cont' | COND='cond' | FLUSH='flush';
	public InstrAttributeElements getInstrAttributeAccess() {
		return eInstrAttribute;
	}
	
	public EnumRule getInstrAttributeRule() {
		return getInstrAttributeAccess().getRule();
	}
	
	//enum StructOrUnion:
	//	STRUCT='struct' | UNION='union';
	public StructOrUnionElements getStructOrUnionAccess() {
		return eStructOrUnion;
	}
	
	public EnumRule getStructOrUnionRule() {
		return getStructOrUnionAccess().getRule();
	}
	
	//enum BitfieldDataType:
	//	UNSIGNED="u" | SIGNED="s";
	public BitfieldDataTypeElements getBitfieldDataTypeAccess() {
		return eBitfieldDataType;
	}
	
	public EnumRule getBitfieldDataTypeRule() {
		return getBitfieldDataTypeAccess().getRule();
	}
	
	//terminal BVAL:
	//	'b' '0'..'9'+;
	public TerminalRule getBVALRule() {
		return tBVAL;
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal FLOAT returns ecore::EBigDecimal:
	//	('0'..'9'+ '.' '0'..'9'*) (('e' | 'E') ('+' | '-')? '0'..'9'+)?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal NATURAL returns ecore::EBigInteger:
	//	DECIMALCONSTANT | BINARYCONSTANT | HEXADECIMALCONSTANT | OCTALCONSTANT;
	public TerminalRule getNATURALRule() {
		return tNATURAL;
	}
	
	//terminal fragment BINARYCONSTANT:
	//	('0b' | '0B') '0'..'1' ('_'? '0'..'1')*;
	public TerminalRule getBINARYCONSTANTRule() {
		return tBINARYCONSTANT;
	}
	
	//terminal fragment OCTALCONSTANT:
	//	'0' '_'? '0'..'7' ('_'? '0'..'7')*;
	public TerminalRule getOCTALCONSTANTRule() {
		return tOCTALCONSTANT;
	}
	
	//terminal fragment DECIMALCONSTANT:
	//	'0' | '1'..'9' ('_'? '0'..'9')*;
	public TerminalRule getDECIMALCONSTANTRule() {
		return tDECIMALCONSTANT;
	}
	
	//terminal fragment HEXADECIMALCONSTANT:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F') ('_'? ('0'..'9' | 'a'..'f' | 'A'..'F'))*;
	public TerminalRule getHEXADECIMALCONSTANTRule() {
		return tHEXADECIMALCONSTANT;
	}
	
	//terminal CHARCONST:
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getCHARCONSTRule() {
		return tCHARCONST;
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	'this one has been deactivated';
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
