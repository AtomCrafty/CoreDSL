/**
 * generated by Xtext 2.10.0
 */
package com.minres.coredsl.validation;

import com.minres.coredsl.coreDsl.AssignmentExpression;
import com.minres.coredsl.coreDsl.CastExpression;
import com.minres.coredsl.coreDsl.ConditionalExpression;
import com.minres.coredsl.coreDsl.DataTypes;
import com.minres.coredsl.coreDsl.Expression;
import com.minres.coredsl.coreDsl.InfixExpression;
import com.minres.coredsl.coreDsl.PodSpecifier;
import com.minres.coredsl.coreDsl.PostfixExpression;
import com.minres.coredsl.coreDsl.PrefixExpression;
import com.minres.coredsl.coreDsl.PrimaryExpression;
import com.minres.coredsl.coreDsl.TypeSpecifier;
import com.minres.coredsl.util.TypeProvider;
import com.minres.coredsl.validation.AbstractCoreDslValidator;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class CoreDslValidator extends AbstractCoreDslValidator {
  protected static final String ISSUE_CODE_PREFIX = "com.minres.coredsl.";
  
  public static final String TYPE_MISMATCH = (CoreDslValidator.ISSUE_CODE_PREFIX + "TypeMismatch");
  
  @Check
  public void checkType(final Expression e) {
    boolean _matched = false;
    if (e instanceof PrimaryExpression) {
      _matched=true;
    }
    if (!_matched) {
      if (e instanceof PostfixExpression) {
        _matched=true;
      }
    }
    if (!_matched) {
      if (e instanceof PrefixExpression) {
        _matched=true;
      }
    }
    if (!_matched) {
      if (e instanceof CastExpression) {
        _matched=true;
      }
    }
    if (!_matched) {
      if (e instanceof AssignmentExpression) {
        _matched=true;
      }
    }
    if (!_matched) {
      if (e instanceof ConditionalExpression) {
        _matched=true;
        final TypeSpecifier type = TypeProvider.typeOf(((ConditionalExpression)e).getCond());
        if ((type instanceof PodSpecifier)) {
          boolean _contains = ((PodSpecifier)type).getDataType().contains(DataTypes.BOOL);
          if (_contains) {
            return;
          }
        }
      }
    }
    if (!_matched) {
      if (e instanceof InfixExpression) {
        _matched=true;
      }
    }
  }
}
