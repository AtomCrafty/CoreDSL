/*
 * generated by Xtext 2.10.0
 */
package com.minres.coredsl.validation

import com.minres.coredsl.coreDsl.Expression
import org.eclipse.xtext.validation.Check
import com.minres.coredsl.coreDsl.PrimaryExpression
import com.minres.coredsl.coreDsl.PostfixExpression
import com.minres.coredsl.coreDsl.PrefixExpression
import com.minres.coredsl.coreDsl.CastExpression
import com.minres.coredsl.coreDsl.AssignmentExpression
import com.minres.coredsl.coreDsl.ConditionalExpression
import com.minres.coredsl.coreDsl.InfixExpression
import com.minres.coredsl.coreDsl.CoreDslPackage
import static extension com.minres.coredsl.util.TypeProvider.*
import com.minres.coredsl.coreDsl.PodSpecifier
import com.minres.coredsl.coreDsl.DataTypes

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class CoreDslValidator extends AbstractCoreDslValidator {
	
	protected static val ISSUE_CODE_PREFIX = "com.minres.coredsl."
	public static val TYPE_MISMATCH = ISSUE_CODE_PREFIX + "TypeMismatch"
		
	@Check
	def checkType(Expression e) {
        switch(e){
            PrimaryExpression:{
            } 
            PostfixExpression: {
    		}
            PrefixExpression:{                
            }
            CastExpression: {
    		}
            AssignmentExpression: {
    		}
            ConditionalExpression: {
                val type = e.cond.typeOf
                if(type instanceof PodSpecifier) {
                    if(type.dataType.contains(DataTypes.BOOL))
                    return
                }
//                error("Condition is not a boolean type",
//                    CoreDslPackage.Literals.CONDITIONAL_EXPRESSION__COND,
//                    TYPE_MISMATCH
//                )                 
    		}
            InfixExpression:{
    		} 
        }
	}

}
