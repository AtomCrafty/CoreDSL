grammar com.minres.coredsl.CoreDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate coreDsl "http://www.minres.com/coredsl/CoreDsl/2.0"

DescriptionContent
	: (imports+=Import)* definitions+=ISA+ 
	;

Import
	: 'import' importURI=STRING
	;

ISA
	: InstructionSet
	| CoreDef
	;

InstructionSet :
	'InstructionSet' name=ID ( 'extends' superType=[InstructionSet] )? '{' 
        ('constants'      '{' constants+=Declaration+   '}')?
        ('address_spaces' '{' spaces+=Declaration+      '}')?
    	('registers'      '{' regs+=Declaration+        '}')?
    	('functions'      '{' func+=FunctionDefinition+ '}')?
    	('instructions'   '{' (instr+=Instruction)+     '}')
    '}'
;

CoreDef:
	'Core' name=ID ( 'provides' contributingType+=[InstructionSet] (',' contributingType+=[InstructionSet])*)? '{' 
        ('constants'      '{' constants+=Declaration+   '}')?
        ('address_spaces' '{' spaces+=Declaration+      '}')?
    	('registers'      '{' regs+=Declaration+        '}')?
    	('instructions'   '{' (instr+=Instruction)+     '}')?
    '}'
;

Instruction:
	name=ID (DoubleLeftBracket attributes+=InstrAttribute (',' attributes+=InstrAttribute)* DoubleRightBracket )? '{' 
		('encoding' ':' encoding=Encoding ';') ('args_disass' ':' disass=STRING ';')? ('behavior' ':' behavior=Statement)
	'}'
;

Encoding
	:	fields+=Field ('|'|'::' fields+=Field)*
	;

Field
	: 	BitValue
	|	BitField
	;

BitValue
	: 	name=(BVAL|VLOGVAL)
	;

BitField
	:	name=ID bitRange=RangeSpec ("'"? type=BitfieldDataType)?
	;

RangeSpec
	:	LEFT_BR left=IntegerConstant ':' right=IntegerConstant RIGHT_BR
	;

FunctionDefinition
	:   extern?='extern'? type=TypeSpecifier name=ID '(' ParameterList? ')' statement=CompoundStatement?
	;

fragment ParameterList: params+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*;

ParameterDeclaration
    :   type=TypeSpecifier
    	(	declarator=DirectDeclarator
    	|	declarator=AbstractDeclarator
    	)?
    ;

///////////////////////////////////////////////////////////////////////////////
// Statements
Statement
    :   CompoundStatement
    |   ExpressionStatement
    |   SelectionStatement
    |   IterationStatement
    |   JumpStatement
    |   SpawnStatement
    ;

LabeledStatement
    :   'case' constExpr=ConstantExpression ':' stmt=Statement
    |   'default' ':' stmt=Statement
    ;

    
CompoundStatement
    :   {CompoundStatement} '{' items+=BlockItem* '}'
    ;

BlockItem
    :   Statement
    |   Declaration
    ;

ExpressionStatement
    :   {ExpressionStatement} expr=AssignmentExpression? ';'
    ;

SelectionStatement
    :   IfStatement
    |   SwitchStatement
    ;
IfStatement
    :   'if' '(' cond=ConditionalExpression ')' thenStmt=Statement (=> 'else' elseStmt=Statement)?
    ;
SwitchStatement
    :   'switch' '(' cond=ConditionalExpression ')' '{' items+=LabeledStatement '}'
    ;

IterationStatement
    :   type='while' '(' cond=ConditionalExpression ')' stmt=Statement
    |   type='do' stmt=Statement 'while' '(' cond=ConditionalExpression ')' ';'
    |   type='for' '(' ForCondition ')' stmt=Statement
    ;

fragment ForCondition
	:   (startDecl=Declaration | startExpr=AssignmentExpression2? ';') endExpr=ConditionalExpression? ';'  (loopExprs+=AssignmentExpression (',' loopExprs+=AssignmentExpression)*)?
	;

JumpStatement
    :   type='continue' ';'
    |   type='break' ';'
    |   type='return' expr=ConditionalExpression? ';'
    ;

SpawnStatement
    :   'spawn' stmt=Statement
    ;

///////////////////////////////////////////////////////////////////////////////
// Declarations

Declaration
	:   TypeOrVarDeclaration
//	|   TypedefDeclaration
	;
	
TypeOrVarDeclaration
	:	DeclarationSpecifier* type=TypeSpecifier size=BitSizeSpecifier? is_ptr?='*'? (init+=InitDeclarator (',' init+=InitDeclarator)*)? ';'
	;
	
//TypedefDeclaration
//	:	'typedef' DeclarationSpecifier* type=TypeSpecifier init+=InitDeclarator ';'
//	;
	
fragment DeclarationSpecifier
    :   storage+=StorageClassSpecifier
    |   qualifiers+=TypeQualifier
    |   attrs+=Attribute
    ;

Attribute
    :  	DoubleLeftBracket type=DeclarationAttribute ('=' val=ConditionalExpression)? DoubleRightBracket
    ;
    
TypeSpecifier
	:	DataTypeSpecifier
//	|	TypedefRef
	;

DataTypeSpecifier
	:	PodSpecifier 
	|	StructOrUnionSpecifier
	|	EnumSpecifier
	;
    
//TypedefRef
//	:	ref=[DirectDeclarator]
//	;
    
PodSpecifier
	:	dataType+=DataTypes+
	;

BitSizeSpecifier
	:	'<' size+=BitSizeValue (',' size+=BitSizeValue ',' size+=BitSizeValue ',' size+=BitSizeValue)? '>'
	;

BitSizeValue
	:	val+=IntegerConstant
	|	constant+=[Constant]
	;

EnumSpecifier
    :   'enum' name=ID? '{' EnumeratorList ','? '}'
    |   'enum' name=ID
    ;

fragment EnumeratorList:   enumerators+=Enumerator (',' enumerators+=Enumerator)*;

Enumerator
    :   name=ID
    |   name=ID '=' expression=ConstantExpression
    ;

StructOrUnionSpecifier
    :   composeType=StructOrUnion name=ID? '{' (decls += StructDeclaration)* '}'
    |   composeType=StructOrUnion name=ID
    ;

StructDeclaration
    :   specifier=StructDeclarationSpecifier decls += DirectDeclarator(',' decls+=DirectDeclarator)* ';'
    ;

StructDeclarationSpecifier
    :   type=TypeSpecifier
    |   qualifiers+=TypeQualifier
    ;

InitDeclarator
    :   declarator=DirectDeclarator attrs+=Attribute* ('=' initializer=Initializer)?
    ;

DirectDeclarator
    :   name=ID ( ':' index=IntegerConstant)? 
    	(  	{DirectDeclarator.left=current} (LEFT_BR size+=ConditionalExpression RIGHT_BR)+    		
//    	|   {DirectDeclarator.left=current} '[' (qualifiers+=TypeQualifier)? '*' ']'
    	|   {DirectDeclarator.left=current} '(' ParameterList ')'
    	)?
    ;
    
EmptyExpression: {Expression};

Initializer
    :   expr=ConditionalExpression
    |   '{' InitializerList ','? '}'
    ;

fragment InitializerList:   init+=(DesignatedInitializer|Initializer) (',' init+=(DesignatedInitializer|Initializer))*;

DesignatedInitializer
	:	(designators+=Designator)+ '=' init=Initializer
	;

Designator
    :   LEFT_BR idx=ConstantExpression RIGHT_BR
    |   '.' prop=ID
    ;

AbstractDeclarator
    :	DirectAbstractDeclarator
    ;
/*
 direct_abstract_declarator
	: '(' abstract_declarator ')'
	| '(' parameter_type_list ')'
	| '(' ')'
	| '[' constant_expression ']'
	| '[' ']'
	| direct_abstract_declarator '[' ']'
	| direct_abstract_declarator '[' constant_expression ']'
	| direct_abstract_declarator '(' ')'
	| direct_abstract_declarator '(' parameter_type_list ')'
	;
*/
 
DirectAbstractDeclarator 
    :   {DirectAbstractDeclarator} '(' (declarator=AbstractDeclarator? | ParameterList) ')'
    |	{DirectAbstractDeclarator} LEFT_BR expr=ConstantExpression? RIGHT_BR
    ;

///////////////////////////////////////////////////////////////////////////////
// Expressions
Expression 
    :   AssignmentExpression ({Expression.left=current} ',' right=AssignmentExpression)?
    ;

AssignmentExpression returns Expression // this is right associative
    :   PrefixExpression ({AssignmentExpression.left=current} assignment+=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=') rights+=ConditionalExpression)*
    ;

AssignmentExpression2 returns Expression
    :   PrefixExpression ({AssignmentExpression.left=current} assignment+=('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=') rights+=ConditionalExpression)+
    ;

ConditionalExpression returns Expression
    :   ConcatenationExpression ({ConditionalExpression.cond=current} '?' left=ConditionalExpression ':' right=ConditionalExpression)?
    ;

ConcatenationExpression returns Expression // right associative rule
    :   LogicalOrExpression ({InfixExpression.left=current} op='::' right=ConcatenationExpression)?
    ;
    
LogicalOrExpression returns Expression
    :   LogicalAndExpression ({InfixExpression.left=current} op='||' right=LogicalOrExpression)?
    ;

LogicalAndExpression returns Expression
    :   InclusiveOrExpression ({InfixExpression.left=current} op='&&' right=LogicalAndExpression)?
    ;

InclusiveOrExpression returns Expression
    :   ExclusiveOrExpression ({InfixExpression.left=current} op='|' right=InclusiveOrExpression)?
    ;

ExclusiveOrExpression returns Expression
    :   AndExpression ({InfixExpression.left=current} op='^' right=ExclusiveOrExpression)?
    ;

AndExpression returns Expression
    :   EqualityExpression ({InfixExpression.left=current} op='&' right=AndExpression)?
    ;

EqualityExpression returns Expression
    :   RelationalExpression ({InfixExpression.left=current} op=('=='|'!=') right=EqualityExpression)?
    ;

RelationalExpression returns Expression
    :   ShiftExpression ({InfixExpression.left=current} op=('<'|'>'|'<='|'>=') right=RelationalExpression)?
    ;

ShiftExpression returns Expression
    :   AdditiveExpression ({InfixExpression.left=current} op=('<<'|'>>') right=ShiftExpression)?
    ;

AdditiveExpression returns Expression
    :   MultiplicativeExpression ({InfixExpression.left=current} op=('+'|'-') right=AdditiveExpression)?
    ;

MultiplicativeExpression returns Expression
    :   CastExpression ({InfixExpression.left=current} op=('*' | '/' | '%') right=MultiplicativeExpression)?
    ;

CastExpression
    :   PrefixExpression
    |	'(' type=DataTypeSpecifier ')' left=CastExpression
    ;

PrefixExpression
    :   PostfixExpression
    |   op='++' left=PrefixExpression
    |   op='--' left=PrefixExpression
    |   UnaryOperator left=CastExpression
    |   op='sizeof' '(' (left=PostfixExpression |  type=DataTypeSpecifier ) ')'
//    |   op='_Alignof' '(' type=TypeSpecifier ')'
    ;

fragment UnaryOperator:	op=('&' | '*' | '+' | '-' | '~' | '!');

PostfixExpression
    :   PrimaryExpression ({PostfixExpression.left=current} ops+=PostfixOperator)*
    ;

PostfixOperator
	:  	op=LEFT_BR args+=ConditionalExpression (':' args+=ConditionalExpression)? RIGHT_BR
	|  	op='(' (args+=ConditionalExpression (',' args+=ConditionalExpression)*)?')' //function call
	|   op='.' member=[DirectDeclarator]  //member=PostfixExpression
	|   op='->' member=[DirectDeclarator] //member=PostfixExpression
	|   op='++'
	|  	op='--'
	;
	
PrimaryExpression
    :	ref=[VariableRef]
    |   constant=Constant
    |   literal+=StringLiteral+
    |   '(' left=ConditionalExpression ')'
    ;

VariableRef hidden()
	:	FunctionDefinition|DirectDeclarator|Field
	;

StringLiteral
    :   EncodingPrefix? val=STRING
    ;

fragment EncodingPrefix :   prefix= ('u8'|'u'|'U'|'L');

ConstantExpression returns Expression
    :   ConditionalExpression
    ;
///////////////////////////////////////////////////////////////////////////////
// Constants
Constant
    :   IntegerConstant
    |	FloatingConstant
    |   CharacterConstant
    |   BoolConstant
    ;

IntegerConstant hidden(WS)
    :   val=INTEGER unsigned?=('u'|'U')? (long?=('l'|'L') longlong?=('l'|'L')?)?
    ;

FloatingConstant hidden(WS)
    :  	val=FLOAT (f?=('f'|'F') | l?=('l'|'L'))?
    ;
    
BoolConstant
    :   val=BOOLEAN
    ;
    
CharacterConstant
    :   val=CHARCONST
    |   enc="L" val=CHARCONST
    |   enc="u" val=CHARCONST
    |   enc="U" val=CHARCONST
    ;

// the follwoing 2 rules are needed so that XText does not generate a terminal symbol '[[' and '&&'
// which is always eaten by the Lexer so that a[b[3]] is not recognized
DoubleLeftBracket hidden(WS, ML_COMMENT, SL_COMMENT): LEFT_BR LEFT_BR;
DoubleRightBracket hidden(WS, ML_COMMENT, SL_COMMENT): RIGHT_BR RIGHT_BR;

///////////////////////////////////////////////////////////////////////////////

enum DataTypes
	: BOOL='bool' | CHAR='char' | SHORT='short' | INT='int' | LONG='long'
	| SIGNED='signed' | UNSIGNED='unsigned'
	| FLOAT='float'	| DOUBLE='double' | VOID='void'
//	| FRAC='frac' | ACCUM='accum'
	;

enum TypeQualifier: CONST='const' | VOLATILE='volatile';

enum StorageClassSpecifier: EXTERN='extern' | STATIC='static';

enum DeclarationAttribute: NONE | IS_PC='is_pc' | IS_INTERLOCK_FOR='is_interlock_for';
	
enum InstrAttribute: NONE | NO_CONT='no_cont' | COND='cond' | FLUSH='flush';

enum StructOrUnion:   STRUCT='struct'|UNION='union';

enum BitfieldDataType:	UNSIGNED="u" | SIGNED="s"; //| FLOAT="f" | DOUBLE="d" | QUAD="q" | BOOLEAN='b';

terminal LEFT_BR: '[';

terminal RIGHT_BR: ']';

terminal BVAL : 'b'('0'..'9')+;

terminal VLOGVAL: VLOGINT;

terminal BOOLEAN returns ecore::EBoolean: 'true' | 'false' ;

terminal FLOAT returns ecore::EBigDecimal:  (('0'..'9')+ '.' ('0'..'9')*) (('e' | 'E') ('+' | '-')? ('0'..'9')+)?;

terminal INTEGER returns ecore::EBigInteger:  (BINARYINT) | (HEXADECIMALINT) | (OCTALINT) | (DECIMALINT);

terminal fragment BINARYINT:	('0b' | '0B') '0'..'1' (('_')? '0'..'1')*;

terminal fragment OCTALINT:   '0' ('_')? '0'..'7' (('_')? '0'..'7')*;

terminal fragment DECIMALINT:   '0' | '1'..'9' (('_')? '0'..'9')*;

terminal fragment HEXADECIMALINT:   ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*;

terminal fragment VLOGINT: ('0'..'9')+ "'" ('b' ('01')+ | 'o' ('0'..'7')+ | 'd' ('0'..'9')+ | 'h' ('0'..'9'|'a'..'f'|'A'..'F')+); 

terminal CHARCONST: "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'";

@Override 
terminal INT returns ecore::EInt: '~this one has been deactivated';
    
@Override 
terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
    
@Override
terminal STRING	:	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';


 