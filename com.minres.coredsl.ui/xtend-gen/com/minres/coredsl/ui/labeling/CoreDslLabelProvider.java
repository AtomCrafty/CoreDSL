/**
 * generated by Xtext 2.10.0
 */
package com.minres.coredsl.ui.labeling;

import com.google.inject.Inject;
import com.minres.coredsl.coreDsl.AdditionExpr;
import com.minres.coredsl.coreDsl.AddressSpace;
import com.minres.coredsl.coreDsl.BitExpr;
import com.minres.coredsl.coreDsl.BitField;
import com.minres.coredsl.coreDsl.BooleanExpr;
import com.minres.coredsl.coreDsl.ComparisonExpr;
import com.minres.coredsl.coreDsl.ConditionalStmt;
import com.minres.coredsl.coreDsl.Constant;
import com.minres.coredsl.coreDsl.ConstantDef;
import com.minres.coredsl.coreDsl.Encoding;
import com.minres.coredsl.coreDsl.Expression;
import com.minres.coredsl.coreDsl.Function;
import com.minres.coredsl.coreDsl.IndexedAssignment;
import com.minres.coredsl.coreDsl.IndexedVariable;
import com.minres.coredsl.coreDsl.MultiplicationExpr;
import com.minres.coredsl.coreDsl.NumberLiteral;
import com.minres.coredsl.coreDsl.Operation;
import com.minres.coredsl.coreDsl.Procedure;
import com.minres.coredsl.coreDsl.RangeSpec;
import com.minres.coredsl.coreDsl.Register;
import com.minres.coredsl.coreDsl.RegisterAlias;
import com.minres.coredsl.coreDsl.RegisterAssignment;
import com.minres.coredsl.coreDsl.RegisterFile;
import com.minres.coredsl.coreDsl.Scalar;
import com.minres.coredsl.coreDsl.ScalarAssignment;
import com.minres.coredsl.coreDsl.ShiftExpr;
import com.minres.coredsl.coreDsl.Statement;
import com.minres.coredsl.coreDsl.TypeConv;
import com.minres.coredsl.coreDsl.UnitaryExpr;
import com.minres.coredsl.coreDsl.ValueRef;
import java.math.BigInteger;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class CoreDslLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public CoreDslLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final RegisterFile ele) {
    String _name = ele.getName();
    String _plus = (_name + "[");
    BigInteger _left = ele.getRange().getLeft();
    String _plus_1 = (_plus + _left);
    String _plus_2 = (_plus_1 + "]");
    String _plus_3 = (_plus_2 + " .. ");
    String _name_1 = ele.getName();
    String _plus_4 = (_plus_3 + _name_1);
    String _plus_5 = (_plus_4 + "[");
    BigInteger _right = ele.getRange().getRight();
    String _plus_6 = (_plus_5 + _right);
    return (_plus_6 + "]");
  }
  
  public Object text(final RegisterAlias ele) {
    Object _xblockexpression = null;
    {
      String _name = ele.getName();
      /* (_name + "alias of "); */
      _xblockexpression = this.doGetText(ele.getOriginal());
    }
    return _xblockexpression;
  }
  
  public String text(final BitField ele) {
    String _name = ele.getName();
    String _xifexpression = null;
    RangeSpec _bitRange = ele.getBitRange();
    boolean _tripleNotEquals = (_bitRange != null);
    if (_tripleNotEquals) {
      BigInteger _left = ele.getBitRange().getLeft();
      String _plus = ("[" + _left);
      String _plus_1 = (_plus + ":");
      BigInteger _right = ele.getBitRange().getRight();
      String _plus_2 = (_plus_1 + _right);
      _xifexpression = (_plus_2 + "]");
    } else {
      _xifexpression = "";
    }
    return (_name + _xifexpression);
  }
  
  public String text(final ConstantDef ele) {
    String _name = ele.getName();
    String _plus = (_name + "=");
    BigInteger _value = ele.getValue();
    return (_plus + _value);
  }
  
  public String text(final Encoding ele) {
    return "Encoding";
  }
  
  public String text(final Operation ele) {
    return "Description";
  }
  
  public String text(final Statement ele) {
    boolean _matched = false;
    if (ele instanceof RegisterAssignment) {
      _matched=true;
      String _name = ((RegisterAssignment)ele).getTo().getName();
      String _plus = (_name + "<=");
      Object _doGetText = this.doGetText(((RegisterAssignment)ele).getExpression());
      return (_plus + _doGetText);
    }
    if (!_matched) {
      if (ele instanceof IndexedAssignment) {
        _matched=true;
        IndexedVariable _to = ((IndexedAssignment)ele).getTo();
        if ((_to instanceof RegisterFile)) {
          IndexedVariable _to_1 = ((IndexedAssignment)ele).getTo();
          String _name = ((RegisterFile) _to_1).getName();
          String _plus = (_name + "[");
          Object _doGetText = this.doGetText(((IndexedAssignment)ele).getIndex());
          String _plus_1 = (_plus + _doGetText);
          String _plus_2 = (_plus_1 + "] <=");
          Object _doGetText_1 = this.doGetText(((IndexedAssignment)ele).getExpression());
          return (_plus_2 + _doGetText_1);
        } else {
          IndexedVariable _to_2 = ((IndexedAssignment)ele).getTo();
          if ((_to_2 instanceof AddressSpace)) {
            IndexedVariable _to_3 = ((IndexedAssignment)ele).getTo();
            String _name_1 = ((AddressSpace) _to_3).getName();
            String _plus_3 = (_name_1 + "[");
            Object _doGetText_2 = this.doGetText(((IndexedAssignment)ele).getIndex());
            String _plus_4 = (_plus_3 + _doGetText_2);
            String _plus_5 = (_plus_4 + "] <=");
            Object _doGetText_3 = this.doGetText(((IndexedAssignment)ele).getExpression());
            return (_plus_5 + _doGetText_3);
          }
        }
      }
    }
    if (!_matched) {
      if (ele instanceof ScalarAssignment) {
        _matched=true;
        String _name = ((ScalarAssignment)ele).getTo().getName();
        String _plus = (_name + "<=");
        Object _doGetText = this.doGetText(((ScalarAssignment)ele).getExpression());
        return (_plus + _doGetText);
      }
    }
    if (!_matched) {
      if (ele instanceof ConditionalStmt) {
        _matched=true;
        Object _doGetText = this.doGetText(((ConditionalStmt)ele).getCond());
        String _plus = ("if(" + _doGetText);
        return (_plus + ")");
      }
    }
    if (!_matched) {
      if (ele instanceof Procedure) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _name = ((Procedure)ele).getName();
        _builder.append(_name);
        _builder.append("(");
        {
          EList<Expression> _args = ((Procedure)ele).getArgs();
          boolean _hasElements = false;
          for(final Expression arg : _args) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            Object _doGetText = this.doGetText(arg);
            _builder.append(_doGetText);
          }
        }
        _builder.append(")");
        return _builder.toString();
      }
    }
    return null;
  }
  
  public CharSequence text(final Expression ele) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (ele instanceof BooleanExpr) {
      _matched=true;
      Object _doGetText = this.doGetText(((BooleanExpr)ele).getLeft());
      String _op = ((BooleanExpr)ele).getOp();
      String _plus = (_doGetText + _op);
      Object _doGetText_1 = this.doGetText(((BooleanExpr)ele).getRight());
      _switchResult = (_plus + _doGetText_1);
    }
    if (!_matched) {
      if (ele instanceof BitExpr) {
        _matched=true;
        Object _doGetText = this.doGetText(((BitExpr)ele).getLeft());
        String _op = ((BitExpr)ele).getOp();
        String _plus = (_doGetText + _op);
        Object _doGetText_1 = this.doGetText(((BitExpr)ele).getRight());
        _switchResult = (_plus + _doGetText_1);
      }
    }
    if (!_matched) {
      if (ele instanceof ComparisonExpr) {
        _matched=true;
        Object _doGetText = this.doGetText(((ComparisonExpr)ele).getLeft());
        String _op = ((ComparisonExpr)ele).getOp();
        String _plus = (_doGetText + _op);
        Object _doGetText_1 = this.doGetText(((ComparisonExpr)ele).getRight());
        _switchResult = (_plus + _doGetText_1);
      }
    }
    if (!_matched) {
      if (ele instanceof ShiftExpr) {
        _matched=true;
        Object _doGetText = this.doGetText(((ShiftExpr)ele).getLeft());
        String _op = ((ShiftExpr)ele).getOp();
        String _plus = (_doGetText + _op);
        Object _doGetText_1 = this.doGetText(((ShiftExpr)ele).getRight());
        _switchResult = (_plus + _doGetText_1);
      }
    }
    if (!_matched) {
      if (ele instanceof AdditionExpr) {
        _matched=true;
        Object _doGetText = this.doGetText(((AdditionExpr)ele).getLeft());
        String _op = ((AdditionExpr)ele).getOp();
        String _plus = (_doGetText + _op);
        Object _doGetText_1 = this.doGetText(((AdditionExpr)ele).getRight());
        _switchResult = (_plus + _doGetText_1);
      }
    }
    if (!_matched) {
      if (ele instanceof MultiplicationExpr) {
        _matched=true;
        Object _doGetText = this.doGetText(((MultiplicationExpr)ele).getLeft());
        String _op = ((MultiplicationExpr)ele).getOp();
        String _plus = (_doGetText + _op);
        Object _doGetText_1 = this.doGetText(((MultiplicationExpr)ele).getRight());
        _switchResult = (_plus + _doGetText_1);
      }
    }
    if (!_matched) {
      if (ele instanceof UnitaryExpr) {
        _matched=true;
        String _op = ((UnitaryExpr)ele).getOp();
        Object _doGetText = this.doGetText(((UnitaryExpr)ele).getExpr());
        _switchResult = (_op + _doGetText);
      }
    }
    if (!_matched) {
      if (ele instanceof TypeConv) {
        _matched=true;
        String _string = ((TypeConv)ele).getType().toString();
        String _plus = (_string + "ext(");
        Object _doGetText = this.doGetText(((TypeConv)ele).getExpr());
        String _plus_1 = (_plus + _doGetText);
        _switchResult = (_plus_1 + ")");
      }
    }
    if (!_matched) {
      if (ele instanceof Function) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _name = ((Function)ele).getName();
        _builder.append(_name);
        _builder.append("(");
        {
          EList<Expression> _args = ((Function)ele).getArgs();
          boolean _hasElements = false;
          for(final Expression arg : _args) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "");
            }
            Object _doGetText = this.doGetText(arg);
            _builder.append(_doGetText);
          }
        }
        _builder.append(")");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (ele instanceof NumberLiteral) {
        _matched=true;
        _switchResult = ((NumberLiteral)ele).getValue().toString();
      }
    }
    if (!_matched) {
      if (ele instanceof ValueRef) {
        _matched=true;
        String _xblockexpression = null;
        {
          final EObject ref = ((ValueRef)ele).getValue();
          String _switchResult_1 = null;
          boolean _matched_1 = false;
          if (ref instanceof RegisterFile) {
            _matched_1=true;
            String _name = ((RegisterFile)ref).getName();
            String _xifexpression = null;
            Expression _index = ((ValueRef)ele).getIndex();
            boolean _tripleNotEquals = (_index != null);
            if (_tripleNotEquals) {
              Object _doGetText = this.doGetText(((ValueRef)ele).getIndex());
              String _plus = ("[" + _doGetText);
              _xifexpression = (_plus + "]");
            } else {
              _xifexpression = "";
            }
            _switchResult_1 = (_name + _xifexpression);
          }
          if (!_matched_1) {
            if (ref instanceof AddressSpace) {
              _matched_1=true;
              String _name = ((AddressSpace)ref).getName();
              String _xifexpression = null;
              Expression _index = ((ValueRef)ele).getIndex();
              boolean _tripleNotEquals = (_index != null);
              if (_tripleNotEquals) {
                Object _doGetText = this.doGetText(((ValueRef)ele).getIndex());
                String _plus = ("[" + _doGetText);
                _xifexpression = (_plus + "]");
              } else {
                _xifexpression = "";
              }
              _switchResult_1 = (_name + _xifexpression);
            }
          }
          if (!_matched_1) {
            if (ref instanceof Register) {
              _matched_1=true;
              _switchResult_1 = ((Register)ref).getName();
            }
          }
          if (!_matched_1) {
            if (ref instanceof RegisterAlias) {
              _matched_1=true;
              _switchResult_1 = ((RegisterAlias)ref).getName();
            }
          }
          if (!_matched_1) {
            if (ref instanceof Scalar) {
              _matched_1=true;
              _switchResult_1 = ((Scalar)ref).getName();
            }
          }
          if (!_matched_1) {
            if (ref instanceof Constant) {
              _matched_1=true;
              _switchResult_1 = ((Constant)ref).getName();
            }
          }
          if (!_matched_1) {
            if (ref instanceof BitField) {
              _matched_1=true;
              _switchResult_1 = ((BitField)ref).getName();
            }
          }
          _xblockexpression = _switchResult_1;
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      _switchResult = "Expression";
    }
    return _switchResult;
  }
}
