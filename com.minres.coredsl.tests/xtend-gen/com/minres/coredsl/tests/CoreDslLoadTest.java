/**
 * generated by Xtext 2.10.0
 */
package com.minres.coredsl.tests;

import com.google.common.io.CharStreams;
import com.google.inject.Inject;
import com.minres.coredsl.coreDsl.DescriptionContent;
import com.minres.coredsl.coreDsl.ISA;
import com.minres.coredsl.coreDsl.Instruction;
import com.minres.coredsl.coreDsl.InstructionSet;
import com.minres.coredsl.tests.CoreDslInjectorProvider;
import java.io.FileReader;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(CoreDslInjectorProvider.class)
@SuppressWarnings("all")
public class CoreDslLoadTest {
  @Inject
  @Extension
  private ParseHelper<DescriptionContent> parseHelper;
  
  @Inject
  private ValidationTestHelper validator;
  
  @Test
  public void loadSimpleModel() {
    try {
      final DescriptionContent content = this.parseHelper.parse(IterableExtensions.join(CharStreams.readLines(new FileReader("inputs/isa_1.core_desc")), "\n"));
      this.validator.assertNoErrors(content);
      ISA _get = content.getDefinitions().get(0);
      final InstructionSet result = ((InstructionSet) _get);
      Assert.assertNotNull(result);
      Assert.assertEquals("RV32I", result.getName());
      Assert.assertNull(result.getSuperType());
      Assert.assertEquals(2, result.getSpaces().size());
      Assert.assertNotNull(result.getRegs());
      Assert.assertNotNull(result.getInstr());
      Assert.assertEquals(2, result.getRegs().size());
      Assert.assertEquals(5, result.getInstr().size());
      final Instruction i0 = result.getInstr().get(0);
      Assert.assertEquals("ADDI", i0.getName());
      Assert.assertEquals(5, i0.getEncoding().getFields().size());
      final Instruction i1 = result.getInstr().get(1);
      Assert.assertEquals("SLTI", i1.getName());
      Assert.assertEquals(5, i1.getEncoding().getFields().size());
      final Instruction i2 = result.getInstr().get(2);
      Assert.assertEquals("SLTIU", i2.getName());
      Assert.assertEquals(5, i2.getEncoding().getFields().size());
      final Instruction i3 = result.getInstr().get(3);
      Assert.assertEquals("SW", i3.getName());
      Assert.assertEquals(6, i3.getEncoding().getFields().size());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadSqrt() {
    try {
      final DescriptionContent content = this.parseHelper.parse(IterableExtensions.join(CharStreams.readLines(new FileReader("inputs/sqrt.core_desc")), "\n"));
      this.validator.assertNoErrors(content);
      ISA _get = content.getDefinitions().get(0);
      final InstructionSet instructionSet = ((InstructionSet) _get);
      Assert.assertNotNull(instructionSet);
      Assert.assertEquals("Vec2D", instructionSet.getName());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadSine() {
    try {
      final DescriptionContent content = this.parseHelper.parse(IterableExtensions.join(CharStreams.readLines(new FileReader("inputs/sine.core_desc")), "\n"));
      this.validator.assertNoErrors(content);
      ISA _get = content.getDefinitions().get(0);
      final InstructionSet instructionSet = ((InstructionSet) _get);
      Assert.assertNotNull(instructionSet);
      Assert.assertEquals("RISCVROB", instructionSet.getName());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
