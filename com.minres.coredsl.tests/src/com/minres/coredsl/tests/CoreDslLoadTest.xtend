/*
 * generated by Xtext 2.10.0
 */
package com.minres.coredsl.tests

import com.google.inject.Inject
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*
import static extension com.google.common.io.CharStreams.*
import com.minres.coredsl.coreDsl.DescriptionContent
import com.minres.coredsl.coreDsl.InstructionSet
import java.io.FileReader

@RunWith(XtextRunner)
@InjectWith(CoreDslInjectorProvider)
class CoreDslLoadTest {

	@Inject ParseHelper<DescriptionContent> parseHelper


	@Test
	def void loadSimpleModel() {
		val input = new FileReader('inputs/isa_1.core_desc').readLines.join('\n')
		val content = parseHelper.parse(input)
		assertEquals(1, content.definitions.size)
		val resource = content.eResource
		EcoreUtil.resolveAll(resource);
		assertEquals(0, resource.errors.size)
		assertEquals(0, resource.warnings.size)
		
		
		val InstructionSet result = content.definitions.get(0) as InstructionSet
		assertNotNull(result)
		assertEquals("RV32I", result.name)
		assertNull(result.superType)
		assertEquals(2, result.spaces.size())
		assertNotNull(result.regs)
		assertNotNull(result.instr)

		assertEquals(2, result.regs.size)

		assertEquals(5, result.instr.size)
		val i0 = result.instr.get(0);
		assertEquals("ADDI", i0.name)
		assertEquals(5, i0.encoding.fields.size)

		val i1 = result.instr.get(1);
		assertEquals("SLTI", i1.name)
		assertEquals(5, i1.encoding.fields.size)

		val i2 = result.instr.get(2);
		assertEquals("SLTIU", i2.name)
		assertEquals(5, i2.encoding.fields.size)

		val i3 = result.instr.get(3);
		assertEquals("SW", i3.name)
		assertEquals(6, i3.encoding.fields.size)

	}


	@Test
	def void loadSqrt() {
		val input = new FileReader('inputs/sqrt.core_desc').readLines.join('\n')
		val content = parseHelper.parse(input)
		assertEquals(1, content.definitions.size)
		val resource = content.eResource
		EcoreUtil.resolveAll(resource);
		assertEquals(0, resource.errors.size)
		assertEquals(0, resource.warnings.size)
		
		val InstructionSet instructionSet = content.definitions.get(0) as InstructionSet
		assertNotNull(instructionSet)
		assertEquals("Vec2D", instructionSet.name)
	}
	
	@Test
	def void loadSine(){
		val input = new FileReader('inputs/sine.core_desc').readLines.join('\n')
		val content = parseHelper.parse(input)
		assertEquals(1, content.definitions.size)
		val resource = content.eResource
		EcoreUtil.resolveAll(resource);
		assertEquals(0, resource.errors.size)
		assertEquals(0, resource.warnings.size)
		
		val InstructionSet instructionSet = content.definitions.get(0) as InstructionSet
		assertNotNull(instructionSet)
		assertEquals("RISCVROB", instructionSet.name)
	}
}
