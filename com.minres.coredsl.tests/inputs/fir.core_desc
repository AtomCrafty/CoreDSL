import "inputs/isa_1.core_desc"

InstructionSet X_FIR_1 extends RVI {
	architectural_state {
		unsigned int N_ACC = 4;
		int ACC[N_ACC];
	}
	instructions {
		get_acc {
			encoding: acc[6:0] :: rs2[4:0] :: rs1[4:0] :: 0b001 :: rd[4:0] :: 0b0010111;
			behavior: {
				if (acc < N_ACC)
					X[rd] = ACC[acc];
				else
					X[rd] = 0;
			}
		}
		
		set_acc {
			encoding: acc[6:0] :: rs2[4:0] :: rs1[4:0] :: 0b010 :: rd[4:0] :: 0b0010111;
			behavior: {
				if (acc < N_ACC)
					ACC[acc] = X[rs1];
			}
		}
		
		mac {
			encoding: acc[6:0] :: rs2[4:0] :: rs1[4:0] :: 0b011 :: rd[4:0] :: 0b0010111;
			behavior: {
				if (acc < N_ACC)
					ACC[acc] += X[rs1] * X[rs2];
			}
		}
		
		mac_packed {
			encoding: acc[6:0] :: rs2[4:0] :: rs1[4:0] :: 0b100 :: rd[4:0] :: 0b0010111;
			behavior: {
				if (acc < N_ACC) {
					signed<32> lhs = X[rs1];
					signed<32> rhs = X[rs2];
					signed<32> lane1 = lhs[31:16] * rhs[31:16];
					signed<32> lane2 = lhs[15:0] * rhs[15:0];
					ACC[acc] += lane1 + lane2;
				}
			}
		}
		
		mod_incr {
			encoding: funct7[6:0] :: rs2[4:0] :: rs1[4:0] :: 0b101 :: rd[4:0] :: 0b0010111;
			behavior: {
				int incr = X[rs1] + 1;
				if (incr == X[rs2])
					X[rd] = 0;
				else
					X[rd] = incr;
			}
		}
	}
}
