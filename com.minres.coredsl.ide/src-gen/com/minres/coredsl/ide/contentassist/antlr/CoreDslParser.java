/*
 * generated by Xtext 2.22.0
 */
package com.minres.coredsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.minres.coredsl.ide.contentassist.antlr.internal.InternalCoreDslParser;
import com.minres.coredsl.services.CoreDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CoreDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CoreDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CoreDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getISAAccess().getAlternatives(), "rule__ISA__Alternatives");
			builder.put(grammarAccess.getInstructionSetAccess().getRegsAlternatives_6_2_0(), "rule__InstructionSet__RegsAlternatives_6_2_0");
			builder.put(grammarAccess.getInstructionSetAccess().getRegsAlternatives_6_3_1_0(), "rule__InstructionSet__RegsAlternatives_6_3_1_0");
			builder.put(grammarAccess.getCoreDefAccess().getRegsAlternatives_7_2_0(), "rule__CoreDef__RegsAlternatives_7_2_0");
			builder.put(grammarAccess.getCoreDefAccess().getRegsAlternatives_7_3_1_0(), "rule__CoreDef__RegsAlternatives_7_3_1_0");
			builder.put(grammarAccess.getFieldAccess().getAlternatives(), "rule__Field__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getAssignmentAccess().getAlternatives_0(), "rule__Assignment__Alternatives_0");
			builder.put(grammarAccess.getConditionalStmtAccess().getAlternatives_4(), "rule__ConditionalStmt__Alternatives_4");
			builder.put(grammarAccess.getConditionalStmtAccess().getAlternatives_5_1(), "rule__ConditionalStmt__Alternatives_5_1");
			builder.put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
			builder.put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
			builder.put(grammarAccess.getIndexedVariableAccess().getAlternatives(), "rule__IndexedVariable__Alternatives");
			builder.put(grammarAccess.getScalarVariableAccess().getAlternatives(), "rule__ScalarVariable__Alternatives");
			builder.put(grammarAccess.getRegisterVariableAccess().getAlternatives(), "rule__RegisterVariable__Alternatives");
			builder.put(grammarAccess.getAddressSpaceAccess().getAlternatives_2(), "rule__AddressSpace__Alternatives_2");
			builder.put(grammarAccess.getRegisterFileAccess().getAlternatives_2(), "rule__RegisterFile__Alternatives_2");
			builder.put(grammarAccess.getRegisterAccess().getAlternatives_2(), "rule__Register__Alternatives_2");
			builder.put(grammarAccess.getRegisterAliasAccess().getAlternatives_3(), "rule__RegisterAlias__Alternatives_3");
			builder.put(grammarAccess.getRegisterAliasAccess().getAlternatives_7(), "rule__RegisterAlias__Alternatives_7");
			builder.put(grammarAccess.getRegisterAliasAccess().getAlternatives_7_1_2(), "rule__RegisterAlias__Alternatives_7_1_2");
			builder.put(grammarAccess.getScalarAccess().getAlternatives_3(), "rule__Scalar__Alternatives_3");
			builder.put(grammarAccess.getEqualityExprAccess().getOpAlternatives_1_1_0(), "rule__EqualityExpr__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getComparisonExprAccess().getOpAlternatives_1_1_0(), "rule__ComparisonExpr__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getShiftExprAccess().getOpAlternatives_1_1_0(), "rule__ShiftExpr__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getAdditionExprAccess().getOpAlternatives_1_1_0(), "rule__AdditionExpr__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicationExprAccess().getOpAlternatives_1_1_0(), "rule__MultiplicationExpr__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getUnitaryExprAccess().getAlternatives(), "rule__UnitaryExpr__Alternatives");
			builder.put(grammarAccess.getUnitaryExprAccess().getOpAlternatives_1_1_0(), "rule__UnitaryExpr__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getRValueAccess().getAlternatives(), "rule__RValue__Alternatives");
			builder.put(grammarAccess.getValueRefAccess().getAlternatives_0(), "rule__ValueRef__Alternatives_0");
			builder.put(grammarAccess.getBitSizeSpecAccess().getAlternatives_1(), "rule__BitSizeSpec__Alternatives_1");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getRegAttributeAccess().getAlternatives(), "rule__RegAttribute__Alternatives");
			builder.put(grammarAccess.getConstAttributeAccess().getAlternatives(), "rule__ConstAttribute__Alternatives");
			builder.put(grammarAccess.getInstrAttributeAccess().getAlternatives(), "rule__InstrAttribute__Alternatives");
			builder.put(grammarAccess.getDescriptionContentAccess().getGroup(), "rule__DescriptionContent__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getInstructionSetAccess().getGroup(), "rule__InstructionSet__Group__0");
			builder.put(grammarAccess.getInstructionSetAccess().getGroup_2(), "rule__InstructionSet__Group_2__0");
			builder.put(grammarAccess.getInstructionSetAccess().getGroup_4(), "rule__InstructionSet__Group_4__0");
			builder.put(grammarAccess.getInstructionSetAccess().getGroup_4_3(), "rule__InstructionSet__Group_4_3__0");
			builder.put(grammarAccess.getInstructionSetAccess().getGroup_5(), "rule__InstructionSet__Group_5__0");
			builder.put(grammarAccess.getInstructionSetAccess().getGroup_5_3(), "rule__InstructionSet__Group_5_3__0");
			builder.put(grammarAccess.getInstructionSetAccess().getGroup_6(), "rule__InstructionSet__Group_6__0");
			builder.put(grammarAccess.getInstructionSetAccess().getGroup_6_3(), "rule__InstructionSet__Group_6_3__0");
			builder.put(grammarAccess.getInstructionSetAccess().getGroup_7(), "rule__InstructionSet__Group_7__0");
			builder.put(grammarAccess.getCoreDefAccess().getGroup(), "rule__CoreDef__Group__0");
			builder.put(grammarAccess.getCoreDefAccess().getGroup_2(), "rule__CoreDef__Group_2__0");
			builder.put(grammarAccess.getCoreDefAccess().getGroup_2_2(), "rule__CoreDef__Group_2_2__0");
			builder.put(grammarAccess.getCoreDefAccess().getGroup_4(), "rule__CoreDef__Group_4__0");
			builder.put(grammarAccess.getCoreDefAccess().getGroup_5(), "rule__CoreDef__Group_5__0");
			builder.put(grammarAccess.getCoreDefAccess().getGroup_6(), "rule__CoreDef__Group_6__0");
			builder.put(grammarAccess.getCoreDefAccess().getGroup_6_3(), "rule__CoreDef__Group_6_3__0");
			builder.put(grammarAccess.getCoreDefAccess().getGroup_7(), "rule__CoreDef__Group_7__0");
			builder.put(grammarAccess.getCoreDefAccess().getGroup_7_3(), "rule__CoreDef__Group_7_3__0");
			builder.put(grammarAccess.getCoreDefAccess().getGroup_8(), "rule__CoreDef__Group_8__0");
			builder.put(grammarAccess.getRangeSpecAccess().getGroup(), "rule__RangeSpec__Group__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_0(), "rule__Instruction__Group_0__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_0_1(), "rule__Instruction__Group_0_1__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_0_1_2(), "rule__Instruction__Group_0_1_2__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_0_3(), "rule__Instruction__Group_0_3__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_1(), "rule__Instruction__Group_1__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_1_0(), "rule__Instruction__Group_1_0__0");
			builder.put(grammarAccess.getEncodingAccess().getGroup(), "rule__Encoding__Group__0");
			builder.put(grammarAccess.getEncodingAccess().getGroup_1(), "rule__Encoding__Group_1__0");
			builder.put(grammarAccess.getBitFieldAccess().getGroup(), "rule__BitField__Group__0");
			builder.put(grammarAccess.getBitFieldAccess().getGroup_2(), "rule__BitField__Group_2__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup_0_0(), "rule__Assignment__Group_0_0__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup_0_1(), "rule__Assignment__Group_0_1__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup_0_2(), "rule__Assignment__Group_0_2__0");
			builder.put(grammarAccess.getConditionalStmtAccess().getGroup(), "rule__ConditionalStmt__Group__0");
			builder.put(grammarAccess.getConditionalStmtAccess().getGroup_4_1(), "rule__ConditionalStmt__Group_4_1__0");
			builder.put(grammarAccess.getConditionalStmtAccess().getGroup_5(), "rule__ConditionalStmt__Group_5__0");
			builder.put(grammarAccess.getConditionalStmtAccess().getGroup_5_1_1(), "rule__ConditionalStmt__Group_5_1_1__0");
			builder.put(grammarAccess.getDirectCodeAccess().getGroup(), "rule__DirectCode__Group__0");
			builder.put(grammarAccess.getProcedureAccess().getGroup(), "rule__Procedure__Group__0");
			builder.put(grammarAccess.getProcedureAccess().getGroup_3(), "rule__Procedure__Group_3__0");
			builder.put(grammarAccess.getConstantDefAccess().getGroup(), "rule__ConstantDef__Group__0");
			builder.put(grammarAccess.getConstantDefAccess().getGroup_3(), "rule__ConstantDef__Group_3__0");
			builder.put(grammarAccess.getConstantDefAccess().getGroup_3_2(), "rule__ConstantDef__Group_3_2__0");
			builder.put(grammarAccess.getConstantDeclAccess().getGroup(), "rule__ConstantDecl__Group__0");
			builder.put(grammarAccess.getConstantDefaultAccess().getGroup(), "rule__ConstantDefault__Group__0");
			builder.put(grammarAccess.getAddressSpaceAccess().getGroup(), "rule__AddressSpace__Group__0");
			builder.put(grammarAccess.getRegisterFileAccess().getGroup(), "rule__RegisterFile__Group__0");
			builder.put(grammarAccess.getRegisterFileAccess().getGroup_0(), "rule__RegisterFile__Group_0__0");
			builder.put(grammarAccess.getRegisterFileAccess().getGroup_4(), "rule__RegisterFile__Group_4__0");
			builder.put(grammarAccess.getRegisterFileAccess().getGroup_4_2(), "rule__RegisterFile__Group_4_2__0");
			builder.put(grammarAccess.getRegisterAccess().getGroup(), "rule__Register__Group__0");
			builder.put(grammarAccess.getRegisterAccess().getGroup_4(), "rule__Register__Group_4__0");
			builder.put(grammarAccess.getRegisterAccess().getGroup_4_2(), "rule__Register__Group_4_2__0");
			builder.put(grammarAccess.getRegisterAliasAccess().getGroup(), "rule__RegisterAlias__Group__0");
			builder.put(grammarAccess.getRegisterAliasAccess().getGroup_5(), "rule__RegisterAlias__Group_5__0");
			builder.put(grammarAccess.getRegisterAliasAccess().getGroup_5_2(), "rule__RegisterAlias__Group_5_2__0");
			builder.put(grammarAccess.getRegisterAliasAccess().getGroup_7_1(), "rule__RegisterAlias__Group_7_1__0");
			builder.put(grammarAccess.getScalarAccess().getGroup(), "rule__Scalar__Group__0");
			builder.put(grammarAccess.getScalarBaseAccess().getGroup(), "rule__ScalarBase__Group__0");
			builder.put(grammarAccess.getBooleanOrExprAccess().getGroup(), "rule__BooleanOrExpr__Group__0");
			builder.put(grammarAccess.getBooleanOrExprAccess().getGroup_1(), "rule__BooleanOrExpr__Group_1__0");
			builder.put(grammarAccess.getBooleanAndExprAccess().getGroup(), "rule__BooleanAndExpr__Group__0");
			builder.put(grammarAccess.getBooleanAndExprAccess().getGroup_1(), "rule__BooleanAndExpr__Group_1__0");
			builder.put(grammarAccess.getBitOrExprAccess().getGroup(), "rule__BitOrExpr__Group__0");
			builder.put(grammarAccess.getBitOrExprAccess().getGroup_1(), "rule__BitOrExpr__Group_1__0");
			builder.put(grammarAccess.getBitXOrExprAccess().getGroup(), "rule__BitXOrExpr__Group__0");
			builder.put(grammarAccess.getBitXOrExprAccess().getGroup_1(), "rule__BitXOrExpr__Group_1__0");
			builder.put(grammarAccess.getBitAndExprAccess().getGroup(), "rule__BitAndExpr__Group__0");
			builder.put(grammarAccess.getBitAndExprAccess().getGroup_1(), "rule__BitAndExpr__Group_1__0");
			builder.put(grammarAccess.getEqualityExprAccess().getGroup(), "rule__EqualityExpr__Group__0");
			builder.put(grammarAccess.getEqualityExprAccess().getGroup_1(), "rule__EqualityExpr__Group_1__0");
			builder.put(grammarAccess.getComparisonExprAccess().getGroup(), "rule__ComparisonExpr__Group__0");
			builder.put(grammarAccess.getComparisonExprAccess().getGroup_1(), "rule__ComparisonExpr__Group_1__0");
			builder.put(grammarAccess.getShiftExprAccess().getGroup(), "rule__ShiftExpr__Group__0");
			builder.put(grammarAccess.getShiftExprAccess().getGroup_1(), "rule__ShiftExpr__Group_1__0");
			builder.put(grammarAccess.getAdditionExprAccess().getGroup(), "rule__AdditionExpr__Group__0");
			builder.put(grammarAccess.getAdditionExprAccess().getGroup_1(), "rule__AdditionExpr__Group_1__0");
			builder.put(grammarAccess.getMultiplicationExprAccess().getGroup(), "rule__MultiplicationExpr__Group__0");
			builder.put(grammarAccess.getMultiplicationExprAccess().getGroup_1(), "rule__MultiplicationExpr__Group_1__0");
			builder.put(grammarAccess.getUnitaryExprAccess().getGroup_1(), "rule__UnitaryExpr__Group_1__0");
			builder.put(grammarAccess.getTypeConvAccess().getGroup(), "rule__TypeConv__Group__0");
			builder.put(grammarAccess.getTypeConvAccess().getGroup_1(), "rule__TypeConv__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1_3(), "rule__Primary__Group_1_3__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1_3_1(), "rule__Primary__Group_1_3_1__0");
			builder.put(grammarAccess.getValueRefAccess().getGroup(), "rule__ValueRef__Group__0");
			builder.put(grammarAccess.getValueRefAccess().getGroup_0_0(), "rule__ValueRef__Group_0_0__0");
			builder.put(grammarAccess.getBitSizeSpecAccess().getGroup(), "rule__BitSizeSpec__Group__0");
			builder.put(grammarAccess.getDescriptionContentAccess().getImportsAssignment_0(), "rule__DescriptionContent__ImportsAssignment_0");
			builder.put(grammarAccess.getDescriptionContentAccess().getDefinitionsAssignment_1(), "rule__DescriptionContent__DefinitionsAssignment_1");
			builder.put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
			builder.put(grammarAccess.getInstructionSetAccess().getNameAssignment_1(), "rule__InstructionSet__NameAssignment_1");
			builder.put(grammarAccess.getInstructionSetAccess().getSuperTypeAssignment_2_1(), "rule__InstructionSet__SuperTypeAssignment_2_1");
			builder.put(grammarAccess.getInstructionSetAccess().getConstantsAssignment_4_2(), "rule__InstructionSet__ConstantsAssignment_4_2");
			builder.put(grammarAccess.getInstructionSetAccess().getConstantsAssignment_4_3_1(), "rule__InstructionSet__ConstantsAssignment_4_3_1");
			builder.put(grammarAccess.getInstructionSetAccess().getSpacesAssignment_5_2(), "rule__InstructionSet__SpacesAssignment_5_2");
			builder.put(grammarAccess.getInstructionSetAccess().getSpacesAssignment_5_3_1(), "rule__InstructionSet__SpacesAssignment_5_3_1");
			builder.put(grammarAccess.getInstructionSetAccess().getRegsAssignment_6_2(), "rule__InstructionSet__RegsAssignment_6_2");
			builder.put(grammarAccess.getInstructionSetAccess().getRegsAssignment_6_3_1(), "rule__InstructionSet__RegsAssignment_6_3_1");
			builder.put(grammarAccess.getInstructionSetAccess().getInstrAssignment_7_2(), "rule__InstructionSet__InstrAssignment_7_2");
			builder.put(grammarAccess.getCoreDefAccess().getNameAssignment_1(), "rule__CoreDef__NameAssignment_1");
			builder.put(grammarAccess.getCoreDefAccess().getContributingTypeAssignment_2_1(), "rule__CoreDef__ContributingTypeAssignment_2_1");
			builder.put(grammarAccess.getCoreDefAccess().getContributingTypeAssignment_2_2_1(), "rule__CoreDef__ContributingTypeAssignment_2_2_1");
			builder.put(grammarAccess.getCoreDefAccess().getTemplateNameAssignment_4_2(), "rule__CoreDef__TemplateNameAssignment_4_2");
			builder.put(grammarAccess.getCoreDefAccess().getConstantsAssignment_5_2(), "rule__CoreDef__ConstantsAssignment_5_2");
			builder.put(grammarAccess.getCoreDefAccess().getSpacesAssignment_6_2(), "rule__CoreDef__SpacesAssignment_6_2");
			builder.put(grammarAccess.getCoreDefAccess().getSpacesAssignment_6_3_1(), "rule__CoreDef__SpacesAssignment_6_3_1");
			builder.put(grammarAccess.getCoreDefAccess().getRegsAssignment_7_2(), "rule__CoreDef__RegsAssignment_7_2");
			builder.put(grammarAccess.getCoreDefAccess().getRegsAssignment_7_3_1(), "rule__CoreDef__RegsAssignment_7_3_1");
			builder.put(grammarAccess.getCoreDefAccess().getInstrAssignment_8_2(), "rule__CoreDef__InstrAssignment_8_2");
			builder.put(grammarAccess.getRangeSpecAccess().getLeftAssignment_1(), "rule__RangeSpec__LeftAssignment_1");
			builder.put(grammarAccess.getRangeSpecAccess().getRightAssignment_3(), "rule__RangeSpec__RightAssignment_3");
			builder.put(grammarAccess.getInstructionAccess().getNameAssignment_0_0(), "rule__Instruction__NameAssignment_0_0");
			builder.put(grammarAccess.getInstructionAccess().getAttributesAssignment_0_1_1(), "rule__Instruction__AttributesAssignment_0_1_1");
			builder.put(grammarAccess.getInstructionAccess().getAttributesAssignment_0_1_2_1(), "rule__Instruction__AttributesAssignment_0_1_2_1");
			builder.put(grammarAccess.getInstructionAccess().getEncodingAssignment_0_3_2(), "rule__Instruction__EncodingAssignment_0_3_2");
			builder.put(grammarAccess.getInstructionAccess().getDisassAssignment_1_0_2(), "rule__Instruction__DisassAssignment_1_0_2");
			builder.put(grammarAccess.getInstructionAccess().getOperationAssignment_1_1(), "rule__Instruction__OperationAssignment_1_1");
			builder.put(grammarAccess.getEncodingAccess().getFieldsAssignment_0(), "rule__Encoding__FieldsAssignment_0");
			builder.put(grammarAccess.getEncodingAccess().getFieldsAssignment_1_1(), "rule__Encoding__FieldsAssignment_1_1");
			builder.put(grammarAccess.getBitValueAccess().getNameAssignment(), "rule__BitValue__NameAssignment");
			builder.put(grammarAccess.getBitFieldAccess().getNameAssignment_0(), "rule__BitField__NameAssignment_0");
			builder.put(grammarAccess.getBitFieldAccess().getBitRangeAssignment_1(), "rule__BitField__BitRangeAssignment_1");
			builder.put(grammarAccess.getBitFieldAccess().getTypeAssignment_2_1(), "rule__BitField__TypeAssignment_2_1");
			builder.put(grammarAccess.getOperationAccess().getStatementsAssignment(), "rule__Operation__StatementsAssignment");
			builder.put(grammarAccess.getAssignmentAccess().getToAssignment_0_0_1(), "rule__Assignment__ToAssignment_0_0_1");
			builder.put(grammarAccess.getAssignmentAccess().getIndexAssignment_0_0_3(), "rule__Assignment__IndexAssignment_0_0_3");
			builder.put(grammarAccess.getAssignmentAccess().getToAssignment_0_1_1(), "rule__Assignment__ToAssignment_0_1_1");
			builder.put(grammarAccess.getAssignmentAccess().getToAssignment_0_2_1(), "rule__Assignment__ToAssignment_0_2_1");
			builder.put(grammarAccess.getAssignmentAccess().getBitWidthAssignment_1(), "rule__Assignment__BitWidthAssignment_1");
			builder.put(grammarAccess.getAssignmentAccess().getExpressionAssignment_3(), "rule__Assignment__ExpressionAssignment_3");
			builder.put(grammarAccess.getConditionalStmtAccess().getCondAssignment_2(), "rule__ConditionalStmt__CondAssignment_2");
			builder.put(grammarAccess.getConditionalStmtAccess().getThenStmtsAssignment_4_0(), "rule__ConditionalStmt__ThenStmtsAssignment_4_0");
			builder.put(grammarAccess.getConditionalStmtAccess().getThenStmtsAssignment_4_1_1(), "rule__ConditionalStmt__ThenStmtsAssignment_4_1_1");
			builder.put(grammarAccess.getConditionalStmtAccess().getElseStmtsAssignment_5_1_0(), "rule__ConditionalStmt__ElseStmtsAssignment_5_1_0");
			builder.put(grammarAccess.getConditionalStmtAccess().getElseStmtsAssignment_5_1_1_1(), "rule__ConditionalStmt__ElseStmtsAssignment_5_1_1_1");
			builder.put(grammarAccess.getDirectCodeAccess().getCodeAssignment_2(), "rule__DirectCode__CodeAssignment_2");
			builder.put(grammarAccess.getDirectCodeAccess().getCodeAssignment_3(), "rule__DirectCode__CodeAssignment_3");
			builder.put(grammarAccess.getProcedureAccess().getNameAssignment_0(), "rule__Procedure__NameAssignment_0");
			builder.put(grammarAccess.getProcedureAccess().getArgsAssignment_2(), "rule__Procedure__ArgsAssignment_2");
			builder.put(grammarAccess.getProcedureAccess().getArgsAssignment_3_1(), "rule__Procedure__ArgsAssignment_3_1");
			builder.put(grammarAccess.getConstantDefAccess().getNameAssignment_0(), "rule__ConstantDef__NameAssignment_0");
			builder.put(grammarAccess.getConstantDefAccess().getValueAssignment_2(), "rule__ConstantDef__ValueAssignment_2");
			builder.put(grammarAccess.getConstantDefAccess().getAttributesAssignment_3_1(), "rule__ConstantDef__AttributesAssignment_3_1");
			builder.put(grammarAccess.getConstantDefAccess().getAttributesAssignment_3_2_1(), "rule__ConstantDef__AttributesAssignment_3_2_1");
			builder.put(grammarAccess.getConstantDeclAccess().getNameAssignment_0(), "rule__ConstantDecl__NameAssignment_0");
			builder.put(grammarAccess.getConstantDeclAccess().getConstantDefaultAssignment_1(), "rule__ConstantDecl__ConstantDefaultAssignment_1");
			builder.put(grammarAccess.getConstantDefaultAccess().getDefaultValueAssignment_1(), "rule__ConstantDefault__DefaultValueAssignment_1");
			builder.put(grammarAccess.getAddressSpaceAccess().getNameAssignment_0(), "rule__AddressSpace__NameAssignment_0");
			builder.put(grammarAccess.getAddressSpaceAccess().getBitSizeAssignment_2_0(), "rule__AddressSpace__BitSizeAssignment_2_0");
			builder.put(grammarAccess.getAddressSpaceAccess().getBitSizeConstAssignment_2_1(), "rule__AddressSpace__BitSizeConstAssignment_2_1");
			builder.put(grammarAccess.getRegisterFileAccess().getRangeAssignment_0_0(), "rule__RegisterFile__RangeAssignment_0_0");
			builder.put(grammarAccess.getRegisterFileAccess().getNameAssignment_0_1(), "rule__RegisterFile__NameAssignment_0_1");
			builder.put(grammarAccess.getRegisterFileAccess().getBitSizeAssignment_2_0(), "rule__RegisterFile__BitSizeAssignment_2_0");
			builder.put(grammarAccess.getRegisterFileAccess().getBitSizeConstAssignment_2_1(), "rule__RegisterFile__BitSizeConstAssignment_2_1");
			builder.put(grammarAccess.getRegisterFileAccess().getAttributesAssignment_4_1(), "rule__RegisterFile__AttributesAssignment_4_1");
			builder.put(grammarAccess.getRegisterFileAccess().getAttributesAssignment_4_2_1(), "rule__RegisterFile__AttributesAssignment_4_2_1");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_0(), "rule__Register__NameAssignment_0");
			builder.put(grammarAccess.getRegisterAccess().getBitSizeAssignment_2_0(), "rule__Register__BitSizeAssignment_2_0");
			builder.put(grammarAccess.getRegisterAccess().getBitSizeConstAssignment_2_1(), "rule__Register__BitSizeConstAssignment_2_1");
			builder.put(grammarAccess.getRegisterAccess().getAttributesAssignment_4_1(), "rule__Register__AttributesAssignment_4_1");
			builder.put(grammarAccess.getRegisterAccess().getAttributesAssignment_4_2_1(), "rule__Register__AttributesAssignment_4_2_1");
			builder.put(grammarAccess.getRegisterAliasAccess().getNameAssignment_1(), "rule__RegisterAlias__NameAssignment_1");
			builder.put(grammarAccess.getRegisterAliasAccess().getBitSizeAssignment_3_0(), "rule__RegisterAlias__BitSizeAssignment_3_0");
			builder.put(grammarAccess.getRegisterAliasAccess().getBitSizeConstAssignment_3_1(), "rule__RegisterAlias__BitSizeConstAssignment_3_1");
			builder.put(grammarAccess.getRegisterAliasAccess().getAttributesAssignment_5_1(), "rule__RegisterAlias__AttributesAssignment_5_1");
			builder.put(grammarAccess.getRegisterAliasAccess().getAttributesAssignment_5_2_1(), "rule__RegisterAlias__AttributesAssignment_5_2_1");
			builder.put(grammarAccess.getRegisterAliasAccess().getOriginalAssignment_7_0(), "rule__RegisterAlias__OriginalAssignment_7_0");
			builder.put(grammarAccess.getRegisterAliasAccess().getOriginalAssignment_7_1_0(), "rule__RegisterAlias__OriginalAssignment_7_1_0");
			builder.put(grammarAccess.getRegisterAliasAccess().getIndexAssignment_7_1_2_0(), "rule__RegisterAlias__IndexAssignment_7_1_2_0");
			builder.put(grammarAccess.getRegisterAliasAccess().getIndexAssignment_7_1_2_1(), "rule__RegisterAlias__IndexAssignment_7_1_2_1");
			builder.put(grammarAccess.getScalarAccess().getNameAssignment_1(), "rule__Scalar__NameAssignment_1");
			builder.put(grammarAccess.getScalarAccess().getBitSizeAssignment_3_0(), "rule__Scalar__BitSizeAssignment_3_0");
			builder.put(grammarAccess.getScalarAccess().getBitSizeConstAssignment_3_1(), "rule__Scalar__BitSizeConstAssignment_3_1");
			builder.put(grammarAccess.getScalarBaseAccess().getDeterminedAssignment_1(), "rule__ScalarBase__DeterminedAssignment_1");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
			builder.put(grammarAccess.getBooleanOrExprAccess().getOpAssignment_1_1(), "rule__BooleanOrExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getBooleanOrExprAccess().getRightAssignment_1_2(), "rule__BooleanOrExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getBooleanAndExprAccess().getOpAssignment_1_1(), "rule__BooleanAndExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getBooleanAndExprAccess().getRightAssignment_1_2(), "rule__BooleanAndExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getBitOrExprAccess().getOpAssignment_1_1(), "rule__BitOrExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getBitOrExprAccess().getRightAssignment_1_2(), "rule__BitOrExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getBitXOrExprAccess().getOpAssignment_1_1(), "rule__BitXOrExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getBitXOrExprAccess().getRightAssignment_1_2(), "rule__BitXOrExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getBitAndExprAccess().getOpAssignment_1_1(), "rule__BitAndExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getBitAndExprAccess().getRightAssignment_1_2(), "rule__BitAndExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityExprAccess().getOpAssignment_1_1(), "rule__EqualityExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getEqualityExprAccess().getRightAssignment_1_2(), "rule__EqualityExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getComparisonExprAccess().getOpAssignment_1_1(), "rule__ComparisonExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getComparisonExprAccess().getRightAssignment_1_2(), "rule__ComparisonExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getShiftExprAccess().getOpAssignment_1_1(), "rule__ShiftExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getShiftExprAccess().getRightAssignment_1_2(), "rule__ShiftExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditionExprAccess().getOpAssignment_1_1(), "rule__AdditionExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getAdditionExprAccess().getRightAssignment_1_2(), "rule__AdditionExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationExprAccess().getOpAssignment_1_1(), "rule__MultiplicationExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationExprAccess().getRightAssignment_1_2(), "rule__MultiplicationExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getUnitaryExprAccess().getOpAssignment_1_1(), "rule__UnitaryExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getUnitaryExprAccess().getExprAssignment_1_2(), "rule__UnitaryExpr__ExprAssignment_1_2");
			builder.put(grammarAccess.getTypeConvAccess().getTypeAssignment_1_2(), "rule__TypeConv__TypeAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getNameAssignment_1_1(), "rule__Primary__NameAssignment_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getArgsAssignment_1_3_0(), "rule__Primary__ArgsAssignment_1_3_0");
			builder.put(grammarAccess.getPrimaryAccess().getArgsAssignment_1_3_1_1(), "rule__Primary__ArgsAssignment_1_3_1_1");
			builder.put(grammarAccess.getValueRefAccess().getValueAssignment_0_0_0(), "rule__ValueRef__ValueAssignment_0_0_0");
			builder.put(grammarAccess.getValueRefAccess().getIndexAssignment_0_0_2(), "rule__ValueRef__IndexAssignment_0_0_2");
			builder.put(grammarAccess.getValueRefAccess().getValueAssignment_0_1(), "rule__ValueRef__ValueAssignment_0_1");
			builder.put(grammarAccess.getValueRefAccess().getValueAssignment_0_2(), "rule__ValueRef__ValueAssignment_0_2");
			builder.put(grammarAccess.getValueRefAccess().getBitWidthAssignment_1(), "rule__ValueRef__BitWidthAssignment_1");
			builder.put(grammarAccess.getBitSizeSpecAccess().getValueAssignment_1_0(), "rule__BitSizeSpec__ValueAssignment_1_0");
			builder.put(grammarAccess.getBitSizeSpecAccess().getConstantAssignment_1_1(), "rule__BitSizeSpec__ConstantAssignment_1_1");
			builder.put(grammarAccess.getInstructionAccess().getUnorderedGroup(), "rule__Instruction__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CoreDslGrammarAccess grammarAccess;

	@Override
	protected InternalCoreDslParser createParser() {
		InternalCoreDslParser result = new InternalCoreDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CoreDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CoreDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
